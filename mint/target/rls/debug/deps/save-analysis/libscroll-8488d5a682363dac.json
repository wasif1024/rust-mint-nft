{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0","program":"/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","scroll","--edition=2021","/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"derive\"","--cfg","feature=\"scroll_derive\"","--cfg","feature=\"std\"","-C","metadata=8488d5a682363dac","-C","extra-filename=-8488d5a682363dac","--out-dir","/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","-L","dependency=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","--extern","scroll_derive=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libscroll_derive-d62cdacd67512cd5.dylib","--cap-lints","allow","--error-format=json","--sysroot","/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libscroll-8488d5a682363dac.rmeta"},"prelude":{"crate_id":{"name":"scroll","disambiguator":[702088724362842129,0]},"crate_root":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src","external_crates":[{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4485569597606079733,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14116380118705386640,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6269322086078963025,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16152481959168563413,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7897074911849024150,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7299104579826168146,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2669544452907545777,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[14288251452253695433,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13943810077905921301,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2237926517141734526,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[5541021343498733002,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[7188895526679788668,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[15555671723428220450,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[13375000548276363576,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8920282723255285566,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2397004371161247654,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","num":20,"id":{"name":"scroll_derive","disambiguator":[15426093329237701046,0]}}],"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":0,"byte_end":22524,"line_start":1,"line_end":637,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":20,"index":42},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9099,"byte_end":9105,"line_start":226,"line_end":226,"column_start":25,"column_end":31},"alias_span":null,"name":"IOread","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":49},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9107,"byte_end":9114,"line_start":226,"line_end":226,"column_start":33,"column_end":40},"alias_span":null,"name":"IOwrite","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":20},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9116,"byte_end":9121,"line_start":226,"line_end":226,"column_start":42,"column_end":47},"alias_span":null,"name":"Pread","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":29},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9123,"byte_end":9129,"line_start":226,"line_end":226,"column_start":49,"column_end":55},"alias_span":null,"name":"Pwrite","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":35},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9131,"byte_end":9139,"line_start":226,"line_end":226,"column_start":57,"column_end":65},"alias_span":null,"name":"SizeWith","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9331,"byte_end":9332,"line_start":241,"line_end":241,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9356,"byte_end":9357,"line_start":242,"line_end":242,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9383,"byte_end":9384,"line_start":243,"line_end":243,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9409,"byte_end":9410,"line_start":244,"line_end":244,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9459,"byte_end":9460,"line_start":246,"line_end":246,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9484,"byte_end":9485,"line_start":247,"line_end":247,"column_start":23,"column_end":24},"alias_span":null,"name":"*","value":"Pread","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9510,"byte_end":9511,"line_start":248,"line_end":248,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":2,"index":1886},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9566,"byte_end":9569,"line_start":252,"line_end":252,"column_start":21,"column_end":24},"alias_span":null,"name":"mem","value":"","parent":{"krate":0,"index":375}},{"kind":"Use","ref_id":{"krate":2,"index":9389},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9591,"byte_end":9597,"line_start":253,"line_end":253,"column_start":21,"column_end":27},"alias_span":null,"name":"result","value":"","parent":{"krate":0,"index":375}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":0,"byte_end":22524,"line_start":1,"line_end":637,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":16},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":136},{"krate":0,"index":148},{"krate":0,"index":174},{"krate":0,"index":214},{"krate":0,"index":262},{"krate":0,"index":303},{"krate":0,"index":341},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":382},{"krate":0,"index":812}],"decl_id":null,"docs":" # Scroll","sig":null,"attributes":[{"value":"/ # Scroll","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":0,"byte_end":12,"line_start":1,"line_end":1,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":13,"byte_end":16,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```text, no_run","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":17,"byte_end":36,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/         _______________","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":37,"byte_end":64,"line_start":4,"line_end":4,"column_start":1,"column_end":28}},{"value":"/    ()==(              (@==()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":65,"byte_end":97,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"/         '______________'|","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":98,"byte_end":127,"line_start":6,"line_end":6,"column_start":1,"column_end":30}},{"value":"/           |             |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":128,"byte_end":157,"line_start":7,"line_end":7,"column_start":1,"column_end":30}},{"value":"/           |   ἀρετή     |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":158,"byte_end":193,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/         __)_____________|","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":194,"byte_end":223,"line_start":9,"line_end":9,"column_start":1,"column_end":30}},{"value":"/    ()==(               (@==()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":224,"byte_end":257,"line_start":10,"line_end":10,"column_start":1,"column_end":34}},{"value":"/         '--------------'","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":258,"byte_end":286,"line_start":11,"line_end":11,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":287,"byte_end":290,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":291,"byte_end":298,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":299,"byte_end":302,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Scroll is a library for easily and efficiently reading/writing types from data containers like","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":303,"byte_end":401,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ byte arrays.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":402,"byte_end":418,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":419,"byte_end":422,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ## Easily:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":423,"byte_end":437,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":438,"byte_end":441,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Scroll sets down a number of traits:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":442,"byte_end":482,"line_start":20,"line_end":20,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":483,"byte_end":486,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ [FromCtx](ctx/trait.FromCtx.html), [IntoCtx](ctx/trait.IntoCtx.html),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":487,"byte_end":560,"line_start":22,"line_end":22,"column_start":1,"column_end":74}},{"value":"/ [TryFromCtx](ctx/trait.TryFromCtx.html) and [TryIntoCtx](ctx/trait.TryIntoCtx.html) — further","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":561,"byte_end":660,"line_start":23,"line_end":23,"column_start":1,"column_end":98}},{"value":"/ explained in the [ctx module](ctx/index.html); to be implemented on custom types to allow","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":661,"byte_end":754,"line_start":24,"line_end":24,"column_start":1,"column_end":94}},{"value":"/ reading, writing, and potentially fallible reading/writing respectively.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":755,"byte_end":831,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":832,"byte_end":835,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [Pread](trait.Pread.html) and [Pwrite](trait.Pwrite.html) which are implemented on data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":836,"byte_end":927,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ containers such as byte arrays to define how to read or respectively write types implementing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":928,"byte_end":1025,"line_start":28,"line_end":28,"column_start":1,"column_end":98}},{"value":"/ the *Ctx traits above.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1026,"byte_end":1052,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/ In addition scroll also defines [IOread](trait.IOread.html) and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1053,"byte_end":1120,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/ [IOwrite](trait.IOwrite.html) with additional constraits that then allow reading and writing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1121,"byte_end":1217,"line_start":31,"line_end":31,"column_start":1,"column_end":97}},{"value":"/ from `std::io` [Read](https://doc.rust-lang.org/nightly/std/io/trait.Read.html) and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1218,"byte_end":1305,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/ [Write](https://doc.rust-lang.org/nightly/std/io/trait.Write.html).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1306,"byte_end":1377,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1378,"byte_end":1381,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1382,"byte_end":1385,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ In most cases you can use [scroll_derive](https://docs.rs/scroll_derive) to derive sensible","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1386,"byte_end":1481,"line_start":36,"line_end":36,"column_start":1,"column_end":96}},{"value":"/ defaults for `Pread`, `Pwrite`, their IO counterpart and `SizeWith`.  More complex situations","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1482,"byte_end":1579,"line_start":37,"line_end":37,"column_start":1,"column_end":98}},{"value":"/ call for manual implementation of those traits; refer to [the ctx module](ctx/index.html) for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1580,"byte_end":1677,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1678,"byte_end":1690,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1691,"byte_end":1694,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1695,"byte_end":1698,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ## Efficiently:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1699,"byte_end":1718,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1719,"byte_end":1722,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Reading Slices — including [&str](https://doc.rust-lang.org/std/primitive.str.html) — supports","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1723,"byte_end":1825,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"/ zero-copy. Scroll is designed with a `no_std` context in mind; every dependency on `std` is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1826,"byte_end":1921,"line_start":45,"line_end":45,"column_start":1,"column_end":96}},{"value":"/ cfg-gated and errors need not allocate.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1922,"byte_end":1965,"line_start":46,"line_end":46,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1966,"byte_end":1969,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Reads by default take only immutable references wherever possible, allowing for trivial","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":1970,"byte_end":2061,"line_start":48,"line_end":48,"column_start":1,"column_end":92}},{"value":"/ parallelization.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2062,"byte_end":2082,"line_start":49,"line_end":49,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2083,"byte_end":2086,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2087,"byte_end":2101,"line_start":51,"line_end":51,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2102,"byte_end":2105,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ Let's start with a simple example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2106,"byte_end":2143,"line_start":53,"line_end":53,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2144,"byte_end":2147,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2148,"byte_end":2159,"line_start":55,"line_end":55,"column_start":1,"column_end":12}},{"value":"/ use scroll::{ctx, Pread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2160,"byte_end":2189,"line_start":56,"line_end":56,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2190,"byte_end":2193,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Let's first define some data, cfg-gated so our assertions later on hold.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2194,"byte_end":2273,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2274,"byte_end":2310,"line_start":59,"line_end":59,"column_start":1,"column_end":37}},{"value":"/ let bytes: [u8; 4] = [0xde, 0xad, 0xbe, 0xef];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2311,"byte_end":2361,"line_start":60,"line_end":60,"column_start":1,"column_end":51}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2362,"byte_end":2395,"line_start":61,"line_end":61,"column_start":1,"column_end":34}},{"value":"/ let bytes: [u8; 4] = [0xef, 0xbe, 0xad, 0xde];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2396,"byte_end":2446,"line_start":62,"line_end":62,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2447,"byte_end":2450,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // We can read a u32 from the array `bytes` at offset 0.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2451,"byte_end":2511,"line_start":64,"line_end":64,"column_start":1,"column_end":61}},{"value":"/ // This will use a default context for the type being parsed;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2512,"byte_end":2577,"line_start":65,"line_end":65,"column_start":1,"column_end":66}},{"value":"/ // in the case of u32 this defines to use the host's endianess.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2578,"byte_end":2645,"line_start":66,"line_end":66,"column_start":1,"column_end":68}},{"value":"/ let number = bytes.pread::<u32>(0).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2646,"byte_end":2694,"line_start":67,"line_end":67,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(number, 0xefbeadde);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2695,"byte_end":2730,"line_start":68,"line_end":68,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2731,"byte_end":2734,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2735,"byte_end":2738,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Similarly we can also read a single byte at offset 2","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2739,"byte_end":2798,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/ // This time using type ascription instead of the turbofish (::<>) operator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2799,"byte_end":2879,"line_start":72,"line_end":72,"column_start":1,"column_end":81}},{"value":"/ let byte: u8 = bytes.pread(2).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2880,"byte_end":2923,"line_start":73,"line_end":73,"column_start":1,"column_end":44}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2924,"byte_end":2960,"line_start":74,"line_end":74,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(byte, 0xbe);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2961,"byte_end":2988,"line_start":75,"line_end":75,"column_start":1,"column_end":28}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":2989,"byte_end":3022,"line_start":76,"line_end":76,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(byte, 0xad);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3023,"byte_end":3050,"line_start":77,"line_end":77,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3051,"byte_end":3054,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3055,"byte_end":3058,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // If required we can also provide a specific parsing context; e.g. if we want to explicitly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3059,"byte_end":3155,"line_start":80,"line_end":80,"column_start":1,"column_end":97}},{"value":"/ // define the endianess to use:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3156,"byte_end":3191,"line_start":81,"line_end":81,"column_start":1,"column_end":36}},{"value":"/ let be_number: u32 = bytes.pread_with(0, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3192,"byte_end":3258,"line_start":82,"line_end":82,"column_start":1,"column_end":67}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3259,"byte_end":3295,"line_start":83,"line_end":83,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(be_number, 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3296,"byte_end":3334,"line_start":84,"line_end":84,"column_start":1,"column_end":39}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3335,"byte_end":3368,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(be_number, 0xefbeadde);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3369,"byte_end":3407,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3408,"byte_end":3411,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ let be_number16 = bytes.pread_with::<u16>(1, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3412,"byte_end":3482,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3483,"byte_end":3519,"line_start":89,"line_end":89,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(be_number16, 0xadbe);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3520,"byte_end":3556,"line_start":90,"line_end":90,"column_start":1,"column_end":37}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3557,"byte_end":3590,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(be_number16, 0xbead);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3591,"byte_end":3627,"line_start":92,"line_end":92,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3628,"byte_end":3631,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3632,"byte_end":3635,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ // Reads may fail; in this example due to a too large read for the given container.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3636,"byte_end":3723,"line_start":95,"line_end":95,"column_start":1,"column_end":88}},{"value":"/ // Scroll's error type does not by default allocate to work in environments like no_std.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3724,"byte_end":3816,"line_start":96,"line_end":96,"column_start":1,"column_end":93}},{"value":"/ let byte_err: scroll::Result<i64> = bytes.pread(0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3817,"byte_end":3872,"line_start":97,"line_end":97,"column_start":1,"column_end":56}},{"value":"/ assert!(byte_err.is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3873,"byte_end":3904,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3905,"byte_end":3908,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3909,"byte_end":3912,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // We can parse out custom datatypes, or types with lifetimes, as long as they implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":3913,"byte_end":4005,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"/ // the conversion traits `TryFromCtx/FromCtx`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4006,"byte_end":4056,"line_start":102,"line_end":102,"column_start":1,"column_end":51}},{"value":"/ // Here we use the default context for &str which parses are C-style '\\0'-delimited string.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4057,"byte_end":4152,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ let hello: &[u8] = b\"hello world\\0more words\";","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4153,"byte_end":4203,"line_start":104,"line_end":104,"column_start":1,"column_end":51}},{"value":"/ let hello_world: &str = hello.pread(0).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4204,"byte_end":4256,"line_start":105,"line_end":105,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(\"hello world\", hello_world);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4257,"byte_end":4300,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4301,"byte_end":4304,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ // We can again provide a custom context; for example to parse Space-delimited strings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4305,"byte_end":4396,"line_start":108,"line_end":108,"column_start":1,"column_end":92}},{"value":"/ // As you can see while we still call `pread` changing the context can influence the output —","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4397,"byte_end":4496,"line_start":109,"line_end":109,"column_start":1,"column_end":98}},{"value":"/ // instead of splitting at '\\0' we split at spaces","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4497,"byte_end":4551,"line_start":110,"line_end":110,"column_start":1,"column_end":55}},{"value":"/ let hello2: &[u8] = b\"hello world\\0more words\";","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4552,"byte_end":4603,"line_start":111,"line_end":111,"column_start":1,"column_end":52}},{"value":"/ let world: &str = hello2.pread_with(6, ctx::StrCtx::Delimiter(ctx::SPACE)).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4604,"byte_end":4692,"line_start":112,"line_end":112,"column_start":1,"column_end":89}},{"value":"/ assert_eq!(\"world\\0more\", world);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4693,"byte_end":4730,"line_start":113,"line_end":113,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4731,"byte_end":4738,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4739,"byte_end":4742,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ## `std::io` API","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4743,"byte_end":4763,"line_start":116,"line_end":116,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4764,"byte_end":4767,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Scroll also allows reading from `std::io`. For this the types to read need to implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4768,"byte_end":4859,"line_start":118,"line_end":118,"column_start":1,"column_end":92}},{"value":"/ [FromCtx](ctx/trait.FromCtx.html) and [SizeWith](ctx/trait.SizeWith.html).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4860,"byte_end":4938,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4939,"byte_end":4942,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4943,"byte_end":4954,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4955,"byte_end":4979,"line_start":122,"line_end":122,"column_start":1,"column_end":25}},{"value":"/ use scroll::{IOread, ctx, Endian};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":4980,"byte_end":5018,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/ let bytes = [0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xef,0xbe,0x00,0x00,];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5019,"byte_end":5099,"line_start":124,"line_end":124,"column_start":1,"column_end":81}},{"value":"/ let mut cursor = Cursor::new(bytes);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5100,"byte_end":5140,"line_start":125,"line_end":125,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5141,"byte_end":5144,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ // IOread uses std::io::Read methods, thus the Cursor will be incremented on these reads:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5145,"byte_end":5238,"line_start":127,"line_end":127,"column_start":1,"column_end":94}},{"value":"/ let prev = cursor.position();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5239,"byte_end":5272,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5273,"byte_end":5276,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ let integer = cursor.ioread_with::<u64>(Endian::Little).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5277,"byte_end":5346,"line_start":130,"line_end":130,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5347,"byte_end":5350,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ let after = cursor.position();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5351,"byte_end":5385,"line_start":132,"line_end":132,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5386,"byte_end":5389,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ assert!(prev < after);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5390,"byte_end":5416,"line_start":134,"line_end":134,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5417,"byte_end":5420,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ // SizeWith allows us to define a context-sensitive size of a read type:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5421,"byte_end":5497,"line_start":136,"line_end":136,"column_start":1,"column_end":77}},{"value":"/ // Contexts can have different instantiations; e.g. the `Endian` context can be either Little or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5498,"byte_end":5598,"line_start":137,"line_end":137,"column_start":1,"column_end":101}},{"value":"/ // Big. This is useful if for example the context contains the word-size of fields to be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5599,"byte_end":5691,"line_start":138,"line_end":138,"column_start":1,"column_end":93}},{"value":"/ // read/written, e.g. switching between ELF32 or ELF64 at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5692,"byte_end":5762,"line_start":139,"line_end":139,"column_start":1,"column_end":71}},{"value":"/ let size = <u64 as ctx::SizeWith<Endian>>::size_with(&Endian::Little) as u64;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5763,"byte_end":5844,"line_start":140,"line_end":140,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(prev + size, after);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5845,"byte_end":5880,"line_start":141,"line_end":141,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5881,"byte_end":5888,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5889,"byte_end":5892,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ In the same vein as IOread we can use IOwrite to write a type to anything implementing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5893,"byte_end":5983,"line_start":144,"line_end":144,"column_start":1,"column_end":91}},{"value":"/ `std::io::Write`:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":5984,"byte_end":6005,"line_start":145,"line_end":145,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6006,"byte_end":6009,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6010,"byte_end":6021,"line_start":147,"line_end":147,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6022,"byte_end":6046,"line_start":148,"line_end":148,"column_start":1,"column_end":25}},{"value":"/ use scroll::{IOwrite};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6047,"byte_end":6073,"line_start":149,"line_end":149,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6074,"byte_end":6077,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = [0x0u8; 5];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6078,"byte_end":6109,"line_start":151,"line_end":151,"column_start":1,"column_end":32}},{"value":"/ let mut cursor = Cursor::new(&mut bytes[..]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6110,"byte_end":6159,"line_start":152,"line_end":152,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6160,"byte_end":6163,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ // This of course once again increments the cursor position","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6164,"byte_end":6227,"line_start":154,"line_end":154,"column_start":1,"column_end":64}},{"value":"/ cursor.iowrite_with(0xdeadbeef as u32, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6228,"byte_end":6292,"line_start":155,"line_end":155,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6293,"byte_end":6296,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(cursor.into_inner(), [0xde, 0xad, 0xbe, 0xef, 0x0]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6297,"byte_end":6364,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6365,"byte_end":6372,"line_start":158,"line_end":158,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6373,"byte_end":6376,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ## Complex use cases","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6377,"byte_end":6401,"line_start":160,"line_end":160,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6402,"byte_end":6405,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ Scoll is designed to be highly adaptable while providing a strong abstraction between the types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6406,"byte_end":6505,"line_start":162,"line_end":162,"column_start":1,"column_end":100}},{"value":"/ being read/written and the data container containing them.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6506,"byte_end":6568,"line_start":163,"line_end":163,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6569,"byte_end":6572,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ In this example we'll define a custom Data and allow it to be read from an arbitrary byte","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6573,"byte_end":6666,"line_start":165,"line_end":165,"column_start":1,"column_end":94}},{"value":"/ buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6667,"byte_end":6678,"line_start":166,"line_end":166,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6679,"byte_end":6682,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6683,"byte_end":6694,"line_start":168,"line_end":168,"column_start":1,"column_end":12}},{"value":"/ use scroll::{self, ctx, Pread, Endian};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6695,"byte_end":6738,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/ use scroll::ctx::StrCtx;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6739,"byte_end":6767,"line_start":170,"line_end":170,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6768,"byte_end":6771,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ // Our custom context type. In a more complex situation you could for example store details on","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6772,"byte_end":6870,"line_start":172,"line_end":172,"column_start":1,"column_end":99}},{"value":"/ // how to write or read your type, field-sizes or other information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6871,"byte_end":6943,"line_start":173,"line_end":173,"column_start":1,"column_end":73}},{"value":"/ // In this simple example we could also do without using a custom context in the first place.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":6944,"byte_end":7041,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7042,"byte_end":7068,"line_start":175,"line_end":175,"column_start":1,"column_end":27}},{"value":"/ struct Context(Endian);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7069,"byte_end":7096,"line_start":176,"line_end":176,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ // Our custom data type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7101,"byte_end":7128,"line_start":178,"line_end":178,"column_start":1,"column_end":28}},{"value":"/ struct Data<'zerocopy> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7129,"byte_end":7157,"line_start":179,"line_end":179,"column_start":1,"column_end":29}},{"value":"/   // This is only a reference to the actual data; we make use of scroll's zero-copy capability","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7158,"byte_end":7256,"line_start":180,"line_end":180,"column_start":1,"column_end":99}},{"value":"/   name: &'zerocopy str,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7257,"byte_end":7284,"line_start":181,"line_end":181,"column_start":1,"column_end":28}},{"value":"/   id: u32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7285,"byte_end":7299,"line_start":182,"line_end":182,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7300,"byte_end":7305,"line_start":183,"line_end":183,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7306,"byte_end":7309,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ // To allow for safe zero-copying scroll allows to specify lifetimes explicitly:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7310,"byte_end":7394,"line_start":185,"line_end":185,"column_start":1,"column_end":85}},{"value":"/ // The context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7395,"byte_end":7413,"line_start":186,"line_end":186,"column_start":1,"column_end":19}},{"value":"/ impl<'a> ctx::TryFromCtx<'a, Context> for Data<'a> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7414,"byte_end":7470,"line_start":187,"line_end":187,"column_start":1,"column_end":57}},{"value":"/   // If necessary you can set a custom error type here, which will be returned by Pread/Pwrite","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7471,"byte_end":7569,"line_start":188,"line_end":188,"column_start":1,"column_end":99}},{"value":"/   type Error = scroll::Error;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7570,"byte_end":7603,"line_start":189,"line_end":189,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7604,"byte_end":7607,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/   // Using the explicit lifetime specification again you ensure that read data doesn't outlife","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7608,"byte_end":7706,"line_start":191,"line_end":191,"column_start":1,"column_end":99}},{"value":"/   // its source buffer without having to resort to copying.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7707,"byte_end":7770,"line_start":192,"line_end":192,"column_start":1,"column_end":64}},{"value":"/   fn try_from_ctx (src: &'a [u8], ctx: Context)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7771,"byte_end":7822,"line_start":193,"line_end":193,"column_start":1,"column_end":52}},{"value":"/     // the `usize` returned here is the amount of bytes read.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7823,"byte_end":7888,"line_start":194,"line_end":194,"column_start":1,"column_end":66}},{"value":"/     -> Result<(Self, usize), Self::Error>","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7889,"byte_end":7934,"line_start":195,"line_end":195,"column_start":1,"column_end":46}},{"value":"/   {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7935,"byte_end":7942,"line_start":196,"line_end":196,"column_start":1,"column_end":8}},{"value":"/     let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7943,"byte_end":7971,"line_start":197,"line_end":197,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7972,"byte_end":7975,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/     let id = src.gread_with(offset, ctx.0)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":7976,"byte_end":8024,"line_start":199,"line_end":199,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8025,"byte_end":8028,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/     // In a more serious application you would validate data here of course.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8029,"byte_end":8109,"line_start":201,"line_end":201,"column_start":1,"column_end":81}},{"value":"/     let namelen: u16 = src.gread_with(offset, ctx.0)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8110,"byte_end":8168,"line_start":202,"line_end":202,"column_start":1,"column_end":59}},{"value":"/     let name = src.gread_with::<&str>(offset, StrCtx::Length(namelen as usize))?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8169,"byte_end":8254,"line_start":203,"line_end":203,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8255,"byte_end":8258,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/     Ok((Data { name: name, id: id }, *offset))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8259,"byte_end":8309,"line_start":205,"line_end":205,"column_start":1,"column_end":51}},{"value":"/   }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8310,"byte_end":8317,"line_start":206,"line_end":206,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8318,"byte_end":8323,"line_start":207,"line_end":207,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8324,"byte_end":8327,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ // In lieu of a complex byte buffer we hearken back to a simple &[u8]; the default source","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8328,"byte_end":8421,"line_start":209,"line_end":209,"column_start":1,"column_end":94}},{"value":"/ // of TryFromCtx. However, any type that implements Pread to produce a &[u8] can now read","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8422,"byte_end":8515,"line_start":210,"line_end":210,"column_start":1,"column_end":94}},{"value":"/ // `Data` thanks to it's implementation of TryFromCtx.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8516,"byte_end":8574,"line_start":211,"line_end":211,"column_start":1,"column_end":59}},{"value":"/ let bytes = b\"\\x01\\x02\\x03\\x04\\x00\\x08UserName\";","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8575,"byte_end":8627,"line_start":212,"line_end":212,"column_start":1,"column_end":53}},{"value":"/ let data: Data = bytes.pread_with(0, Context(Endian::Big)).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8628,"byte_end":8700,"line_start":213,"line_end":213,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8701,"byte_end":8704,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data.id, 0x01020304);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8705,"byte_end":8741,"line_start":215,"line_end":215,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(data.name.to_string(), \"UserName\".to_string());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8742,"byte_end":8804,"line_start":216,"line_end":216,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8805,"byte_end":8812,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8813,"byte_end":8816,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ For further explanation of the traits and how to implement them manually refer to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8817,"byte_end":8902,"line_start":219,"line_end":219,"column_start":1,"column_end":86}},{"value":"/ [Pread](trait.Pread.html) and [TryFromCtx](ctx/trait.TryFromCtx.html).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":8903,"byte_end":8977,"line_start":220,"line_end":220,"column_start":1,"column_end":75}}]},{"kind":"Mod","id":{"krate":0,"index":20},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ctx","qualname":"::ctx","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":383},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":399},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":407},{"krate":0,"index":411},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":423},{"krate":0,"index":427},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":439},{"krate":0,"index":443},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":455},{"krate":0,"index":459},{"krate":0,"index":464},{"krate":0,"index":467},{"krate":0,"index":471},{"krate":0,"index":475},{"krate":0,"index":480},{"krate":0,"index":483},{"krate":0,"index":487},{"krate":0,"index":491},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":503},{"krate":0,"index":507},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":519},{"krate":0,"index":523},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":535},{"krate":0,"index":539},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":551},{"krate":0,"index":555},{"krate":0,"index":94},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":587},{"krate":0,"index":589},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":605},{"krate":0,"index":608},{"krate":0,"index":613},{"krate":0,"index":615},{"krate":0,"index":618},{"krate":0,"index":621},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":678},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":95},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":712},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":107},{"krate":0,"index":111},{"krate":0,"index":115},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":129},{"krate":0,"index":133}],"decl_id":null,"docs":" Generic context-aware conversion traits, for automatic _downstream_ extension of `Pread`, et. al","sig":null,"attributes":[{"value":"/ Generic context-aware conversion traits, for automatic _downstream_ extension of `Pread`, et. al","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22526,"byte_end":22626,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22627,"byte_end":22630,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The context traits are arguably the center piece of the scroll crate. In simple terms they","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22631,"byte_end":22725,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ define how to actually read and write, respectively, a data type from a container, being able to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22726,"byte_end":22826,"line_start":4,"line_end":4,"column_start":1,"column_end":101}},{"value":"/ take context into account.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22827,"byte_end":22857,"line_start":5,"line_end":5,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22858,"byte_end":22861,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ### Reading","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22862,"byte_end":22877,"line_start":7,"line_end":7,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22878,"byte_end":22881,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Types implementing [TryFromCtx](trait.TryFromCtx.html) and it's infallible cousin [FromCtx](trait.FromCtx.html)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22882,"byte_end":22997,"line_start":9,"line_end":9,"column_start":1,"column_end":116}},{"value":"/ allow a user of [Pread::pread](../trait.Pread.html#method.pread) or respectively","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":22998,"byte_end":23082,"line_start":10,"line_end":10,"column_start":1,"column_end":85}},{"value":"/ [Cread::cread](../trait.Cread.html#method.cread) and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23083,"byte_end":23139,"line_start":11,"line_end":11,"column_start":1,"column_end":57}},{"value":"/ [IOread::ioread](../trait.IOread.html#method.ioread) to read that data type from a data source one","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23140,"byte_end":23242,"line_start":12,"line_end":12,"column_start":1,"column_end":103}},{"value":"/ of the `*read` traits has been implemented for.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23243,"byte_end":23294,"line_start":13,"line_end":13,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23295,"byte_end":23298,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Implementations of `TryFromCtx` specify a source (called `This`) and an `Error` type for failed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23299,"byte_end":23398,"line_start":15,"line_end":15,"column_start":1,"column_end":100}},{"value":"/ reads. The source defines the kind of container the type can be read from, and defaults to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23399,"byte_end":23493,"line_start":16,"line_end":16,"column_start":1,"column_end":95}},{"value":"/ `[u8]` for any type that implements `AsRef<[u8]>`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23494,"byte_end":23548,"line_start":17,"line_end":17,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23549,"byte_end":23552,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `FromCtx` is slightly more restricted; it requires the implementer to use `[u8]` as source and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23553,"byte_end":23651,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ never fail, and thus does not have an `Error` type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23652,"byte_end":23707,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23708,"byte_end":23711,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Types chosen here are of relevance to `Pread` implementations; of course only a container which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23712,"byte_end":23811,"line_start":22,"line_end":22,"column_start":1,"column_end":100}},{"value":"/ can produce a source of the type `This` can be used to read a `TryFromCtx` requiring it and the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23812,"byte_end":23911,"line_start":23,"line_end":23,"column_start":1,"column_end":100}},{"value":"/ `Error` type returned in `Err` of `Pread::pread`'s Result.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23912,"byte_end":23974,"line_start":24,"line_end":24,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23975,"byte_end":23978,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ### Writing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23979,"byte_end":23994,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23995,"byte_end":23998,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ [TryIntoCtx](trait.TryIntoCtx.html) and the infallible [IntoCtx](trait.IntoCtx.html) work","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":23999,"byte_end":24092,"line_start":28,"line_end":28,"column_start":1,"column_end":94}},{"value":"/ similarly to the above traits, allowing [Pwrite::pwrite](../trait.Pwrite.html#method.pwrite) or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24093,"byte_end":24192,"line_start":29,"line_end":29,"column_start":1,"column_end":100}},{"value":"/ respectively [Cwrite::cwrite](../trait.Cwrite.html#method.cwrite) and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24193,"byte_end":24266,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ [IOwrite::iowrite](../trait.IOwrite.html#method.iowrite) to write data into a byte sink for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24267,"byte_end":24362,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/ which one of the `*write` traits has been implemented for.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24363,"byte_end":24425,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24426,"byte_end":24429,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ `IntoCtx` is similarly restricted as `FromCtx` is to `TryFromCtx`. And equally the types chosen","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24430,"byte_end":24529,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ affect usable `Pwrite` implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24530,"byte_end":24572,"line_start":35,"line_end":35,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24573,"byte_end":24576,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ### Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24577,"byte_end":24592,"line_start":37,"line_end":37,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24593,"byte_end":24596,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Each of the traits passes along a `Ctx` to the marshalling logic. This context type contains","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24597,"byte_end":24693,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ any additional information that may be required to successfully parse or write the data:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24694,"byte_end":24786,"line_start":40,"line_end":40,"column_start":1,"column_end":93}},{"value":"/ Examples would be endianness to use, field lengths of a serialized struct, or delimiters to use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24787,"byte_end":24886,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"/ when reading/writing `&str`. The context type can be any type but must derive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24887,"byte_end":24968,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ [Copy](https://doc.rust-lang.org/std/marker/trait.Copy.html). In addition if you want to use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":24969,"byte_end":25065,"line_start":43,"line_end":43,"column_start":1,"column_end":97}},{"value":"/ the `*read`-methods instead of the `*read_with` ones you must also implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25066,"byte_end":25146,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ [default::Default](https://doc.rust-lang.org/std/default/trait.Default.html).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25147,"byte_end":25228,"line_start":45,"line_end":45,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25229,"byte_end":25232,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25233,"byte_end":25246,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25247,"byte_end":25250,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Let's expand on the [previous example](../index.html#complex-use-cases).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25251,"byte_end":25327,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25328,"byte_end":25331,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25332,"byte_end":25343,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"/ use scroll::{self, ctx, Pread, Endian};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25344,"byte_end":25387,"line_start":52,"line_end":52,"column_start":1,"column_end":44}},{"value":"/ use scroll::ctx::StrCtx;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25388,"byte_end":25416,"line_start":53,"line_end":53,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25417,"byte_end":25420,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[derive(Copy, Clone, PartialEq, Eq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25421,"byte_end":25462,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/ enum FieldSize {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25463,"byte_end":25483,"line_start":56,"line_end":56,"column_start":1,"column_end":21}},{"value":"/     U32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25484,"byte_end":25496,"line_start":57,"line_end":57,"column_start":1,"column_end":13}},{"value":"/     U64","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25497,"byte_end":25508,"line_start":58,"line_end":58,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25509,"byte_end":25514,"line_start":59,"line_end":59,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25515,"byte_end":25518,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // Our custom context type. As said above it has to derive Copy.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25519,"byte_end":25587,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25588,"byte_end":25614,"line_start":62,"line_end":62,"column_start":1,"column_end":27}},{"value":"/ struct Context {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25615,"byte_end":25635,"line_start":63,"line_end":63,"column_start":1,"column_end":21}},{"value":"/     fieldsize: FieldSize,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25636,"byte_end":25665,"line_start":64,"line_end":64,"column_start":1,"column_end":30}},{"value":"/     endianess: Endian,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25666,"byte_end":25692,"line_start":65,"line_end":65,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25693,"byte_end":25698,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25699,"byte_end":25702,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ // Our custom data type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25703,"byte_end":25730,"line_start":68,"line_end":68,"column_start":1,"column_end":28}},{"value":"/ struct Data<'b> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25731,"byte_end":25752,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/   // These u64 are encoded either as 32-bit or 64-bit wide ints. Which one it is is defined in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25753,"byte_end":25851,"line_start":70,"line_end":70,"column_start":1,"column_end":99}},{"value":"/   // the Context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25852,"byte_end":25873,"line_start":71,"line_end":71,"column_start":1,"column_end":22}},{"value":"/   // Also, let's imagine they have a strict relationship: A < B < C otherwise the struct is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25874,"byte_end":25969,"line_start":72,"line_end":72,"column_start":1,"column_end":96}},{"value":"/   // invalid.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25970,"byte_end":25987,"line_start":73,"line_end":73,"column_start":1,"column_end":18}},{"value":"/   field_a: u64,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":25988,"byte_end":26007,"line_start":74,"line_end":74,"column_start":1,"column_end":20}},{"value":"/   field_b: u64,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26008,"byte_end":26027,"line_start":75,"line_end":75,"column_start":1,"column_end":20}},{"value":"/   field_c: u64,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26028,"byte_end":26047,"line_start":76,"line_end":76,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26048,"byte_end":26051,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/   // Both of these are marshalled with a prefixed length.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26052,"byte_end":26113,"line_start":78,"line_end":78,"column_start":1,"column_end":62}},{"value":"/   name: &'b str,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26114,"byte_end":26134,"line_start":79,"line_end":79,"column_start":1,"column_end":21}},{"value":"/   value: &'b [u8],","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26135,"byte_end":26157,"line_start":80,"line_end":80,"column_start":1,"column_end":23}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26158,"byte_end":26163,"line_start":81,"line_end":81,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26164,"byte_end":26167,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26168,"byte_end":26188,"line_start":83,"line_end":83,"column_start":1,"column_end":21}},{"value":"/ enum Error {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26189,"byte_end":26205,"line_start":84,"line_end":84,"column_start":1,"column_end":17}},{"value":"/     // We'll return this custom error if the field* relationship doesn't hold","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26206,"byte_end":26287,"line_start":85,"line_end":85,"column_start":1,"column_end":82}},{"value":"/     BadFieldMatchup,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26288,"byte_end":26312,"line_start":86,"line_end":86,"column_start":1,"column_end":25}},{"value":"/     Scroll(scroll::Error),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26313,"byte_end":26343,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26344,"byte_end":26349,"line_start":88,"line_end":88,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26350,"byte_end":26353,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ impl<'a> ctx::TryFromCtx<'a, Context> for Data<'a> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26354,"byte_end":26410,"line_start":90,"line_end":90,"column_start":1,"column_end":57}},{"value":"/   type Error = Error;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26411,"byte_end":26436,"line_start":91,"line_end":91,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26437,"byte_end":26440,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/   // Using the explicit lifetime specification again you ensure that read data doesn't outlife","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26441,"byte_end":26539,"line_start":93,"line_end":93,"column_start":1,"column_end":99}},{"value":"/   // its source buffer without having to resort to copying.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26540,"byte_end":26603,"line_start":94,"line_end":94,"column_start":1,"column_end":64}},{"value":"/   fn try_from_ctx (src: &'a [u8], ctx: Context)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26604,"byte_end":26655,"line_start":95,"line_end":95,"column_start":1,"column_end":52}},{"value":"/     // the `usize` returned here is the amount of bytes read.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26656,"byte_end":26721,"line_start":96,"line_end":96,"column_start":1,"column_end":66}},{"value":"/     -> Result<(Self, usize), Self::Error>","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26722,"byte_end":26767,"line_start":97,"line_end":97,"column_start":1,"column_end":46}},{"value":"/   {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26768,"byte_end":26775,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/     // The offset counter; gread and gread_with increment a given counter automatically so we","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26776,"byte_end":26873,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/     // don't have to manually care.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26874,"byte_end":26913,"line_start":100,"line_end":100,"column_start":1,"column_end":40}},{"value":"/     let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26914,"byte_end":26942,"line_start":101,"line_end":101,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26943,"byte_end":26946,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/     let field_a;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26947,"byte_end":26967,"line_start":103,"line_end":103,"column_start":1,"column_end":21}},{"value":"/     let field_b;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26968,"byte_end":26988,"line_start":104,"line_end":104,"column_start":1,"column_end":21}},{"value":"/     let field_c;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":26989,"byte_end":27009,"line_start":105,"line_end":105,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27010,"byte_end":27013,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/     // Switch the amount of bytes read depending on the parsing context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27014,"byte_end":27089,"line_start":107,"line_end":107,"column_start":1,"column_end":76}},{"value":"/     if ctx.fieldsize == FieldSize::U32 {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27090,"byte_end":27134,"line_start":108,"line_end":108,"column_start":1,"column_end":45}},{"value":"/       field_a = src.gread_with::<u32>(offset, ctx.endianess)? as u64;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27135,"byte_end":27208,"line_start":109,"line_end":109,"column_start":1,"column_end":74}},{"value":"/       field_b = src.gread_with::<u32>(offset, ctx.endianess)? as u64;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27209,"byte_end":27282,"line_start":110,"line_end":110,"column_start":1,"column_end":74}},{"value":"/       field_c = src.gread_with::<u32>(offset, ctx.endianess)? as u64;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27283,"byte_end":27356,"line_start":111,"line_end":111,"column_start":1,"column_end":74}},{"value":"/     } else {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27357,"byte_end":27373,"line_start":112,"line_end":112,"column_start":1,"column_end":17}},{"value":"/       field_a = src.gread_with::<u64>(offset, ctx.endianess)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27374,"byte_end":27440,"line_start":113,"line_end":113,"column_start":1,"column_end":67}},{"value":"/       field_b = src.gread_with::<u64>(offset, ctx.endianess)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27441,"byte_end":27507,"line_start":114,"line_end":114,"column_start":1,"column_end":67}},{"value":"/       field_c = src.gread_with::<u64>(offset, ctx.endianess)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27508,"byte_end":27574,"line_start":115,"line_end":115,"column_start":1,"column_end":67}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27575,"byte_end":27584,"line_start":116,"line_end":116,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27585,"byte_end":27588,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/     // You can use type ascribition or turbofish operators, whichever you prefer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27589,"byte_end":27674,"line_start":118,"line_end":118,"column_start":1,"column_end":86}},{"value":"/     let namelen = src.gread_with::<u16>(offset, ctx.endianess)? as usize;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27675,"byte_end":27752,"line_start":119,"line_end":119,"column_start":1,"column_end":78}},{"value":"/     let name: &str = src.gread_with(offset, scroll::ctx::StrCtx::Length(namelen))?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27753,"byte_end":27840,"line_start":120,"line_end":120,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27841,"byte_end":27844,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/     let vallen = src.gread_with::<u16>(offset, ctx.endianess)? as usize;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27845,"byte_end":27921,"line_start":122,"line_end":122,"column_start":1,"column_end":77}},{"value":"/     let value = &src[*offset..(*offset+vallen)];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27922,"byte_end":27974,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27975,"byte_end":27978,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/     // Let's sanity check those fields, shall we?","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":27979,"byte_end":28032,"line_start":125,"line_end":125,"column_start":1,"column_end":54}},{"value":"/     if ! (field_a < field_b && field_b < field_c) {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28033,"byte_end":28088,"line_start":126,"line_end":126,"column_start":1,"column_end":56}},{"value":"/       return Err(Error::BadFieldMatchup);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28089,"byte_end":28134,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28135,"byte_end":28144,"line_start":128,"line_end":128,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28145,"byte_end":28148,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/     Ok((Data { field_a, field_b, field_c, name, value }, *offset))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28149,"byte_end":28219,"line_start":130,"line_end":130,"column_start":1,"column_end":71}},{"value":"/   }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28220,"byte_end":28227,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28228,"byte_end":28233,"line_start":132,"line_end":132,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28234,"byte_end":28237,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ // In lieu of a complex byte buffer we hearken back to the venerable &[u8]; do note however","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28238,"byte_end":28333,"line_start":134,"line_end":134,"column_start":1,"column_end":96}},{"value":"/ // that the implementation of TryFromCtx did not specify such. In fact any type that implements","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28334,"byte_end":28433,"line_start":135,"line_end":135,"column_start":1,"column_end":100}},{"value":"/ // Pread can now read `Data` as it implements TryFromCtx.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28434,"byte_end":28495,"line_start":136,"line_end":136,"column_start":1,"column_end":62}},{"value":"/ let bytes = b\"\\x00\\x02\\x03\\x04\\x01\\x02\\x03\\x04\\xde\\xad\\xbe\\xef\\x00\\x08UserName\\x00\\x02\\xCA\\xFE\";","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28496,"byte_end":28596,"line_start":137,"line_end":137,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28597,"byte_end":28600,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ // We define an appropiate context, and get going","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28601,"byte_end":28654,"line_start":139,"line_end":139,"column_start":1,"column_end":54}},{"value":"/ let contextA = Context {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28655,"byte_end":28683,"line_start":140,"line_end":140,"column_start":1,"column_end":29}},{"value":"/     fieldsize: FieldSize::U32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28684,"byte_end":28718,"line_start":141,"line_end":141,"column_start":1,"column_end":35}},{"value":"/     endianess: Endian::Big,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28719,"byte_end":28750,"line_start":142,"line_end":142,"column_start":1,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28751,"byte_end":28757,"line_start":143,"line_end":143,"column_start":1,"column_end":7}},{"value":"/ let data: Data = bytes.pread_with(0, contextA).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28758,"byte_end":28818,"line_start":144,"line_end":144,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28819,"byte_end":28822,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data.field_a, 0x00020304);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28823,"byte_end":28864,"line_start":146,"line_end":146,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.field_b, 0x01020304);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28865,"byte_end":28906,"line_start":147,"line_end":147,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.field_c, 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28907,"byte_end":28948,"line_start":148,"line_end":148,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.name, \"UserName\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28949,"byte_end":28987,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(data.value, [0xCA, 0xFE]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":28988,"byte_end":29029,"line_start":150,"line_end":150,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29030,"byte_end":29033,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ // Here we have a context with a different FieldSize, changing parsing information at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29034,"byte_end":29132,"line_start":152,"line_end":152,"column_start":1,"column_end":99}},{"value":"/ let contextB = Context {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29133,"byte_end":29161,"line_start":153,"line_end":153,"column_start":1,"column_end":29}},{"value":"/     fieldsize: FieldSize::U64,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29162,"byte_end":29196,"line_start":154,"line_end":154,"column_start":1,"column_end":35}},{"value":"/     endianess: Endian::Big,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29197,"byte_end":29228,"line_start":155,"line_end":155,"column_start":1,"column_end":32}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29229,"byte_end":29235,"line_start":156,"line_end":156,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29236,"byte_end":29239,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ // Which will of course error with a malformed input for the context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29240,"byte_end":29312,"line_start":158,"line_end":158,"column_start":1,"column_end":73}},{"value":"/ let err: Result<Data, Error> = bytes.pread_with(0, contextB);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29313,"byte_end":29378,"line_start":159,"line_end":159,"column_start":1,"column_end":66}},{"value":"/ assert!(err.is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29379,"byte_end":29405,"line_start":160,"line_end":160,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29406,"byte_end":29409,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ let bytes_long = [0x00,0x00,0x00,0x00,0x00,0x02,0x03,0x04,0x00,0x00,0x00,0x00,0x01,0x02,0x03,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29410,"byte_end":29507,"line_start":162,"line_end":162,"column_start":1,"column_end":98}},{"value":"/                   0x04,0x00,0x00,0x00,0x00,0xde,0xad,0xbe,0xef,0x00,0x08,0x55,0x73,0x65,0x72,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29508,"byte_end":29605,"line_start":163,"line_end":163,"column_start":1,"column_end":98}},{"value":"/                   0x4e,0x61,0x6d,0x65,0x00,0x02,0xCA,0xFE];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29606,"byte_end":29669,"line_start":164,"line_end":164,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29670,"byte_end":29673,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ let data: Data = bytes_long.pread_with(0, contextB).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29674,"byte_end":29739,"line_start":166,"line_end":166,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29740,"byte_end":29743,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(data.field_a, 0x00020304);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29744,"byte_end":29785,"line_start":168,"line_end":168,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.field_b, 0x01020304);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29786,"byte_end":29827,"line_start":169,"line_end":169,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.field_c, 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29828,"byte_end":29869,"line_start":170,"line_end":170,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(data.name, \"UserName\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29870,"byte_end":29908,"line_start":171,"line_end":171,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(data.value, [0xCA, 0xFE]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29909,"byte_end":29950,"line_start":172,"line_end":172,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29951,"byte_end":29954,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ // Ergonomic conversion, not relevant really.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":29955,"byte_end":30004,"line_start":174,"line_end":174,"column_start":1,"column_end":50}},{"value":"/ use std::convert::From;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30005,"byte_end":30032,"line_start":175,"line_end":175,"column_start":1,"column_end":28}},{"value":"/ impl From<scroll::Error> for Error {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30033,"byte_end":30073,"line_start":176,"line_end":176,"column_start":1,"column_end":41}},{"value":"/   fn from(error: scroll::Error) -> Error {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30074,"byte_end":30120,"line_start":177,"line_end":177,"column_start":1,"column_end":47}},{"value":"/     Error::Scroll(error)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30121,"byte_end":30149,"line_start":178,"line_end":178,"column_start":1,"column_end":29}},{"value":"/   }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30150,"byte_end":30157,"line_start":179,"line_end":179,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30158,"byte_end":30163,"line_start":180,"line_end":180,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30164,"byte_end":30171,"line_start":181,"line_end":181,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30499,"byte_end":30510,"line_start":196,"line_end":196,"column_start":11,"column_end":22},"name":"MeasureWith","qualname":"::ctx::MeasureWith","value":"MeasureWith<Ctx>","parent":null,"children":[{"krate":0,"index":51}],"decl_id":null,"docs":" A trait for measuring how large something is; for a byte sequence, it will be its length.\n","sig":null,"attributes":[{"value":"/ A trait for measuring how large something is; for a byte sequence, it will be its length.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30395,"byte_end":30488,"line_start":195,"line_end":195,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30571,"byte_end":30583,"line_start":198,"line_end":198,"column_start":8,"column_end":20},"name":"measure_with","qualname":"::ctx::MeasureWith::measure_with","value":"fn measure_with(&Self, &Ctx) -> usize","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" How large is `Self`, given the `ctx`?\n","sig":null,"attributes":[{"value":"/ How large is `Self`, given the `ctx`?","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30522,"byte_end":30563,"line_start":197,"line_end":197,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30674,"byte_end":30686,"line_start":203,"line_end":203,"column_start":8,"column_end":20},"name":"measure_with","qualname":"<[u8] as ctx::MeasureWith>::measure_with","value":"fn measure_with(&Self, &Ctx) -> usize","parent":{"krate":0,"index":49},"children":[],"decl_id":{"krate":0,"index":51},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30657,"byte_end":30666,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30817,"byte_end":30829,"line_start":210,"line_end":210,"column_start":8,"column_end":20},"name":"measure_with","qualname":"<T as ctx::MeasureWith>::measure_with","value":"fn measure_with(&Self, &Ctx) -> usize","parent":{"krate":0,"index":49},"children":[],"decl_id":{"krate":0,"index":51},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30800,"byte_end":30809,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":384},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31125,"byte_end":31134,"line_start":220,"line_end":220,"column_start":5,"column_end":14},"name":"Delimiter","qualname":"::ctx::StrCtx::Delimiter","value":"StrCtx::Delimiter(u8)","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":386},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31135,"byte_end":31137,"line_start":220,"line_end":220,"column_start":15,"column_end":17},"name":"0","qualname":"::ctx::StrCtx::Delimiter::0","value":"u8","parent":{"krate":0,"index":384},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":387},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31144,"byte_end":31158,"line_start":221,"line_end":221,"column_start":5,"column_end":19},"name":"DelimiterUntil","qualname":"::ctx::StrCtx::DelimiterUntil","value":"StrCtx::DelimiterUntil(u8, usize)","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":389},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31159,"byte_end":31161,"line_start":221,"line_end":221,"column_start":20,"column_end":22},"name":"0","qualname":"::ctx::StrCtx::DelimiterUntil::0","value":"u8","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":390},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31163,"byte_end":31168,"line_start":221,"line_end":221,"column_start":24,"column_end":29},"name":"1","qualname":"::ctx::StrCtx::DelimiterUntil::1","value":"usize","parent":{"krate":0,"index":387},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":391},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31175,"byte_end":31181,"line_start":222,"line_end":222,"column_start":5,"column_end":11},"name":"Length","qualname":"::ctx::StrCtx::Length","value":"StrCtx::Length(usize)","parent":{"krate":0,"index":383},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":393},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31182,"byte_end":31187,"line_start":222,"line_end":222,"column_start":12,"column_end":17},"name":"0","qualname":"::ctx::StrCtx::Length::0","value":"usize","parent":{"krate":0,"index":391},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":383},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31112,"byte_end":31118,"line_start":219,"line_end":219,"column_start":10,"column_end":16},"name":"StrCtx","qualname":"::ctx::StrCtx","value":"enum StrCtx { Delimiter(u8), DelimiterUntil(u8, usize), Length(usize), }","parent":null,"children":[{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":391}],"decl_id":null,"docs":" The parsing context for converting a byte sequence to a `&str`","sig":null,"attributes":[{"value":"/ The parsing context for converting a byte sequence to a `&str`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30897,"byte_end":30963,"line_start":215,"line_end":215,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30964,"byte_end":30967,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ `StrCtx` specifies what byte delimiter to use, and defaults to C-style null terminators. Be careful.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30968,"byte_end":31072,"line_start":217,"line_end":217,"column_start":1,"column_end":105}}]},{"kind":"Const","id":{"krate":0,"index":59},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31250,"byte_end":31254,"line_start":226,"line_end":226,"column_start":11,"column_end":15},"name":"NULL","qualname":"::ctx::NULL","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A C-style, null terminator based delimiter\n","sig":null,"attributes":[{"value":"/ A C-style, null terminator based delimiter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31193,"byte_end":31239,"line_start":225,"line_end":225,"column_start":1,"column_end":47}}]},{"kind":"Const","id":{"krate":0,"index":60},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31302,"byte_end":31307,"line_start":228,"line_end":228,"column_start":11,"column_end":16},"name":"SPACE","qualname":"::ctx::SPACE","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A space-based delimiter\n","sig":null,"attributes":[{"value":"/ A space-based delimiter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31264,"byte_end":31291,"line_start":227,"line_end":227,"column_start":1,"column_end":28}}]},{"kind":"Const","id":{"krate":0,"index":61},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31360,"byte_end":31363,"line_start":230,"line_end":230,"column_start":11,"column_end":14},"name":"RET","qualname":"::ctx::RET","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A newline-based delimiter\n","sig":null,"attributes":[{"value":"/ A newline-based delimiter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31320,"byte_end":31349,"line_start":229,"line_end":229,"column_start":1,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":62},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31412,"byte_end":31415,"line_start":232,"line_end":232,"column_start":11,"column_end":14},"name":"TAB","qualname":"::ctx::TAB","value":"u8","parent":null,"children":[],"decl_id":null,"docs":" A tab-based delimiter\n","sig":null,"attributes":[{"value":"/ A tab-based delimiter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31376,"byte_end":31401,"line_start":231,"line_end":231,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31476,"byte_end":31483,"line_start":236,"line_end":236,"column_start":8,"column_end":15},"name":"default","qualname":"<StrCtx as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31459,"byte_end":31468,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31562,"byte_end":31565,"line_start":242,"line_end":242,"column_start":12,"column_end":15},"name":"len","qualname":"<StrCtx>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31740,"byte_end":31748,"line_start":249,"line_end":249,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<StrCtx>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31960,"byte_end":31967,"line_start":259,"line_end":259,"column_start":11,"column_end":18},"name":"FromCtx","qualname":"::ctx::FromCtx","value":"FromCtx<Ctx = (), This = [u8]>","parent":null,"children":[{"krate":0,"index":71}],"decl_id":null,"docs":" Reads `Self` from `This` using the context `Ctx`; must _not_ fail\n","sig":null,"attributes":[{"value":"/ Reads `Self` from `This` using the context `Ctx`; must _not_ fail","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31880,"byte_end":31949,"line_start":258,"line_end":258,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32014,"byte_end":32022,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"from_ctx","qualname":"::ctx::FromCtx::from_ctx","value":"fn from_ctx(&This, Ctx) -> Self","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34538,"byte_end":34548,"line_start":336,"line_end":336,"column_start":11,"column_end":21},"name":"TryFromCtx","qualname":"::ctx::TryFromCtx","value":"TryFromCtx<'a, Ctx = (), This = [u8]>","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" Tries to read `Self` from `This` using the context `Ctx`","sig":null,"attributes":[{"value":"/ Tries to read `Self` from `This` using the context `Ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32058,"byte_end":32118,"line_start":263,"line_end":263,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32119,"byte_end":32122,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ # Implementing Your Own Reader","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32123,"byte_end":32157,"line_start":265,"line_end":265,"column_start":1,"column_end":35}},{"value":"/ If you want to implement your own reader for a type `Foo` from some kind of buffer (say","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32158,"byte_end":32249,"line_start":266,"line_end":266,"column_start":1,"column_end":92}},{"value":"/ `[u8]`), then you need to implement this trait","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32250,"byte_end":32300,"line_start":267,"line_end":267,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32301,"byte_end":32304,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32305,"byte_end":32316,"line_start":269,"line_end":269,"column_start":1,"column_end":12}},{"value":"/ use scroll::{self, ctx, Pread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32317,"byte_end":32352,"line_start":270,"line_end":270,"column_start":1,"column_end":36}},{"value":"/ #[derive(Debug, PartialEq, Eq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32353,"byte_end":32388,"line_start":271,"line_end":271,"column_start":1,"column_end":36}},{"value":"/ pub struct Foo(u16);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32389,"byte_end":32413,"line_start":272,"line_end":272,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32414,"byte_end":32417,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ impl<'a> ctx::TryFromCtx<'a, scroll::Endian> for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32418,"byte_end":32476,"line_start":274,"line_end":274,"column_start":1,"column_end":59}},{"value":"/      type Error = scroll::Error;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32477,"byte_end":32513,"line_start":275,"line_end":275,"column_start":1,"column_end":37}},{"value":"/      fn try_from_ctx(this: &'a [u8], le: scroll::Endian) -> Result<(Self, usize), Self::Error> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32514,"byte_end":32614,"line_start":276,"line_end":276,"column_start":1,"column_end":101}},{"value":"/          if this.len() < 2 { return Err((scroll::Error::Custom(\"whatever\".to_string())).into()) }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32615,"byte_end":32716,"line_start":277,"line_end":277,"column_start":1,"column_end":102}},{"value":"/          let n = this.pread_with(0, le)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32717,"byte_end":32762,"line_start":278,"line_end":278,"column_start":1,"column_end":46}},{"value":"/          Ok((Foo(n), 2))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32763,"byte_end":32791,"line_start":279,"line_end":279,"column_start":1,"column_end":29}},{"value":"/      }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32792,"byte_end":32802,"line_start":280,"line_end":280,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32803,"byte_end":32808,"line_start":281,"line_end":281,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32809,"byte_end":32812,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ let bytes: [u8; 4] = [0xde, 0xad, 0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32813,"byte_end":32857,"line_start":283,"line_end":283,"column_start":1,"column_end":45}},{"value":"/ let foo = bytes.pread_with::<Foo>(0, scroll::LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32858,"byte_end":32920,"line_start":284,"line_end":284,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Foo(0xadde), foo);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32921,"byte_end":32954,"line_start":285,"line_end":285,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32955,"byte_end":32958,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ let foo2 = bytes.pread_with::<Foo>(0, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":32959,"byte_end":33022,"line_start":287,"line_end":287,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(Foo(0xdeadu16), foo2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33023,"byte_end":33060,"line_start":288,"line_end":288,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33061,"byte_end":33068,"line_start":289,"line_end":289,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33069,"byte_end":33072,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ # Advanced: Using Your Own Error in `TryFromCtx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33073,"byte_end":33125,"line_start":291,"line_end":291,"column_start":1,"column_end":53}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33126,"byte_end":33137,"line_start":292,"line_end":292,"column_start":1,"column_end":12}},{"value":"/  use scroll::{self, ctx, Pread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33138,"byte_end":33174,"line_start":293,"line_end":293,"column_start":1,"column_end":37}},{"value":"/  use std::error;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33175,"byte_end":33195,"line_start":294,"line_end":294,"column_start":1,"column_end":21}},{"value":"/  use std::fmt::{self, Display};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33196,"byte_end":33231,"line_start":295,"line_end":295,"column_start":1,"column_end":36}},{"value":"/  // make some kind of normal error which also can transformed from a scroll error","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33232,"byte_end":33317,"line_start":296,"line_end":296,"column_start":1,"column_end":86}},{"value":"/  #[derive(Debug)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33318,"byte_end":33339,"line_start":297,"line_end":297,"column_start":1,"column_end":22}},{"value":"/  pub struct ExternalError {}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33340,"byte_end":33372,"line_start":298,"line_end":298,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33373,"byte_end":33376,"line_start":299,"line_end":299,"column_start":1,"column_end":4}},{"value":"/  impl Display for ExternalError {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33377,"byte_end":33414,"line_start":300,"line_end":300,"column_start":1,"column_end":38}},{"value":"/      fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33415,"byte_end":33480,"line_start":301,"line_end":301,"column_start":1,"column_end":66}},{"value":"/          write!(fmt, \"ExternalError\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33481,"byte_end":33522,"line_start":302,"line_end":302,"column_start":1,"column_end":42}},{"value":"/      }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33523,"byte_end":33533,"line_start":303,"line_end":303,"column_start":1,"column_end":11}},{"value":"/  }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33534,"byte_end":33540,"line_start":304,"line_end":304,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33541,"byte_end":33544,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/  impl error::Error for ExternalError {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33545,"byte_end":33587,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"/      fn description(&self) -> &str {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33588,"byte_end":33628,"line_start":307,"line_end":307,"column_start":1,"column_end":41}},{"value":"/          \"ExternalError\"","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33629,"byte_end":33657,"line_start":308,"line_end":308,"column_start":1,"column_end":29}},{"value":"/      }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33658,"byte_end":33668,"line_start":309,"line_end":309,"column_start":1,"column_end":11}},{"value":"/      fn cause(&self) -> Option<&dyn error::Error> { None}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33669,"byte_end":33730,"line_start":310,"line_end":310,"column_start":1,"column_end":62}},{"value":"/  }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33731,"byte_end":33737,"line_start":311,"line_end":311,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33738,"byte_end":33741,"line_start":312,"line_end":312,"column_start":1,"column_end":4}},{"value":"/  impl From<scroll::Error> for ExternalError {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33742,"byte_end":33791,"line_start":313,"line_end":313,"column_start":1,"column_end":50}},{"value":"/      fn from(err: scroll::Error) -> Self {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33792,"byte_end":33838,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"/          match err {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33839,"byte_end":33863,"line_start":315,"line_end":315,"column_start":1,"column_end":25}},{"value":"/              _ => ExternalError{},","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33864,"byte_end":33902,"line_start":316,"line_end":316,"column_start":1,"column_end":39}},{"value":"/          }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33903,"byte_end":33917,"line_start":317,"line_end":317,"column_start":1,"column_end":15}},{"value":"/      }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33918,"byte_end":33928,"line_start":318,"line_end":318,"column_start":1,"column_end":11}},{"value":"/  }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33929,"byte_end":33935,"line_start":319,"line_end":319,"column_start":1,"column_end":7}},{"value":"/  #[derive(Debug, PartialEq, Eq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33936,"byte_end":33972,"line_start":320,"line_end":320,"column_start":1,"column_end":37}},{"value":"/  pub struct Foo(u16);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33973,"byte_end":33998,"line_start":321,"line_end":321,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":33999,"byte_end":34002,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/  impl<'a> ctx::TryFromCtx<'a, scroll::Endian> for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34003,"byte_end":34062,"line_start":323,"line_end":323,"column_start":1,"column_end":60}},{"value":"/      type Error = ExternalError;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34063,"byte_end":34099,"line_start":324,"line_end":324,"column_start":1,"column_end":37}},{"value":"/      fn try_from_ctx(this: &'a [u8], le: scroll::Endian) -> Result<(Self, usize), Self::Error> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34100,"byte_end":34200,"line_start":325,"line_end":325,"column_start":1,"column_end":101}},{"value":"/          if this.len() <= 2 { return Err((ExternalError {}).into()) }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34201,"byte_end":34274,"line_start":326,"line_end":326,"column_start":1,"column_end":74}},{"value":"/          let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34275,"byte_end":34308,"line_start":327,"line_end":327,"column_start":1,"column_end":34}},{"value":"/          let n = this.gread_with(offset, le)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34309,"byte_end":34359,"line_start":328,"line_end":328,"column_start":1,"column_end":51}},{"value":"/          Ok((Foo(n), *offset))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34360,"byte_end":34394,"line_start":329,"line_end":329,"column_start":1,"column_end":35}},{"value":"/      }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34395,"byte_end":34405,"line_start":330,"line_end":330,"column_start":1,"column_end":11}},{"value":"/  }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34406,"byte_end":34412,"line_start":331,"line_end":331,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34413,"byte_end":34416,"line_start":332,"line_end":332,"column_start":1,"column_end":4}},{"value":"/ let bytes: [u8; 4] = [0xde, 0xad, 0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34417,"byte_end":34461,"line_start":333,"line_end":333,"column_start":1,"column_end":45}},{"value":"/ let foo: Result<Foo, ExternalError> = bytes.pread(0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34462,"byte_end":34519,"line_start":334,"line_end":334,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34520,"byte_end":34527,"line_start":335,"line_end":335,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":76},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34629,"byte_end":34634,"line_start":340,"line_end":340,"column_start":10,"column_end":15},"name":"Error","qualname":"::ctx::TryFromCtx::Error","value":"type Error;","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34643,"byte_end":34655,"line_start":341,"line_end":341,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"::ctx::TryFromCtx::try_from_ctx","value":"fn try_from_ctx(&'a This, Ctx) -> Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":78},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34788,"byte_end":34795,"line_start":345,"line_end":345,"column_start":11,"column_end":18},"name":"IntoCtx","qualname":"::ctx::IntoCtx","value":"IntoCtx<Ctx = (), This = [u8]>: Sized","parent":null,"children":[{"krate":0,"index":81}],"decl_id":null,"docs":" Writes `Self` into `This` using the context `Ctx`\n","sig":null,"attributes":[{"value":"/ Writes `Self` into `This` using the context `Ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34724,"byte_end":34777,"line_start":344,"line_end":344,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34849,"byte_end":34857,"line_start":346,"line_end":346,"column_start":8,"column_end":16},"name":"into_ctx","qualname":"::ctx::IntoCtx::into_ctx","value":"fn into_ctx(Self, &mut This, Ctx)","parent":{"krate":0,"index":78},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":82},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36010,"byte_end":36020,"line_start":373,"line_end":373,"column_start":11,"column_end":21},"name":"TryIntoCtx","qualname":"::ctx::TryIntoCtx","value":"TryIntoCtx<Ctx = (), This = [u8]>: Sized","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" Tries to write `Self` into `This` using the context `Ctx`\n To implement writing into an arbitrary byte buffer, implement `TryIntoCtx`\n # Example\n ```rust\n use scroll::{self, ctx, LE, Endian, Pwrite};\n #[derive(Debug, PartialEq, Eq)]\n pub struct Foo(u16);","sig":null,"attributes":[{"value":"/ Tries to write `Self` into `This` using the context `Ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34892,"byte_end":34953,"line_start":349,"line_end":349,"column_start":1,"column_end":62}},{"value":"/ To implement writing into an arbitrary byte buffer, implement `TryIntoCtx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34954,"byte_end":35032,"line_start":350,"line_end":350,"column_start":1,"column_end":79}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35033,"byte_end":35046,"line_start":351,"line_end":351,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35047,"byte_end":35058,"line_start":352,"line_end":352,"column_start":1,"column_end":12}},{"value":"/ use scroll::{self, ctx, LE, Endian, Pwrite};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35059,"byte_end":35107,"line_start":353,"line_end":353,"column_start":1,"column_end":49}},{"value":"/ #[derive(Debug, PartialEq, Eq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35108,"byte_end":35143,"line_start":354,"line_end":354,"column_start":1,"column_end":36}},{"value":"/ pub struct Foo(u16);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35144,"byte_end":35168,"line_start":355,"line_end":355,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35169,"byte_end":35172,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ // this will use the default `DefaultCtx = scroll::Endian`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35173,"byte_end":35235,"line_start":357,"line_end":357,"column_start":1,"column_end":63}},{"value":"/ impl ctx::TryIntoCtx<Endian> for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35236,"byte_end":35278,"line_start":358,"line_end":358,"column_start":1,"column_end":43}},{"value":"/     // you can use your own error here too, but you will then need to specify it in fn generic parameters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35279,"byte_end":35388,"line_start":359,"line_end":359,"column_start":1,"column_end":110}},{"value":"/     type Error = scroll::Error;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35389,"byte_end":35424,"line_start":360,"line_end":360,"column_start":1,"column_end":36}},{"value":"/     // you can write using your own context type, see `leb128.rs`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35425,"byte_end":35494,"line_start":361,"line_end":361,"column_start":1,"column_end":70}},{"value":"/     fn try_into_ctx(self, this: &mut [u8], le: Endian) -> Result<usize, Self::Error> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35495,"byte_end":35585,"line_start":362,"line_end":362,"column_start":1,"column_end":91}},{"value":"/         if this.len() < 2 { return Err((scroll::Error::Custom(\"whatever\".to_string())).into()) }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35586,"byte_end":35686,"line_start":363,"line_end":363,"column_start":1,"column_end":101}},{"value":"/         this.pwrite_with(self.0, 0, le)?;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35687,"byte_end":35732,"line_start":364,"line_end":364,"column_start":1,"column_end":46}},{"value":"/         Ok(2)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35733,"byte_end":35750,"line_start":365,"line_end":365,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35751,"byte_end":35760,"line_start":366,"line_end":366,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35761,"byte_end":35766,"line_start":367,"line_end":367,"column_start":1,"column_end":6}},{"value":"/ // now we can write a `Foo` into some buffer (in this case, a byte buffer, because that's what we implemented it for above)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35767,"byte_end":35894,"line_start":368,"line_end":368,"column_start":1,"column_end":128}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35895,"byte_end":35898,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: [u8; 4] = [0, 0, 0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35899,"byte_end":35941,"line_start":370,"line_end":370,"column_start":1,"column_end":43}},{"value":"/ bytes.pwrite_with(Foo(0x7f), 1, LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35942,"byte_end":35991,"line_start":371,"line_end":371,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":35992,"byte_end":35999,"line_start":372,"line_end":372,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":85},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36076,"byte_end":36081,"line_start":374,"line_end":374,"column_start":10,"column_end":15},"name":"Error","qualname":"::ctx::TryIntoCtx::Error","value":"type Error;","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36090,"byte_end":36102,"line_start":375,"line_end":375,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"::ctx::TryIntoCtx::try_into_ctx","value":"fn try_into_ctx(Self, &mut This, Ctx) -> Result<usize, Self::Error>","parent":{"krate":0,"index":82},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":87},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36604,"byte_end":36612,"line_start":384,"line_end":384,"column_start":11,"column_end":19},"name":"SizeWith","qualname":"::ctx::SizeWith","value":"SizeWith<Ctx = ()>","parent":null,"children":[{"krate":0,"index":89}],"decl_id":null,"docs":" Gets the size of `Self` with a `Ctx`, and in `Self::Units`. Implementors can then call `Gread` related functions","sig":null,"attributes":[{"value":"/ Gets the size of `Self` with a `Ctx`, and in `Self::Units`. Implementors can then call `Gread` related functions","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36167,"byte_end":36283,"line_start":378,"line_end":378,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36284,"byte_end":36287,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ The rationale behind this trait is to:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36288,"byte_end":36330,"line_start":380,"line_end":380,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36331,"byte_end":36334,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ 1. Prevent `gread` from being used, and the offset being modified based on simply the sizeof the value, which can be a misnomer, e.g., for Leb128, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36335,"byte_end":36490,"line_start":382,"line_end":382,"column_start":1,"column_end":156}},{"value":"/ 2. Allow a context based size, which is useful for 32/64 bit variants for various containers, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36491,"byte_end":36593,"line_start":383,"line_end":383,"column_start":1,"column_end":103}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36632,"byte_end":36641,"line_start":385,"line_end":385,"column_start":8,"column_end":17},"name":"size_with","qualname":"::ctx::SizeWith::size_with","value":"fn size_with(&Ctx) -> usize","parent":{"krate":0,"index":87},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":45140,"byte_end":45152,"line_start":674,"line_end":674,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<&'a str as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], StrCtx) -> Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":" Read a `&str` from `src` using `delimiter`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":45072,"byte_end":45081,"line_start":672,"line_end":672,"column_start":5,"column_end":14}},{"value":"/ Read a `&str` from `src` using `delimiter`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":45086,"byte_end":45132,"line_start":673,"line_end":673,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":46363,"byte_end":46375,"line_start":715,"line_end":715,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<&'a str as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a T, StrCtx) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":46346,"byte_end":46355,"line_start":714,"line_end":714,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":46620,"byte_end":46632,"line_start":724,"line_end":724,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"<&'a [u8] as ctx::TryIntoCtx>::try_into_ctx","value":"fn try_into_ctx(Self, &mut [u8], ()) -> error::Result<usize>","parent":{"krate":0,"index":82},"children":[],"decl_id":{"krate":0,"index":86},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":46603,"byte_end":46612,"line_start":723,"line_end":723,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":47464,"byte_end":47476,"line_start":746,"line_end":746,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"<&'a str as ctx::TryIntoCtx>::try_into_ctx","value":"fn try_into_ctx(Self, &mut [u8], ()) -> error::Result<usize>","parent":{"krate":0,"index":82},"children":[],"decl_id":{"krate":0,"index":86},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":47447,"byte_end":47456,"line_start":745,"line_end":745,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":48282,"byte_end":48294,"line_start":780,"line_end":780,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<&'a [u8] as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], usize) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":48265,"byte_end":48274,"line_start":779,"line_end":779,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":48697,"byte_end":48709,"line_start":796,"line_end":796,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<&'a CStr as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], ()) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":48680,"byte_end":48689,"line_start":795,"line_end":795,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49334,"byte_end":49346,"line_start":816,"line_end":816,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<CString as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], ()) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49317,"byte_end":49326,"line_start":815,"line_end":815,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49662,"byte_end":49674,"line_start":826,"line_end":826,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"<&'a CStr as ctx::TryIntoCtx>::try_into_ctx","value":"fn try_into_ctx(Self, &mut [u8], ()) -> error::Result<usize>","parent":{"krate":0,"index":82},"children":[],"decl_id":{"krate":0,"index":86},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49645,"byte_end":49654,"line_start":825,"line_end":825,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":50222,"byte_end":50234,"line_start":848,"line_end":848,"column_start":8,"column_end":20},"name":"try_into_ctx","qualname":"<CString as ctx::TryIntoCtx>::try_into_ctx","value":"fn try_into_ctx(Self, &mut [u8], ()) -> error::Result<usize>","parent":{"krate":0,"index":82},"children":[],"decl_id":{"krate":0,"index":86},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":50205,"byte_end":50214,"line_start":847,"line_end":847,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":755},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51822,"byte_end":51828,"line_start":4,"line_end":4,"column_start":5,"column_end":11},"name":"Little","qualname":"::endian::Endian::Little","value":"Endian::Little","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51834,"byte_end":51837,"line_start":5,"line_end":5,"column_start":5,"column_end":8},"name":"Big","qualname":"::endian::Endian::Big","value":"Endian::Big","parent":{"krate":0,"index":754},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":754},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51809,"byte_end":51815,"line_start":3,"line_end":3,"column_start":10,"column_end":16},"name":"Endian","qualname":"::endian::Endian","value":"enum Endian { Little, Big, }","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":757}],"decl_id":null,"docs":" The endianness (byte order) of a stream of bytes\n","sig":null,"attributes":[{"value":"/ The endianness (byte order) of a stream of bytes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51747,"byte_end":51799,"line_start":2,"line_end":2,"column_start":1,"column_end":53}}]},{"kind":"Const","id":{"krate":0,"index":137},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51889,"byte_end":51891,"line_start":9,"line_end":9,"column_start":11,"column_end":13},"name":"LE","qualname":"::endian::LE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Little Endian byte order context\n","sig":null,"attributes":[{"value":"/ Little Endian byte order context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51842,"byte_end":51878,"line_start":8,"line_end":8,"column_start":1,"column_end":37}}]},{"kind":"Const","id":{"krate":0,"index":138},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51962,"byte_end":51964,"line_start":11,"line_end":11,"column_start":11,"column_end":13},"name":"BE","qualname":"::endian::BE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Big Endian byte order context\n","sig":null,"attributes":[{"value":"/ Big Endian byte order context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51918,"byte_end":51951,"line_start":10,"line_end":10,"column_start":1,"column_end":34}}]},{"kind":"Const","id":{"krate":0,"index":139},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52029,"byte_end":52036,"line_start":13,"line_end":13,"column_start":11,"column_end":18},"name":"NETWORK","qualname":"::endian::NETWORK","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" Network byte order context\n","sig":null,"attributes":[{"value":"/ Network byte order context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":51988,"byte_end":52018,"line_start":12,"line_end":12,"column_start":1,"column_end":31}}]},{"kind":"Const","id":{"krate":0,"index":140},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52139,"byte_end":52145,"line_start":16,"line_end":16,"column_start":11,"column_end":17},"name":"NATIVE","qualname":"::endian::NATIVE","value":"Endian","parent":null,"children":[],"decl_id":null,"docs":" The machine's native byte order\n","sig":null,"attributes":[{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52060,"byte_end":52092,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ The machine's native byte order","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52093,"byte_end":52128,"line_start":15,"line_end":15,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52305,"byte_end":52312,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"default","qualname":"<Endian as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52288,"byte_end":52297,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52399,"byte_end":52403,"line_start":30,"line_end":30,"column_start":8,"column_end":12},"name":"from","qualname":"<Endian as std::convert::From>::from","value":"fn from(bool) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52382,"byte_end":52391,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52567,"byte_end":52574,"line_start":41,"line_end":41,"column_start":12,"column_end":19},"name":"network","qualname":"<Endian>::network","value":"fn network() -> Endian","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52546,"byte_end":52555,"line_start":40,"line_end":40,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52636,"byte_end":52645,"line_start":45,"line_end":45,"column_start":12,"column_end":21},"name":"is_little","qualname":"<Endian>::is_little","value":"fn is_little(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52615,"byte_end":52624,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"StructVariant","id":{"krate":0,"index":771},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":52992,"byte_end":52998,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"TooBig","qualname":"::error::Error::TooBig","value":"Error::TooBig { size, len }","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The type you tried to read was too big\n","sig":null,"attributes":[{"value":"/ The type you tried to read was too big","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":52945,"byte_end":52987,"line_start":12,"line_end":12,"column_start":5,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":772},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53009,"byte_end":53013,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"name":"size","qualname":"::error::Error::TooBig::size","value":"usize","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":773},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53030,"byte_end":53033,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"name":"len","qualname":"::error::Error::TooBig::len","value":"usize","parent":{"krate":0,"index":771},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":774},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53110,"byte_end":53119,"line_start":18,"line_end":18,"column_start":5,"column_end":14},"name":"BadOffset","qualname":"::error::Error::BadOffset","value":"Error::BadOffset(usize)","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" The requested offset to read/write at is invalid\n","sig":null,"attributes":[{"value":"/ The requested offset to read/write at is invalid","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53053,"byte_end":53105,"line_start":17,"line_end":17,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":776},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53120,"byte_end":53125,"line_start":18,"line_end":18,"column_start":15,"column_end":20},"name":"0","qualname":"::error::Error::BadOffset::0","value":"usize","parent":{"krate":0,"index":774},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":777},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53132,"byte_end":53140,"line_start":19,"line_end":19,"column_start":5,"column_end":13},"name":"BadInput","qualname":"::error::Error::BadInput","value":"Error::BadInput { size, msg }","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":778},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53151,"byte_end":53155,"line_start":20,"line_end":20,"column_start":9,"column_end":13},"name":"size","qualname":"::error::Error::BadInput::size","value":"usize","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":779},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53172,"byte_end":53175,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"name":"msg","qualname":"::error::Error::BadInput::msg","value":"&'static str","parent":{"krate":0,"index":777},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":780},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53294,"byte_end":53300,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Custom","qualname":"::error::Error::Custom","value":"Error::Custom(String)","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" A custom Scroll error for reporting messages to clients\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53202,"byte_end":53225,"line_start":23,"line_end":23,"column_start":5,"column_end":28}},{"value":"/ A custom Scroll error for reporting messages to clients","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53230,"byte_end":53289,"line_start":24,"line_end":24,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":782},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53301,"byte_end":53307,"line_start":25,"line_end":25,"column_start":12,"column_end":18},"name":"0","qualname":"::error::Error::Custom::0","value":"std::string::String","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":783},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53396,"byte_end":53398,"line_start":28,"line_end":28,"column_start":5,"column_end":7},"name":"IO","qualname":"::error::Error::IO","value":"Error::IO(io::Error)","parent":{"krate":0,"index":770},"children":[],"decl_id":null,"docs":" Returned when IO based errors are encountered\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53314,"byte_end":53337,"line_start":26,"line_end":26,"column_start":5,"column_end":28}},{"value":"/ Returned when IO based errors are encountered","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53342,"byte_end":53391,"line_start":27,"line_end":27,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":785},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53399,"byte_end":53408,"line_start":28,"line_end":28,"column_start":8,"column_end":17},"name":"0","qualname":"::error::Error::IO::0","value":"std::io::Error","parent":{"krate":0,"index":783},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":770},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":52933,"byte_end":52938,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"enum Error {\n    TooBig {\n            size: usize,\n            len: usize,\n        },\n    BadOffset(usize),\n    BadInput {\n            size: usize,\n            msg: &'static str,\n        },\n    Custom(String),\n    IO(io::Error),\n}","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783}],"decl_id":null,"docs":" A custom Scroll error\n","sig":null,"attributes":[{"value":"/ A custom Scroll error","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":52898,"byte_end":52923,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53475,"byte_end":53486,"line_start":33,"line_end":33,"column_start":8,"column_end":19},"name":"description","qualname":"<Error as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2569},"children":[],"decl_id":{"krate":1,"index":2573},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53769,"byte_end":53774,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"cause","qualname":"<Error as std::error::Error>::cause","value":"fn cause(&Self) -> Option<&dyn error::Error>","parent":{"krate":1,"index":2569},"children":[],"decl_id":{"krate":1,"index":2574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54129,"byte_end":54133,"line_start":55,"line_end":55,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(io::Error) -> Error","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54225,"byte_end":54228,"line_start":61,"line_end":61,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":172},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54962,"byte_end":54968,"line_start":84,"line_end":84,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56168,"byte_end":56173,"line_start":36,"line_end":36,"column_start":11,"column_end":16},"name":"Cread","qualname":"::greater::Cread","value":"Cread<Ctx, I = usize>: Index<I> + Index<RangeFrom<I>>","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197}],"decl_id":null,"docs":" Core-read - core, no_std friendly trait for reading basic traits from byte buffers. Cannot fail\n unless the buffer is too small, in which case an assert fires and the program panics.","sig":null,"attributes":[{"value":"/ Core-read - core, no_std friendly trait for reading basic traits from byte buffers. Cannot fail","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55084,"byte_end":55183,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ unless the buffer is too small, in which case an assert fires and the program panics.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55184,"byte_end":55273,"line_start":6,"line_end":6,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55274,"byte_end":55277,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ If your type implements [FromCtx](ctx/trait.FromCtx.html) then you can `cread::<YourType>(offset)`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55278,"byte_end":55381,"line_start":8,"line_end":8,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55382,"byte_end":55385,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55386,"byte_end":55399,"line_start":10,"line_end":10,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55400,"byte_end":55403,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55404,"byte_end":55415,"line_start":12,"line_end":12,"column_start":1,"column_end":12}},{"value":"/ use scroll::{ctx, Cread, LE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55416,"byte_end":55449,"line_start":13,"line_end":13,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55450,"byte_end":55453,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ #[repr(packed)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55454,"byte_end":55473,"line_start":15,"line_end":15,"column_start":1,"column_end":20}},{"value":"/ struct Bar {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55474,"byte_end":55490,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/     foo: i32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55491,"byte_end":55508,"line_start":17,"line_end":17,"column_start":1,"column_end":18}},{"value":"/     bar: u32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55509,"byte_end":55526,"line_start":18,"line_end":18,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55527,"byte_end":55532,"line_start":19,"line_end":19,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55533,"byte_end":55536,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ impl ctx::FromCtx<scroll::Endian> for Bar {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55537,"byte_end":55584,"line_start":21,"line_end":21,"column_start":1,"column_end":48}},{"value":"/     fn from_ctx(bytes: &[u8], ctx: scroll::Endian) -> Self {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55585,"byte_end":55649,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"/         use scroll::Cread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55650,"byte_end":55680,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/         Bar { foo: bytes.cread_with(0, ctx), bar: bytes.cread_with(4, ctx) }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55681,"byte_end":55761,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55762,"byte_end":55771,"line_start":25,"line_end":25,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55772,"byte_end":55777,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55778,"byte_end":55781,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let bytes = [0xff, 0xff, 0xff, 0xff, 0xef,0xbe,0xad,0xde,];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55782,"byte_end":55845,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ let bar = bytes.cread_with::<Bar>(0, LE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55846,"byte_end":55891,"line_start":29,"line_end":29,"column_start":1,"column_end":46}},{"value":"/ // Remember that you need to copy out fields from packed structs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55892,"byte_end":55960,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ // with a `{}` block instead of borrowing them directly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":55961,"byte_end":56020,"line_start":31,"line_end":31,"column_start":1,"column_end":60}},{"value":"/ // ref: https://github.com/rust-lang/rust/issues/46043","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56021,"byte_end":56079,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"/ assert_eq!({bar.foo}, -1);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56080,"byte_end":56110,"line_start":33,"line_end":33,"column_start":1,"column_end":31}},{"value":"/ assert_eq!({bar.bar}, 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56111,"byte_end":56149,"line_start":34,"line_end":34,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56150,"byte_end":56157,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56800,"byte_end":56810,"line_start":56,"line_end":56,"column_start":8,"column_end":18},"name":"cread_with","qualname":"::greater::Cread::cread_with","value":"fn cread_with<N>(&Self, I, Ctx) -> N where\nN: FromCtx<Ctx, <Self as Index<RangeFrom<I>>>::Output>","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Reads a value from `Self` at `offset` with `ctx`. Cannot fail.\n If the buffer is too small for the value requested, this will panic.","sig":null,"attributes":[{"value":"/ Reads a value from `Self` at `offset` with `ctx`. Cannot fail.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56249,"byte_end":56315,"line_start":40,"line_end":40,"column_start":5,"column_end":71}},{"value":"/ If the buffer is too small for the value requested, this will panic.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56320,"byte_end":56392,"line_start":41,"line_end":41,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56397,"byte_end":56400,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56405,"byte_end":56418,"line_start":43,"line_end":43,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56423,"byte_end":56426,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56431,"byte_end":56442,"line_start":45,"line_end":45,"column_start":5,"column_end":16}},{"value":"/ use scroll::{Cread, BE, LE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56447,"byte_end":56479,"line_start":46,"line_end":46,"column_start":5,"column_end":37}},{"value":"/ use std::i64::MAX;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56484,"byte_end":56506,"line_start":47,"line_end":47,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56511,"byte_end":56514,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ let bytes = [0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff, 0xef,0xbe,0xad,0xde,];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56519,"byte_end":56599,"line_start":49,"line_end":49,"column_start":5,"column_end":85}},{"value":"/ let foo = bytes.cread_with::<i64>(0, BE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56604,"byte_end":56649,"line_start":50,"line_end":50,"column_start":5,"column_end":50}},{"value":"/ let bar = bytes.cread_with::<u32>(8, LE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56654,"byte_end":56699,"line_start":51,"line_end":51,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(foo, MAX);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56704,"byte_end":56729,"line_start":52,"line_end":52,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(bar, 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56734,"byte_end":56766,"line_start":53,"line_end":53,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56771,"byte_end":56778,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56783,"byte_end":56792,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57780,"byte_end":57785,"line_start":86,"line_end":86,"column_start":8,"column_end":13},"name":"cread","qualname":"::greater::Cread::cread","value":"fn cread<N>(&Self, I) -> N where\nN: FromCtx<Ctx, <Self as Index<RangeFrom<I>>>::Output>, Ctx: Default","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Reads a value implementing `FromCtx` from `Self` at `offset`,\n with the **target machine**'s endianness.\n For the primitive types, this will be the **target machine**'s endianness.","sig":null,"attributes":[{"value":"/ Reads a value implementing `FromCtx` from `Self` at `offset`,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56985,"byte_end":57050,"line_start":63,"line_end":63,"column_start":5,"column_end":70}},{"value":"/ with the **target machine**'s endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57055,"byte_end":57100,"line_start":64,"line_end":64,"column_start":5,"column_end":50}},{"value":"/ For the primitive types, this will be the **target machine**'s endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57105,"byte_end":57183,"line_start":65,"line_end":65,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57188,"byte_end":57191,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57196,"byte_end":57209,"line_start":67,"line_end":67,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57214,"byte_end":57217,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57222,"byte_end":57233,"line_start":69,"line_end":69,"column_start":5,"column_end":16}},{"value":"/ use scroll::Cread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57238,"byte_end":57260,"line_start":70,"line_end":70,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57265,"byte_end":57268,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ let bytes = [0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0xef,0xbe,0x00,0x00,];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57273,"byte_end":57353,"line_start":72,"line_end":72,"column_start":5,"column_end":85}},{"value":"/ let foo = bytes.cread::<i64>(0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57358,"byte_end":57394,"line_start":73,"line_end":73,"column_start":5,"column_end":41}},{"value":"/ let bar = bytes.cread::<u32>(8);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57399,"byte_end":57435,"line_start":74,"line_end":74,"column_start":5,"column_end":41}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57440,"byte_end":57476,"line_start":75,"line_end":75,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(foo, 1);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57481,"byte_end":57504,"line_start":76,"line_end":76,"column_start":5,"column_end":28}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57509,"byte_end":57542,"line_start":77,"line_end":77,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(foo, 0x100_0000_0000_0000);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57547,"byte_end":57589,"line_start":78,"line_end":78,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57594,"byte_end":57597,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57602,"byte_end":57638,"line_start":80,"line_end":80,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(bar, 0xbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57643,"byte_end":57671,"line_start":81,"line_end":81,"column_start":5,"column_end":33}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57676,"byte_end":57709,"line_start":82,"line_end":82,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(bar, 0xefbe0000);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57714,"byte_end":57746,"line_start":83,"line_end":83,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57751,"byte_end":57758,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":57763,"byte_end":57772,"line_start":85,"line_end":85,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":203},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58958,"byte_end":58964,"line_start":125,"line_end":125,"column_start":11,"column_end":17},"name":"Cwrite","qualname":"::greater::Cwrite","value":"Cwrite<Ctx, I = usize>: Index<I> + IndexMut<RangeFrom<I>>","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":208}],"decl_id":null,"docs":" Core-write - core, no_std friendly trait for writing basic types into byte buffers. Cannot fail\n unless the buffer is too small, in which case an assert fires and the program panics.\n Similar to [Cread](trait.Cread.html), if your type implements [IntoCtx](ctx/trait.IntoCtx.html)\n then you can `cwrite(your_type, offset)`.","sig":null,"attributes":[{"value":"/ Core-write - core, no_std friendly trait for writing basic types into byte buffers. Cannot fail","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58075,"byte_end":58174,"line_start":97,"line_end":97,"column_start":1,"column_end":100}},{"value":"/ unless the buffer is too small, in which case an assert fires and the program panics.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58175,"byte_end":58264,"line_start":98,"line_end":98,"column_start":1,"column_end":90}},{"value":"/ Similar to [Cread](trait.Cread.html), if your type implements [IntoCtx](ctx/trait.IntoCtx.html)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58265,"byte_end":58364,"line_start":99,"line_end":99,"column_start":1,"column_end":100}},{"value":"/ then you can `cwrite(your_type, offset)`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58365,"byte_end":58410,"line_start":100,"line_end":100,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58411,"byte_end":58414,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58415,"byte_end":58428,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58429,"byte_end":58432,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58433,"byte_end":58444,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/ use scroll::{ctx, Cwrite};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58445,"byte_end":58475,"line_start":105,"line_end":105,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58476,"byte_end":58479,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ #[repr(packed)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58480,"byte_end":58499,"line_start":107,"line_end":107,"column_start":1,"column_end":20}},{"value":"/ struct Bar {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58500,"byte_end":58516,"line_start":108,"line_end":108,"column_start":1,"column_end":17}},{"value":"/     foo: i32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58517,"byte_end":58534,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/     bar: u32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58535,"byte_end":58552,"line_start":110,"line_end":110,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58553,"byte_end":58558,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58559,"byte_end":58562,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ impl ctx::IntoCtx<scroll::Endian> for Bar {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58563,"byte_end":58610,"line_start":113,"line_end":113,"column_start":1,"column_end":48}},{"value":"/     fn into_ctx(self, bytes: &mut [u8], ctx: scroll::Endian) {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58611,"byte_end":58677,"line_start":114,"line_end":114,"column_start":1,"column_end":67}},{"value":"/         use scroll::Cwrite;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58678,"byte_end":58709,"line_start":115,"line_end":115,"column_start":1,"column_end":32}},{"value":"/         bytes.cwrite_with(self.foo, 0, ctx);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58710,"byte_end":58758,"line_start":116,"line_end":116,"column_start":1,"column_end":49}},{"value":"/         bytes.cwrite_with(self.bar, 4, ctx);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58759,"byte_end":58807,"line_start":117,"line_end":117,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58808,"byte_end":58817,"line_start":118,"line_end":118,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58818,"byte_end":58823,"line_start":119,"line_end":119,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58824,"byte_end":58827,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ let bar = Bar { foo: -1, bar: 0xdeadbeef };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58828,"byte_end":58875,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/ let mut bytes = [0x0; 16];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58876,"byte_end":58906,"line_start":122,"line_end":122,"column_start":1,"column_end":31}},{"value":"/ bytes.cwrite::<Bar>(bar, 0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58907,"byte_end":58939,"line_start":123,"line_end":123,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58940,"byte_end":58947,"line_start":124,"line_end":124,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59502,"byte_end":59508,"line_start":140,"line_end":140,"column_start":8,"column_end":14},"name":"cwrite","qualname":"::greater::Cwrite::cwrite","value":"fn cwrite<N>(&mut Self, N, I) where\nN: IntoCtx<Ctx, <Self as Index<RangeFrom<I>>>::Output>, Ctx: Default","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Writes `n` into `Self` at `offset`; uses default context.\n For the primitive types, this will be the **target machine**'s endianness.","sig":null,"attributes":[{"value":"/ Writes `n` into `Self` at `offset`; uses default context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59028,"byte_end":59089,"line_start":126,"line_end":126,"column_start":5,"column_end":66}},{"value":"/ For the primitive types, this will be the **target machine**'s endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59094,"byte_end":59172,"line_start":127,"line_end":127,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59177,"byte_end":59180,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59185,"byte_end":59198,"line_start":129,"line_end":129,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59203,"byte_end":59206,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59211,"byte_end":59218,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ use scroll::{Cwrite, Cread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59223,"byte_end":59255,"line_start":132,"line_end":132,"column_start":5,"column_end":37}},{"value":"/ let mut bytes = [0x0; 16];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59260,"byte_end":59290,"line_start":133,"line_end":133,"column_start":5,"column_end":35}},{"value":"/ bytes.cwrite::<i64>(42, 0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59295,"byte_end":59326,"line_start":134,"line_end":134,"column_start":5,"column_end":36}},{"value":"/ bytes.cwrite::<u32>(0xdeadbeef, 8);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59331,"byte_end":59370,"line_start":135,"line_end":135,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59375,"byte_end":59378,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(bytes.cread::<i64>(0), 42);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59383,"byte_end":59425,"line_start":137,"line_end":137,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(bytes.cread::<u32>(8), 0xdeadbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59430,"byte_end":59480,"line_start":138,"line_end":138,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59485,"byte_end":59494,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60142,"byte_end":60153,"line_start":159,"line_end":159,"column_start":8,"column_end":19},"name":"cwrite_with","qualname":"::greater::Cwrite::cwrite_with","value":"fn cwrite_with<N>(&mut Self, N, I, Ctx) where\nN: IntoCtx<Ctx, <Self as Index<RangeFrom<I>>>::Output>","parent":{"krate":0,"index":203},"children":[],"decl_id":null,"docs":" Writes `n` into `Self` at `offset` with `ctx`","sig":null,"attributes":[{"value":"/ Writes `n` into `Self` at `offset` with `ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59725,"byte_end":59774,"line_start":147,"line_end":147,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59779,"byte_end":59782,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59787,"byte_end":59800,"line_start":149,"line_end":149,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59805,"byte_end":59808,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59813,"byte_end":59820,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"/ use scroll::{Cwrite, Cread, LE, BE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59825,"byte_end":59865,"line_start":152,"line_end":152,"column_start":5,"column_end":45}},{"value":"/ let mut bytes = [0x0; 0x10];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59870,"byte_end":59902,"line_start":153,"line_end":153,"column_start":5,"column_end":37}},{"value":"/ bytes.cwrite_with::<i64>(42, 0, LE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59907,"byte_end":59947,"line_start":154,"line_end":154,"column_start":5,"column_end":45}},{"value":"/ bytes.cwrite_with::<u32>(0xdeadbeef, 8, BE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":59952,"byte_end":60000,"line_start":155,"line_end":155,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(bytes.cread_with::<i64>(0, LE), 42);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60005,"byte_end":60056,"line_start":156,"line_end":156,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(bytes.cread_with::<u32>(8, LE), 0xefbeadde);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60061,"byte_end":60120,"line_start":157,"line_end":157,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60125,"byte_end":60134,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":788},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60653,"byte_end":60660,"line_start":10,"line_end":10,"column_start":12,"column_end":19},"name":"Uleb128","qualname":"::leb128::Uleb128","value":"Uleb128 {  }","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790}],"decl_id":null,"docs":" An unsigned leb128 integer\n","sig":null,"attributes":[{"value":"/ An unsigned leb128 integer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60611,"byte_end":60641,"line_start":9,"line_end":9,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60802,"byte_end":60806,"line_start":18,"line_end":18,"column_start":12,"column_end":16},"name":"size","qualname":"<Uleb128>::size","value":"fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return how many bytes this Uleb128 takes up in memory\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60719,"byte_end":60728,"line_start":16,"line_end":16,"column_start":5,"column_end":14}},{"value":"/ Return how many bytes this Uleb128 takes up in memory","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60733,"byte_end":60790,"line_start":17,"line_end":17,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60935,"byte_end":60939,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"read","qualname":"<Uleb128>::read","value":"fn read(&[u8], &mut usize) -> error::Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Read a variable length u64 from `bytes` at `offset`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60854,"byte_end":60863,"line_start":21,"line_end":21,"column_start":5,"column_end":14}},{"value":"/ Read a variable length u64 from `bytes` at `offset`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60868,"byte_end":60923,"line_start":22,"line_end":22,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61150,"byte_end":61156,"line_start":31,"line_end":31,"column_start":8,"column_end":14},"name":"as_ref","qualname":"<Uleb128 as std::convert::AsRef>::as_ref","value":"fn as_ref(&Self) -> &u64","parent":{"krate":2,"index":3076},"children":[],"decl_id":{"krate":2,"index":3078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61253,"byte_end":61257,"line_start":38,"line_end":38,"column_start":8,"column_end":12},"name":"from","qualname":"<u64 as std::convert::From>::from","value":"fn from(Uleb128) -> u64","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61236,"byte_end":61245,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":800},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61397,"byte_end":61404,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Sleb128","qualname":"::leb128::Sleb128","value":"Sleb128 {  }","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"decl_id":null,"docs":" An signed leb128 integer\n","sig":null,"attributes":[{"value":"/ An signed leb128 integer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61357,"byte_end":61385,"line_start":44,"line_end":44,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61546,"byte_end":61550,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"size","qualname":"<Sleb128>::size","value":"fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return how many bytes this Sleb128 takes up in memory\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61463,"byte_end":61472,"line_start":51,"line_end":51,"column_start":5,"column_end":14}},{"value":"/ Return how many bytes this Sleb128 takes up in memory","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61477,"byte_end":61534,"line_start":52,"line_end":52,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61679,"byte_end":61683,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"read","qualname":"<Sleb128>::read","value":"fn read(&[u8], &mut usize) -> error::Result<i64>","parent":null,"children":[],"decl_id":null,"docs":" Read a variable length i64 from `bytes` at `offset`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61598,"byte_end":61607,"line_start":56,"line_end":56,"column_start":5,"column_end":14}},{"value":"/ Read a variable length i64 from `bytes` at `offset`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61612,"byte_end":61667,"line_start":57,"line_end":57,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61894,"byte_end":61900,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"as_ref","qualname":"<Sleb128 as std::convert::AsRef>::as_ref","value":"fn as_ref(&Self) -> &i64","parent":{"krate":2,"index":3076},"children":[],"decl_id":{"krate":2,"index":3078},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61997,"byte_end":62001,"line_start":73,"line_end":73,"column_start":8,"column_end":12},"name":"from","qualname":"<i64 as std::convert::From>::from","value":"fn from(Sleb128) -> i64","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61980,"byte_end":61989,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":62522,"byte_end":62534,"line_start":96,"line_end":96,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<Uleb128 as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], ()) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":62505,"byte_end":62514,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":63502,"byte_end":63514,"line_start":132,"line_end":132,"column_start":8,"column_end":20},"name":"try_from_ctx","qualname":"<Sleb128 as ctx::TryFromCtx>::try_from_ctx","value":"fn try_from_ctx(&'a [u8], ()) -> result::Result<(Self, usize), Self::Error>","parent":{"krate":0,"index":72},"children":[],"decl_id":{"krate":0,"index":77},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":63485,"byte_end":63494,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":283},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68828,"byte_end":68834,"line_start":57,"line_end":57,"column_start":11,"column_end":17},"name":"IOread","qualname":"::lesser::IOread","value":"IOread<Ctx>: Read","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":287}],"decl_id":null,"docs":" An extension trait to `std::io::Read` streams; mainly targeted at reading primitive types with\n a known size.","sig":null,"attributes":[{"value":"/ An extension trait to `std::io::Read` streams; mainly targeted at reading primitive types with","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":66799,"byte_end":66897,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ a known size.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":66898,"byte_end":66915,"line_start":5,"line_end":5,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":66916,"byte_end":66919,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Requires types to implement [`FromCtx`](ctx/trait.FromCtx.html) and [`SizeWith`](ctx/trait.SizeWith.html).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":66920,"byte_end":67030,"line_start":7,"line_end":7,"column_start":1,"column_end":111}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67031,"byte_end":67034,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ **NB** You should probably add `repr(C)` and be very careful how you implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67035,"byte_end":67117,"line_start":9,"line_end":9,"column_start":1,"column_end":83}},{"value":"/ [`SizeWith`](ctx/trait.SizeWith.html), otherwise you will get IO errors failing to fill entire","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67118,"byte_end":67216,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ buffer (the size you specified in `SizeWith`), or out of bound errors (depending on your impl)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67217,"byte_end":67315,"line_start":11,"line_end":11,"column_start":1,"column_end":99}},{"value":"/ in `from_ctx`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67316,"byte_end":67334,"line_start":12,"line_end":12,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67335,"byte_end":67338,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Warning: Currently ioread/write uses a small 256-byte buffer and can not read/write larger types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67339,"byte_end":67439,"line_start":14,"line_end":14,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67440,"byte_end":67443,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67444,"byte_end":67457,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67458,"byte_end":67469,"line_start":17,"line_end":17,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67470,"byte_end":67494,"line_start":18,"line_end":18,"column_start":1,"column_end":25}},{"value":"/ use scroll::{self, ctx, LE, Pread, IOread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67495,"byte_end":67542,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67543,"byte_end":67546,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ #[repr(packed)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67547,"byte_end":67566,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/ struct Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67567,"byte_end":67583,"line_start":22,"line_end":22,"column_start":1,"column_end":17}},{"value":"/     foo: i64,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67584,"byte_end":67601,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/     bar: u32,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67602,"byte_end":67619,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67620,"byte_end":67625,"line_start":25,"line_end":25,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67626,"byte_end":67629,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ impl ctx::FromCtx<scroll::Endian> for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67630,"byte_end":67677,"line_start":27,"line_end":27,"column_start":1,"column_end":48}},{"value":"/     fn from_ctx(bytes: &[u8], ctx: scroll::Endian) -> Self {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67678,"byte_end":67742,"line_start":28,"line_end":28,"column_start":1,"column_end":65}},{"value":"/         Foo { foo: bytes.pread_with::<i64>(0, ctx).unwrap(), bar: bytes.pread_with::<u32>(8, ctx).unwrap() }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67743,"byte_end":67855,"line_start":29,"line_end":29,"column_start":1,"column_end":113}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67856,"byte_end":67865,"line_start":30,"line_end":30,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67866,"byte_end":67871,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67872,"byte_end":67875,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ impl ctx::SizeWith<scroll::Endian> for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67876,"byte_end":67924,"line_start":33,"line_end":33,"column_start":1,"column_end":49}},{"value":"/     // our parsing context doesn't influence our size","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67925,"byte_end":67982,"line_start":34,"line_end":34,"column_start":1,"column_end":58}},{"value":"/     fn size_with(_: &scroll::Endian) -> usize {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":67983,"byte_end":68034,"line_start":35,"line_end":35,"column_start":1,"column_end":52}},{"value":"/         ::std::mem::size_of::<Foo>()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68035,"byte_end":68075,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68076,"byte_end":68085,"line_start":37,"line_end":37,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68086,"byte_end":68091,"line_start":38,"line_end":38,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68092,"byte_end":68095,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let bytes_ = [0x0b,0x0b,0x00,0x00,0x00,0x00,0x00,0x00, 0xef,0xbe,0x00,0x00,];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68096,"byte_end":68177,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ let mut bytes = Cursor::new(bytes_);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68178,"byte_end":68218,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ let foo = bytes.ioread_with::<i64>(LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68219,"byte_end":68271,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ let bar = bytes.ioread_with::<u32>(LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68272,"byte_end":68324,"line_start":43,"line_end":43,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(foo, 0xb0b);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68325,"byte_end":68352,"line_start":44,"line_end":44,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(bar, 0xbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68353,"byte_end":68381,"line_start":45,"line_end":45,"column_start":1,"column_end":29}},{"value":"/ let error = bytes.ioread_with::<f64>(LE);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68382,"byte_end":68427,"line_start":46,"line_end":46,"column_start":1,"column_end":46}},{"value":"/ assert!(error.is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68428,"byte_end":68456,"line_start":47,"line_end":47,"column_start":1,"column_end":29}},{"value":"/ let mut bytes = Cursor::new(bytes_);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68457,"byte_end":68497,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/ let foo_ = bytes.ioread_with::<Foo>(LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68498,"byte_end":68551,"line_start":49,"line_end":49,"column_start":1,"column_end":54}},{"value":"/ // Remember that you need to copy out fields from packed structs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68552,"byte_end":68620,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ // with a `{}` block instead of borrowing them directly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68621,"byte_end":68680,"line_start":51,"line_end":51,"column_start":1,"column_end":60}},{"value":"/ // ref: https://github.com/rust-lang/rust/issues/46043","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68681,"byte_end":68739,"line_start":52,"line_end":52,"column_start":1,"column_end":59}},{"value":"/ assert_eq!({foo_.foo}, foo);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68740,"byte_end":68772,"line_start":53,"line_end":53,"column_start":1,"column_end":33}},{"value":"/ assert_eq!({foo_.bar}, bar);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68773,"byte_end":68805,"line_start":54,"line_end":54,"column_start":1,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68806,"byte_end":68813,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68814,"byte_end":68817,"line_start":56,"line_end":56,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69435,"byte_end":69441,"line_start":75,"line_end":75,"column_start":8,"column_end":14},"name":"ioread","qualname":"::lesser::IOread::ioread","value":"fn ioread<N>(&mut Self) -> Result<N> where N: FromCtx<Ctx> + SizeWith<Ctx>,\nCtx: Default","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Reads the type `N` from `Self`, with a default parsing context.\n For the primitive numeric types, this will be at the host machine's endianness.","sig":null,"attributes":[{"value":"/ Reads the type `N` from `Self`, with a default parsing context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68858,"byte_end":68925,"line_start":58,"line_end":58,"column_start":5,"column_end":72}},{"value":"/ For the primitive numeric types, this will be at the host machine's endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68930,"byte_end":69013,"line_start":59,"line_end":59,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69018,"byte_end":69021,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69026,"byte_end":69039,"line_start":61,"line_end":61,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69044,"byte_end":69055,"line_start":62,"line_end":62,"column_start":5,"column_end":16}},{"value":"/ use scroll::IOread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69060,"byte_end":69083,"line_start":63,"line_end":63,"column_start":5,"column_end":28}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69088,"byte_end":69112,"line_start":64,"line_end":64,"column_start":5,"column_end":29}},{"value":"/ let bytes = [0xef, 0xbe];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69117,"byte_end":69146,"line_start":65,"line_end":65,"column_start":5,"column_end":34}},{"value":"/ let mut bytes = Cursor::new(&bytes[..]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69151,"byte_end":69195,"line_start":66,"line_end":66,"column_start":5,"column_end":49}},{"value":"/ let beef = bytes.ioread::<u16>().unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69200,"byte_end":69246,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69251,"byte_end":69254,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69259,"byte_end":69295,"line_start":69,"line_end":69,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(0xbeef, beef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69300,"byte_end":69329,"line_start":70,"line_end":70,"column_start":5,"column_end":34}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69334,"byte_end":69367,"line_start":71,"line_end":71,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(0xefbe, beef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69372,"byte_end":69401,"line_start":72,"line_end":72,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69406,"byte_end":69413,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69418,"byte_end":69427,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70526,"byte_end":70537,"line_start":104,"line_end":104,"column_start":8,"column_end":19},"name":"ioread_with","qualname":"::lesser::IOread::ioread_with","value":"fn ioread_with<N>(&mut Self, Ctx) -> Result<N> where N: FromCtx<Ctx> +\nSizeWith<Ctx>","parent":{"krate":0,"index":283},"children":[],"decl_id":null,"docs":" Reads the type `N` from `Self`, with the parsing context `ctx`.\n **NB**: this will panic if the type you're reading has a size greater than 256. Plans are to have this allocate in larger cases.","sig":null,"attributes":[{"value":"/ Reads the type `N` from `Self`, with the parsing context `ctx`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69612,"byte_end":69679,"line_start":83,"line_end":83,"column_start":5,"column_end":72}},{"value":"/ **NB**: this will panic if the type you're reading has a size greater than 256. Plans are to have this allocate in larger cases.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69684,"byte_end":69816,"line_start":84,"line_end":84,"column_start":5,"column_end":137}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69821,"byte_end":69824,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ For the primitive numeric types, this will be at the host machine's endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69829,"byte_end":69912,"line_start":86,"line_end":86,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69917,"byte_end":69920,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69925,"byte_end":69938,"line_start":88,"line_end":88,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69943,"byte_end":69954,"line_start":89,"line_end":89,"column_start":5,"column_end":16}},{"value":"/ use scroll::{IOread, LE, BE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69959,"byte_end":69992,"line_start":90,"line_end":90,"column_start":5,"column_end":38}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":69997,"byte_end":70021,"line_start":91,"line_end":91,"column_start":5,"column_end":29}},{"value":"/ let bytes = [0xef, 0xbe, 0xb0, 0xb0, 0xfe, 0xed, 0xde, 0xad];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70026,"byte_end":70091,"line_start":92,"line_end":92,"column_start":5,"column_end":70}},{"value":"/ let mut bytes = Cursor::new(&bytes[..]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70096,"byte_end":70140,"line_start":93,"line_end":93,"column_start":5,"column_end":49}},{"value":"/ let beef = bytes.ioread_with::<u16>(LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70145,"byte_end":70198,"line_start":94,"line_end":94,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(0xbeef, beef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70203,"byte_end":70232,"line_start":95,"line_end":95,"column_start":5,"column_end":34}},{"value":"/ let b0 = bytes.ioread::<u8>().unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70237,"byte_end":70280,"line_start":96,"line_end":96,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(0xb0, b0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70285,"byte_end":70310,"line_start":97,"line_end":97,"column_start":5,"column_end":30}},{"value":"/ let b0 = bytes.ioread::<u8>().unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70315,"byte_end":70358,"line_start":98,"line_end":98,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(0xb0, b0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70363,"byte_end":70388,"line_start":99,"line_end":99,"column_start":5,"column_end":30}},{"value":"/ let feeddead = bytes.ioread_with::<u32>(BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70393,"byte_end":70450,"line_start":100,"line_end":100,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(0xfeeddead, feeddead);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70455,"byte_end":70492,"line_start":101,"line_end":101,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70497,"byte_end":70504,"line_start":102,"line_end":102,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70509,"byte_end":70518,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71254,"byte_end":71261,"line_start":120,"line_end":120,"column_start":11,"column_end":18},"name":"IOwrite","qualname":"::lesser::IOwrite","value":"IOwrite<Ctx>: Write","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297}],"decl_id":null,"docs":" An extension trait to `std::io::Write` streams; this only serializes simple types, like `u8`, `i32`, `f32`, `usize`, etc.","sig":null,"attributes":[{"value":"/ An extension trait to `std::io::Write` streams; this only serializes simple types, like `u8`, `i32`, `f32`, `usize`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70942,"byte_end":71067,"line_start":117,"line_end":117,"column_start":1,"column_end":126}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71068,"byte_end":71071,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ To write custom types with a single `iowrite::<YourType>` call, implement [`IntoCtx`](ctx/trait.IntoCtx.html) and [`SizeWith`](ctx/trait.SizeWith.html) for `YourType`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71072,"byte_end":71243,"line_start":119,"line_end":119,"column_start":1,"column_end":172}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72090,"byte_end":72097,"line_start":141,"line_end":141,"column_start":8,"column_end":15},"name":"iowrite","qualname":"::lesser::IOwrite::iowrite","value":"fn iowrite<N>(&mut Self, N) -> Result<()> where N: SizeWith<Ctx> +\nIntoCtx<Ctx>, Ctx: Default","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Writes the type `N` into `Self`, with the parsing context `ctx`.\n **NB**: this will panic if the type you're writing has a size greater than 256. Plans are to have this allocate in larger cases.","sig":null,"attributes":[{"value":"/ Writes the type `N` into `Self`, with the parsing context `ctx`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71286,"byte_end":71354,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ **NB**: this will panic if the type you're writing has a size greater than 256. Plans are to have this allocate in larger cases.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71359,"byte_end":71491,"line_start":122,"line_end":122,"column_start":5,"column_end":137}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71496,"byte_end":71499,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ For the primitive numeric types, this will be at the host machine's endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71504,"byte_end":71587,"line_start":124,"line_end":124,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71592,"byte_end":71595,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71600,"byte_end":71613,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71618,"byte_end":71629,"line_start":127,"line_end":127,"column_start":5,"column_end":16}},{"value":"/ use scroll::IOwrite;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71634,"byte_end":71658,"line_start":128,"line_end":128,"column_start":5,"column_end":29}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71663,"byte_end":71687,"line_start":129,"line_end":129,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71692,"byte_end":71695,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0x0u8; 4];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71700,"byte_end":71731,"line_start":131,"line_end":131,"column_start":5,"column_end":36}},{"value":"/ let mut bytes = Cursor::new(&mut bytes[..]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71736,"byte_end":71784,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/ bytes.iowrite(0xdeadbeef as u32).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71789,"byte_end":71835,"line_start":133,"line_end":133,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71840,"byte_end":71843,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ #[cfg(target_endian = \"little\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71848,"byte_end":71884,"line_start":135,"line_end":135,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(bytes.into_inner(), [0xef, 0xbe, 0xad, 0xde,]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71889,"byte_end":71951,"line_start":136,"line_end":136,"column_start":5,"column_end":67}},{"value":"/ #[cfg(target_endian = \"big\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71956,"byte_end":71989,"line_start":137,"line_end":137,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(bytes.into_inner(), [0xde, 0xad, 0xbe, 0xef,]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71994,"byte_end":72056,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72061,"byte_end":72068,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72073,"byte_end":72082,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":73040,"byte_end":73052,"line_start":166,"line_end":166,"column_start":8,"column_end":20},"name":"iowrite_with","qualname":"::lesser::IOwrite::iowrite_with","value":"fn iowrite_with<N>(&mut Self, N, Ctx) -> Result<()> where N: SizeWith<Ctx> +\nIntoCtx<Ctx>","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":" Writes the type `N` into `Self`, with the parsing context `ctx`.\n **NB**: this will panic if the type you're writing has a size greater than 256. Plans are to have this allocate in larger cases.","sig":null,"attributes":[{"value":"/ Writes the type `N` into `Self`, with the parsing context `ctx`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72279,"byte_end":72347,"line_start":149,"line_end":149,"column_start":5,"column_end":73}},{"value":"/ **NB**: this will panic if the type you're writing has a size greater than 256. Plans are to have this allocate in larger cases.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72352,"byte_end":72484,"line_start":150,"line_end":150,"column_start":5,"column_end":137}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72489,"byte_end":72492,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ For the primitive numeric types, this will be at the host machine's endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72497,"byte_end":72580,"line_start":152,"line_end":152,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72585,"byte_end":72588,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72593,"byte_end":72606,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72611,"byte_end":72622,"line_start":155,"line_end":155,"column_start":5,"column_end":16}},{"value":"/ use scroll::{IOwrite, LE, BE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72627,"byte_end":72661,"line_start":156,"line_end":156,"column_start":5,"column_end":39}},{"value":"/ use std::io::{Write, Cursor};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72666,"byte_end":72699,"line_start":157,"line_end":157,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72704,"byte_end":72707,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = [0x0u8; 10];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72712,"byte_end":72744,"line_start":159,"line_end":159,"column_start":5,"column_end":37}},{"value":"/ let mut cursor = Cursor::new(&mut bytes[..]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72749,"byte_end":72798,"line_start":160,"line_end":160,"column_start":5,"column_end":54}},{"value":"/ cursor.write_all(b\"hello\").unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72803,"byte_end":72843,"line_start":161,"line_end":161,"column_start":5,"column_end":45}},{"value":"/ cursor.iowrite_with(0xdeadbeef as u32, BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72848,"byte_end":72904,"line_start":162,"line_end":162,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(cursor.into_inner(), [0x68, 0x65, 0x6c, 0x6c, 0x6f, 0xde, 0xad, 0xbe, 0xef, 0x0]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":72909,"byte_end":73006,"line_start":163,"line_end":163,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":73011,"byte_end":73018,"line_start":164,"line_end":164,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":73023,"byte_end":73032,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":313},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75919,"byte_end":75924,"line_start":44,"line_end":44,"column_start":11,"column_end":16},"name":"Pread","qualname":"::pread::Pread","value":"Pread<Ctx, E>","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331}],"decl_id":null,"docs":" A very generic, contextual pread interface in Rust.","sig":null,"attributes":[{"value":"/ A very generic, contextual pread interface in Rust.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73527,"byte_end":73582,"line_start":6,"line_end":6,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73583,"byte_end":73586,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Like [Pwrite](trait.Pwrite.html) — but for reading!","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73587,"byte_end":73644,"line_start":8,"line_end":8,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73645,"byte_end":73648,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Implementing `Pread` on a data store allows you to then read almost arbitrarily complex types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73649,"byte_end":73746,"line_start":10,"line_end":10,"column_start":1,"column_end":98}},{"value":"/ efficiently.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73747,"byte_end":73763,"line_start":11,"line_end":11,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73764,"byte_end":73767,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ To this end the Pread trait works in conjuction with the [TryFromCtx](ctx/trait.TryFromCtx.html);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73768,"byte_end":73869,"line_start":13,"line_end":13,"column_start":1,"column_end":102}},{"value":"/ The `TryFromCtx` trait implemented on a type defines how to convert data to an object of that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73870,"byte_end":73967,"line_start":14,"line_end":14,"column_start":1,"column_end":98}},{"value":"/ type, the Pread trait implemented on a data store defines how to extract said data from that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":73968,"byte_end":74064,"line_start":15,"line_end":15,"column_start":1,"column_end":97}},{"value":"/ store.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74065,"byte_end":74075,"line_start":16,"line_end":16,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74076,"byte_end":74079,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ It should be noted though that in this context, data does not necessarily mean `&[u8]` —","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74080,"byte_end":74174,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/ `Pread` and `TryFromCtx` are generic over what 'data' means and could be implemented instead","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74175,"byte_end":74271,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ over chunks of memory or any other indexable type — but scroll does come with a set of powerful","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74272,"byte_end":74373,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ blanket implementations for data being a continous block of byte-addressable memory.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74374,"byte_end":74462,"line_start":21,"line_end":21,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74463,"byte_end":74466,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Pread provides two main groups of functions: pread and gread.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74467,"byte_end":74532,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74533,"byte_end":74536,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ `pread` is the basic function that simply extracts a given type from a given data store - either","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74537,"byte_end":74637,"line_start":25,"line_end":25,"column_start":1,"column_end":101}},{"value":"/ using a provided Context in the case of [pread_with](trait.Pread.html#method.pread_with) or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74638,"byte_end":74733,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ with the default context for the given type in the case of [pread](trait.Pread.html#method.pread)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74734,"byte_end":74835,"line_start":27,"line_end":27,"column_start":1,"column_end":102}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74836,"byte_end":74839,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ `gread` does in addition to that update the offset it's currently at, allowing for a cursored","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74840,"byte_end":74937,"line_start":29,"line_end":29,"column_start":1,"column_end":98}},{"value":"/ read — `gread_inout` expands on that and reads a number of continous types from the data store.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":74938,"byte_end":75039,"line_start":30,"line_end":30,"column_start":1,"column_end":100}},{"value":"/ gread again comes with `_with` variants to allow using a specific context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75040,"byte_end":75118,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75119,"byte_end":75122,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Since pread and friends are very generic functions their types are rather complex, but very","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75123,"byte_end":75218,"line_start":33,"line_end":33,"column_start":1,"column_end":96}},{"value":"/ much understandable; `TryFromCtx` is generic over `Ctx` ([described","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75219,"byte_end":75290,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/ here](ctx/index.html#context)), `Output` and `Error`. The Error type is hopefully","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75291,"byte_end":75376,"line_start":35,"line_end":35,"column_start":1,"column_end":86}},{"value":"/ self-explanatory, however the `Output` type is rather important; it defines what Pread extracts","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75377,"byte_end":75476,"line_start":36,"line_end":36,"column_start":1,"column_end":100}},{"value":"/ from the data store and has to match up with what `TryFromCtx` expects as input to convert into","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75477,"byte_end":75576,"line_start":37,"line_end":37,"column_start":1,"column_end":100}},{"value":"/ the resulting type. scroll defaults to `&[u8]` here.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75577,"byte_end":75633,"line_start":38,"line_end":38,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75634,"byte_end":75637,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ Unless you need to implement your own data store — that is either can't convert to `&[u8]` or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75638,"byte_end":75737,"line_start":40,"line_end":40,"column_start":1,"column_end":98}},{"value":"/ have a data that does not expose a `&[u8]` — you will probably want to implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75738,"byte_end":75824,"line_start":41,"line_end":41,"column_start":1,"column_end":85}},{"value":"/ [TryFromCtx](ctx/trait.TryFromCtx.html) on your Rust types to be extracted.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75825,"byte_end":75904,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75905,"byte_end":75908,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76255,"byte_end":76260,"line_start":52,"line_end":52,"column_start":8,"column_end":13},"name":"pread","qualname":"::pread::Pread::pread","value":"fn pread<'a, N>(&'a Self, usize) -> result::Result<N, E> where\nN: TryFromCtx<Error = E>, Ctx: Default","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Reads a value from `self` at `offset` with a default `Ctx`. For the primitive numeric values, this will read at the machine's endianness.\n # Example\n ```rust\n use scroll::Pread;\n let bytes = [0x7fu8; 0x01];\n let byte = bytes.pread::<u8>(0).unwrap();\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75945,"byte_end":75954,"line_start":45,"line_end":45,"column_start":5,"column_end":14}},{"value":"/ Reads a value from `self` at `offset` with a default `Ctx`. For the primitive numeric values, this will read at the machine's endianness.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":75959,"byte_end":76100,"line_start":46,"line_end":46,"column_start":5,"column_end":146}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76105,"byte_end":76118,"line_start":47,"line_end":47,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76123,"byte_end":76134,"line_start":48,"line_end":48,"column_start":5,"column_end":16}},{"value":"/ use scroll::Pread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76139,"byte_end":76161,"line_start":49,"line_end":49,"column_start":5,"column_end":27}},{"value":"/ let bytes = [0x7fu8; 0x01];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76166,"byte_end":76197,"line_start":50,"line_end":50,"column_start":5,"column_end":36}},{"value":"/ let byte = bytes.pread::<u8>(0).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76202,"byte_end":76247,"line_start":51,"line_end":51,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76766,"byte_end":76776,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"pread_with","qualname":"::pread::Pread::pread_with","value":"fn pread_with<'a, N>(&'a Self, usize, Ctx) -> result::Result<N, E> where\nN: TryFromCtx<Error = E>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Reads a value from `self` at `offset` with the given `ctx`\n # Example\n ```rust\n use scroll::Pread;\n let bytes: [u8; 2] = [0xde, 0xad];\n let dead: u16 = bytes.pread_with(0, scroll::BE).unwrap();\n assert_eq!(dead, 0xdeadu16);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76475,"byte_end":76484,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"/ Reads a value from `self` at `offset` with the given `ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76489,"byte_end":76551,"line_start":63,"line_end":63,"column_start":5,"column_end":67}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76556,"byte_end":76569,"line_start":64,"line_end":64,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76574,"byte_end":76585,"line_start":65,"line_end":65,"column_start":5,"column_end":16}},{"value":"/ use scroll::Pread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76590,"byte_end":76612,"line_start":66,"line_end":66,"column_start":5,"column_end":27}},{"value":"/ let bytes: [u8; 2] = [0xde, 0xad];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76617,"byte_end":76655,"line_start":67,"line_end":67,"column_start":5,"column_end":43}},{"value":"/ let dead: u16 = bytes.pread_with(0, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76660,"byte_end":76721,"line_start":68,"line_end":68,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dead, 0xdeadu16);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":76726,"byte_end":76758,"line_start":69,"line_end":69,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77397,"byte_end":77402,"line_start":88,"line_end":88,"column_start":8,"column_end":13},"name":"gread","qualname":"::pread::Pread::gread","value":"fn gread<'a, N>(&'a Self, &mut usize) -> result::Result<N, E> where\nN: TryFromCtx<Error = E>, Ctx: Default","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Reads a value from `self` at `offset` with a default `Ctx`. For the primitive numeric values, this will read at the machine's endianness. Updates the offset\n # Example\n ```rust\n use scroll::Pread;\n let offset = &mut 0;\n let bytes = [0x7fu8; 0x01];\n let byte = bytes.gread::<u8>(offset).unwrap();\n assert_eq!(*offset, 1);\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77002,"byte_end":77011,"line_start":79,"line_end":79,"column_start":5,"column_end":14}},{"value":"/ Reads a value from `self` at `offset` with a default `Ctx`. For the primitive numeric values, this will read at the machine's endianness. Updates the offset","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77016,"byte_end":77176,"line_start":80,"line_end":80,"column_start":5,"column_end":165}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77181,"byte_end":77194,"line_start":81,"line_end":81,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77199,"byte_end":77210,"line_start":82,"line_end":82,"column_start":5,"column_end":16}},{"value":"/ use scroll::Pread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77215,"byte_end":77237,"line_start":83,"line_end":83,"column_start":5,"column_end":27}},{"value":"/ let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77242,"byte_end":77266,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/ let bytes = [0x7fu8; 0x01];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77271,"byte_end":77302,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"/ let byte = bytes.gread::<u8>(offset).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77307,"byte_end":77357,"line_start":86,"line_end":86,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(*offset, 1);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77362,"byte_end":77389,"line_start":87,"line_end":87,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78013,"byte_end":78023,"line_start":108,"line_end":108,"column_start":8,"column_end":18},"name":"gread_with","qualname":"::pread::Pread::gread_with","value":"fn gread_with<'a, N>(&'a Self, &mut usize, Ctx) -> result::Result<N, E> where\nN: TryFromCtx<Error = E>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Reads a value from `self` at `offset` with the given `ctx`, and updates the offset.\n # Example\n ```rust\n use scroll::Pread;\n let offset = &mut 0;\n let bytes: [u8; 2] = [0xde, 0xad];\n let dead: u16 = bytes.gread_with(offset, scroll::BE).unwrap();\n assert_eq!(dead, 0xdeadu16);\n assert_eq!(*offset, 2);\n","sig":null,"attributes":[{"value":"/ Reads a value from `self` at `offset` with the given `ctx`, and updates the offset.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77645,"byte_end":77732,"line_start":99,"line_end":99,"column_start":5,"column_end":92}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77737,"byte_end":77750,"line_start":100,"line_end":100,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77755,"byte_end":77766,"line_start":101,"line_end":101,"column_start":5,"column_end":16}},{"value":"/ use scroll::Pread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77771,"byte_end":77793,"line_start":102,"line_end":102,"column_start":5,"column_end":27}},{"value":"/ let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77798,"byte_end":77822,"line_start":103,"line_end":103,"column_start":5,"column_end":29}},{"value":"/ let bytes: [u8; 2] = [0xde, 0xad];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77827,"byte_end":77865,"line_start":104,"line_end":104,"column_start":5,"column_end":43}},{"value":"/ let dead: u16 = bytes.gread_with(offset, scroll::BE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77870,"byte_end":77936,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(dead, 0xdeadu16);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77941,"byte_end":77973,"line_start":106,"line_end":106,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(*offset, 2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":77978,"byte_end":78005,"line_start":107,"line_end":107,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78652,"byte_end":78663,"line_start":125,"line_end":125,"column_start":8,"column_end":19},"name":"gread_inout","qualname":"::pread::Pread::gread_inout","value":"fn gread_inout<'a, N>(&'a Self, &mut usize, &mut [N]) -> result::Result<(), E>\nwhere N: TryFromCtx<Error = E>, Ctx: Default","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Tries to write `inout.len()` `N`s into `inout` from `Self` starting at `offset`, using the default context for `N`, and updates the offset.\n # Example\n ```rust\n use scroll::Pread;\n let mut bytes: Vec<u8> = vec![0, 0];\n let offset = &mut 0;\n let bytes_from: [u8; 2] = [0x48, 0x49];\n bytes_from.gread_inout(offset, &mut bytes).unwrap();\n assert_eq!(&bytes, &bytes_from);\n assert_eq!(*offset, 2);\n","sig":null,"attributes":[{"value":"/ Tries to write `inout.len()` `N`s into `inout` from `Self` starting at `offset`, using the default context for `N`, and updates the offset.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78170,"byte_end":78313,"line_start":114,"line_end":114,"column_start":5,"column_end":148}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78318,"byte_end":78331,"line_start":115,"line_end":115,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78336,"byte_end":78347,"line_start":116,"line_end":116,"column_start":5,"column_end":16}},{"value":"/ use scroll::Pread;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78352,"byte_end":78374,"line_start":117,"line_end":117,"column_start":5,"column_end":27}},{"value":"/ let mut bytes: Vec<u8> = vec![0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78379,"byte_end":78419,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"/ let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78424,"byte_end":78448,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/ let bytes_from: [u8; 2] = [0x48, 0x49];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78453,"byte_end":78496,"line_start":120,"line_end":120,"column_start":5,"column_end":48}},{"value":"/ bytes_from.gread_inout(offset, &mut bytes).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78501,"byte_end":78557,"line_start":121,"line_end":121,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(&bytes, &bytes_from);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78562,"byte_end":78598,"line_start":122,"line_end":122,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(*offset, 2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78603,"byte_end":78630,"line_start":123,"line_end":123,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78635,"byte_end":78644,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79427,"byte_end":79443,"line_start":150,"line_end":150,"column_start":8,"column_end":24},"name":"gread_inout_with","qualname":"::pread::Pread::gread_inout_with","value":"fn gread_inout_with<'a, N>(&'a Self, &mut usize, &mut [N], Ctx)\n-> result::Result<(), E> where N: TryFromCtx<Error = E>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Tries to write `inout.len()` `N`s into `inout` from `Self` starting at `offset`, using the context `ctx`\n # Example\n ```rust\n use scroll::{ctx, LE, Pread};\n let mut bytes: Vec<u8> = vec![0, 0];\n let offset = &mut 0;\n let bytes_from: [u8; 2] = [0x48, 0x49];\n bytes_from.gread_inout_with(offset, &mut bytes, LE).unwrap();\n assert_eq!(&bytes, &bytes_from);\n assert_eq!(*offset, 2);\n","sig":null,"attributes":[{"value":"/ Tries to write `inout.len()` `N`s into `inout` from `Self` starting at `offset`, using the context `ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":78960,"byte_end":79068,"line_start":139,"line_end":139,"column_start":5,"column_end":113}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79073,"byte_end":79086,"line_start":140,"line_end":140,"column_start":5,"column_end":18}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79091,"byte_end":79102,"line_start":141,"line_end":141,"column_start":5,"column_end":16}},{"value":"/ use scroll::{ctx, LE, Pread};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79107,"byte_end":79140,"line_start":142,"line_end":142,"column_start":5,"column_end":38}},{"value":"/ let mut bytes: Vec<u8> = vec![0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79145,"byte_end":79185,"line_start":143,"line_end":143,"column_start":5,"column_end":45}},{"value":"/ let offset = &mut 0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79190,"byte_end":79214,"line_start":144,"line_end":144,"column_start":5,"column_end":29}},{"value":"/ let bytes_from: [u8; 2] = [0x48, 0x49];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79219,"byte_end":79262,"line_start":145,"line_end":145,"column_start":5,"column_end":48}},{"value":"/ bytes_from.gread_inout_with(offset, &mut bytes, LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79267,"byte_end":79332,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(&bytes, &bytes_from);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79337,"byte_end":79373,"line_start":147,"line_end":147,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(*offset, 2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79378,"byte_end":79405,"line_start":148,"line_end":148,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79410,"byte_end":79419,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pread.rs","byte_start":79801,"byte_end":79811,"line_start":164,"line_end":164,"column_start":8,"column_end":18},"name":"gread_with","qualname":"<[u8] as pread::Pread>::gread_with","value":"fn gread_with<'a, N>(&'a Self, &mut usize, Ctx) -> result::Result<N, E> where\nN: TryFromCtx<Error = E>","parent":{"krate":0,"index":313},"children":[],"decl_id":{"krate":0,"index":325},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":351},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81409,"byte_end":81415,"line_start":26,"line_end":26,"column_start":11,"column_end":17},"name":"Pwrite","qualname":"::pwrite::Pwrite","value":"Pwrite<Ctx, E>","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"decl_id":null,"docs":" A very generic, contextual pwrite interface in Rust.","sig":null,"attributes":[{"value":"/ A very generic, contextual pwrite interface in Rust.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80281,"byte_end":80337,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80338,"byte_end":80341,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Like [Pread](trait.Pread.html) — but for writing!","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80342,"byte_end":80397,"line_start":8,"line_end":8,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80398,"byte_end":80401,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Implementing `Pwrite` on a data store allows you to then write almost arbitrarily complex types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80402,"byte_end":80501,"line_start":10,"line_end":10,"column_start":1,"column_end":100}},{"value":"/ efficiently.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80502,"byte_end":80518,"line_start":11,"line_end":11,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80519,"byte_end":80522,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ To this end the Pwrite trait works in conjuction with the [TryIntoCtx](ctx/trait.TryIntoCtx.html);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80523,"byte_end":80625,"line_start":13,"line_end":13,"column_start":1,"column_end":103}},{"value":"/ The `TryIntoCtx` trait implemented on a type defines how to convert said type into data that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80626,"byte_end":80722,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ an implementation of Pwrite can … well … write.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80723,"byte_end":80778,"line_start":15,"line_end":15,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80779,"byte_end":80782,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ As with [Pread](trait.Pread.html) 'data' does not necessarily mean `&[u8]` but can be any","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80783,"byte_end":80876,"line_start":17,"line_end":17,"column_start":1,"column_end":94}},{"value":"/ indexable type. In fact much of the documentation of `Pread` applies to `Pwrite` as well just","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80877,"byte_end":80974,"line_start":18,"line_end":18,"column_start":1,"column_end":98}},{"value":"/ with 'read' switched for 'write' and 'From' switched with 'Into' so if you haven't yet you","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":80975,"byte_end":81069,"line_start":19,"line_end":19,"column_start":1,"column_end":95}},{"value":"/ should read the documentation of `Pread` first.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81070,"byte_end":81121,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81122,"byte_end":81125,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Unless you need to implement your own data store — that is either can't convert to `&[u8]` or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81126,"byte_end":81225,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/ have a data that does not expose a `&mut [u8]` — you will probably want to implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81226,"byte_end":81316,"line_start":23,"line_end":23,"column_start":1,"column_end":89}},{"value":"/ [TryIntoCtx](ctx/trait.TryIntoCtx.html) on your Rust types to be written.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81317,"byte_end":81394,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81395,"byte_end":81398,"line_start":25,"line_end":25,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":354},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81453,"byte_end":81459,"line_start":28,"line_end":28,"column_start":8,"column_end":14},"name":"pwrite","qualname":"::pwrite::Pwrite::pwrite","value":"fn pwrite<N>(&mut Self, N, usize) -> result::Result<usize, E> where\nN: TryIntoCtx<Ctx, Self, Error = E>, Ctx: Default","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81436,"byte_end":81445,"line_start":27,"line_end":27,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82008,"byte_end":82019,"line_start":46,"line_end":46,"column_start":8,"column_end":19},"name":"pwrite_with","qualname":"::pwrite::Pwrite::pwrite_with","value":"fn pwrite_with<N>(&mut Self, N, usize, Ctx) -> result::Result<usize, E> where\nN: TryIntoCtx<Ctx, Self, Error = E>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Write `N` at offset `I` with context `Ctx`\n # Example\n ```\n use scroll::{Pwrite, Pread, LE};\n let mut bytes: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 0];\n bytes.pwrite_with::<u32>(0xbeefbeef, 0, LE).unwrap();\n assert_eq!(bytes.pread_with::<u32>(0, LE).unwrap(), 0xbeefbeef);\n","sig":null,"attributes":[{"value":"/ Write `N` at offset `I` with context `Ctx`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81689,"byte_end":81735,"line_start":39,"line_end":39,"column_start":5,"column_end":51}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81740,"byte_end":81753,"line_start":40,"line_end":40,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81758,"byte_end":81765,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ use scroll::{Pwrite, Pread, LE};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81770,"byte_end":81806,"line_start":42,"line_end":42,"column_start":5,"column_end":41}},{"value":"/ let mut bytes: [u8; 8] = [0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81811,"byte_end":81865,"line_start":43,"line_end":43,"column_start":5,"column_end":59}},{"value":"/ bytes.pwrite_with::<u32>(0xbeefbeef, 0, LE).unwrap();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81870,"byte_end":81927,"line_start":44,"line_end":44,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(bytes.pread_with::<u32>(0, LE).unwrap(), 0xbeefbeef);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":81932,"byte_end":82000,"line_start":45,"line_end":45,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82274,"byte_end":82280,"line_start":55,"line_end":55,"column_start":8,"column_end":14},"name":"gwrite","qualname":"::pwrite::Pwrite::gwrite","value":"fn gwrite<N>(&mut Self, N, &mut usize) -> result::Result<usize, E> where\nN: TryIntoCtx<Ctx, Self, Error = E>, Ctx: Default","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Write `n` into `self` at `offset`, with a default `Ctx`. Updates the offset.\n","sig":null,"attributes":[{"value":"/ Write `n` into `self` at `offset`, with a default `Ctx`. Updates the offset.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82172,"byte_end":82252,"line_start":53,"line_end":53,"column_start":5,"column_end":85}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82257,"byte_end":82266,"line_start":54,"line_end":54,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82634,"byte_end":82645,"line_start":69,"line_end":69,"column_start":8,"column_end":19},"name":"gwrite_with","qualname":"::pwrite::Pwrite::gwrite_with","value":"fn gwrite_with<N>(&mut Self, N, &mut usize, Ctx) -> result::Result<usize, E>\nwhere N: TryIntoCtx<Ctx, Self, Error = E>","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Write `n` into `self` at `offset`, with the `ctx`. Updates the offset.\n","sig":null,"attributes":[{"value":"/ Write `n` into `self` at `offset`, with the `ctx`. Updates the offset.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82538,"byte_end":82612,"line_start":67,"line_end":67,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":82617,"byte_end":82626,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/pwrite.rs","byte_start":83011,"byte_end":83022,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"pwrite_with","qualname":"<[u8] as pwrite::Pwrite>::pwrite_with","value":"fn pwrite_with<N>(&mut Self, N, usize, Ctx) -> result::Result<usize, E> where\nN: TryIntoCtx<Ctx, Self, Error = E>","parent":{"krate":0,"index":351},"children":[],"decl_id":{"krate":0,"index":356},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":375},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9537,"byte_end":9543,"line_start":251,"line_end":251,"column_start":9,"column_end":15},"name":"export","qualname":"::export","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":379}],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30792,"byte_end":30793,"line_start":208,"line_end":208,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31446,"byte_end":31452,"line_start":234,"line_end":234,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31542,"byte_end":31548,"line_start":241,"line_end":241,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49272,"byte_end":49279,"line_start":813,"line_end":813,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":50160,"byte_end":50167,"line_start":845,"line_end":845,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52275,"byte_end":52281,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52369,"byte_end":52375,"line_start":28,"line_end":28,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":144}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52533,"byte_end":52539,"line_start":39,"line_end":39,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53460,"byte_end":53465,"line_start":32,"line_end":32,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54114,"byte_end":54119,"line_start":54,"line_end":54,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54210,"byte_end":54215,"line_start":60,"line_end":60,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58069,"byte_end":58070,"line_start":95,"line_end":95,"column_start":82,"column_end":83},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60433,"byte_end":60434,"line_start":169,"line_end":169,"column_start":86,"column_end":87},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60705,"byte_end":60712,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":239}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61133,"byte_end":61140,"line_start":30,"line_end":30,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":241}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61449,"byte_end":61456,"line_start":50,"line_end":50,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61877,"byte_end":61884,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":62460,"byte_end":62467,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":63440,"byte_end":63447,"line_start":129,"line_end":129,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":260},{"krate":0,"index":261}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70936,"byte_end":70937,"line_start":115,"line_end":115,"column_start":51,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":73455,"byte_end":73456,"line_start":178,"line_end":178,"column_start":53,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lib.rs","byte_start":9195,"byte_end":9198,"line_start":231,"line_end":231,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":20}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":30792,"byte_end":30793,"line_start":208,"line_end":208,"column_start":48,"column_end":49},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":57},"to":{"krate":0,"index":49}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31446,"byte_end":31452,"line_start":234,"line_end":234,"column_start":18,"column_end":24},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":383},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":31542,"byte_end":31548,"line_start":241,"line_end":241,"column_start":6,"column_end":12},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":34834,"byte_end":34839,"line_start":345,"line_end":345,"column_start":57,"column_end":62},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":78}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":36059,"byte_end":36064,"line_start":373,"line_end":373,"column_start":60,"column_end":65},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":82}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":49272,"byte_end":49279,"line_start":813,"line_end":813,"column_start":29,"column_end":36},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":2778},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/ctx.rs","byte_start":50160,"byte_end":50167,"line_start":845,"line_end":845,"column_start":21,"column_end":28},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":2778},"to":{"krate":0,"index":82}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52275,"byte_end":52281,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52369,"byte_end":52375,"line_start":28,"line_end":28,"column_start":21,"column_end":27},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":754},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/endian.rs","byte_start":52533,"byte_end":52539,"line_start":39,"line_end":39,"column_start":6,"column_end":12},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":53460,"byte_end":53465,"line_start":32,"line_end":32,"column_start":23,"column_end":28},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":770},"to":{"krate":1,"index":2569}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54114,"byte_end":54119,"line_start":54,"line_end":54,"column_start":26,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":770},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/error.rs","byte_start":54210,"byte_end":54215,"line_start":60,"line_end":60,"column_start":18,"column_end":23},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":770},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56191,"byte_end":56196,"line_start":36,"line_end":36,"column_start":34,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3483},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":56202,"byte_end":56207,"line_start":36,"line_end":36,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":2,"index":3483},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58069,"byte_end":58070,"line_start":95,"line_end":95,"column_start":82,"column_end":83},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":202},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58988,"byte_end":58993,"line_start":125,"line_end":125,"column_start":41,"column_end":46},"kind":"SuperTrait","from":{"krate":2,"index":3483},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":58999,"byte_end":59007,"line_start":125,"line_end":125,"column_start":52,"column_end":60},"kind":"SuperTrait","from":{"krate":2,"index":3487},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/greater.rs","byte_start":60433,"byte_end":60434,"line_start":169,"line_end":169,"column_start":86,"column_end":87},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":213},"to":{"krate":0,"index":203}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":60705,"byte_end":60712,"line_start":15,"line_end":15,"column_start":6,"column_end":13},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":788},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61133,"byte_end":61140,"line_start":30,"line_end":30,"column_start":21,"column_end":28},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":788},"to":{"krate":2,"index":3076}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61449,"byte_end":61456,"line_start":50,"line_end":50,"column_start":6,"column_end":13},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":800},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":61877,"byte_end":61884,"line_start":65,"line_end":65,"column_start":21,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":800},"to":{"krate":2,"index":3076}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":62460,"byte_end":62467,"line_start":93,"line_end":93,"column_start":29,"column_end":36},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":788},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/leb128.rs","byte_start":63440,"byte_end":63447,"line_start":129,"line_end":129,"column_start":29,"column_end":36},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":800},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":68847,"byte_end":68851,"line_start":57,"line_end":57,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":4540},"to":{"krate":0,"index":283}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":70936,"byte_end":70937,"line_start":115,"line_end":115,"column_start":51,"column_end":52},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":292},"to":{"krate":0,"index":283}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":71274,"byte_end":71279,"line_start":120,"line_end":120,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":4597},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/scroll-0.11.0/src/lesser.rs","byte_start":73455,"byte_end":73456,"line_start":178,"line_end":178,"column_start":53,"column_end":54},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":302},"to":{"krate":0,"index":293}}]}