{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0","program":"/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","opentelemetry","--edition=2018","/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"async-trait\"","--cfg","feature=\"crossbeam-channel\"","--cfg","feature=\"percent-encoding\"","--cfg","feature=\"pin-project\"","--cfg","feature=\"rand\"","--cfg","feature=\"trace\"","-C","metadata=ff072a3e1a16c9b2","-C","extra-filename=-ff072a3e1a16c9b2","--out-dir","/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","-L","dependency=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","--extern","async_trait=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libasync_trait-94af51055841ba8c.dylib","--extern","crossbeam_channel=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libcrossbeam_channel-dd5edacd557ec073.rmeta","--extern","futures_channel=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libfutures_channel-bca3dff8d90e59ec.rmeta","--extern","futures_executor=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libfutures_executor-2972b7af9709bdf0.rmeta","--extern","futures_util=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libfutures_util-81f9e6b97075001b.rmeta","--extern","lazy_static=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/liblazy_static-807d58eac20269da.rmeta","--extern","percent_encoding=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libpercent_encoding-81e38e60fcb76da4.rmeta","--extern","pin_project=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libpin_project-76a7ed2c810e0c63.rmeta","--extern","rand=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/librand-eabd4006b5f81187.rmeta","--extern","thiserror=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libthiserror-1556a11d29ffccd0.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libopentelemetry-ff072a3e1a16c9b2.rmeta"},"prelude":{"crate_id":{"name":"opentelemetry","disambiguator":[1761513670781041481,0]},"crate_root":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src","external_crates":[{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4485569597606079733,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","num":2,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14116380118705386640,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6269322086078963025,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16152481959168563413,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7897074911849024150,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7299104579826168146,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2669544452907545777,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[14288251452253695433,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13943810077905921301,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2237926517141734526,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[5541021343498733002,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[7188895526679788668,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[15555671723428220450,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[13375000548276363576,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8920282723255285566,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2397004371161247654,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","num":20,"id":{"name":"async_trait","disambiguator":[4301135406358876038,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","num":21,"id":{"name":"percent_encoding","disambiguator":[6578133466888099768,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":22,"id":{"name":"rand","disambiguator":[5737921661166445283,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":23,"id":{"name":"rand_core","disambiguator":[16845283938616561134,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":24,"id":{"name":"getrandom","disambiguator":[11134963274789204374,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":25,"id":{"name":"cfg_if","disambiguator":[13273704638852766021,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":26,"id":{"name":"libc","disambiguator":[2594694148884002105,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":27,"id":{"name":"rand_chacha","disambiguator":[14300429071441946605,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","num":28,"id":{"name":"ppv_lite86","disambiguator":[10001865238345273388,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":29,"id":{"name":"futures_util","disambiguator":[1827647315185954280,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":30,"id":{"name":"futures_core","disambiguator":[17540173836599093021,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":31,"id":{"name":"pin_utils","disambiguator":[8174305404796104042,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":32,"id":{"name":"futures_macro","disambiguator":[6235696014418951871,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":33,"id":{"name":"futures_task","disambiguator":[5950390365963764595,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":34,"id":{"name":"futures_sink","disambiguator":[9497018450691456923,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":35,"id":{"name":"pin_project_lite","disambiguator":[16214617887468495849,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","num":36,"id":{"name":"futures_channel","disambiguator":[3240050653023664947,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":37,"id":{"name":"slab","disambiguator":[17204978413451154944,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":38,"id":{"name":"futures_io","disambiguator":[10931676305668356181,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","num":39,"id":{"name":"memchr","disambiguator":[14228028058314693917,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","num":40,"id":{"name":"thiserror","disambiguator":[18020888330255438696,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","num":41,"id":{"name":"thiserror_impl","disambiguator":[1864002684930853046,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","num":42,"id":{"name":"pin_project","disambiguator":[11643931288000257756,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","num":43,"id":{"name":"pin_project_internal","disambiguator":[11184116565769031121,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","num":44,"id":{"name":"lazy_static","disambiguator":[15480920620595466049,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","num":45,"id":{"name":"crossbeam_channel","disambiguator":[13496712704375229448,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","num":46,"id":{"name":"crossbeam_utils","disambiguator":[1339298624939999906,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","num":47,"id":{"name":"once_cell","disambiguator":[3525325367007617747,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","num":48,"id":{"name":"futures_executor","disambiguator":[16152098228864937488,0]}}],"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":0,"byte_end":9983,"line_start":1,"line_end":270,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14925,"byte_end":14937,"line_start":150,"line_end":150,"column_start":25,"column_end":37},"alias_span":null,"name":"handle_error","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":22},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14939,"byte_end":14956,"line_start":150,"line_end":150,"column_start":39,"column_end":56},"alias_span":null,"name":"set_error_handler","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":2224},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14958,"byte_end":14963,"line_start":150,"line_end":150,"column_start":58,"column_end":63},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":38},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15252,"byte_end":15275,"line_start":158,"line_end":158,"column_start":23,"column_end":46},"alias_span":null,"name":"get_text_map_propagator","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":35},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15277,"byte_end":15300,"line_start":158,"line_end":158,"column_start":48,"column_end":71},"alias_span":null,"name":"set_text_map_propagator","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":177},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15399,"byte_end":15426,"line_start":162,"line_end":162,"column_start":5,"column_end":32},"alias_span":null,"name":"force_flush_tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":172},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15428,"byte_end":15447,"line_start":162,"line_end":162,"column_start":34,"column_end":53},"alias_span":null,"name":"set_tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15449,"byte_end":15473,"line_start":162,"line_end":162,"column_start":55,"column_end":79},"alias_span":null,"name":"shutdown_tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":170},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15475,"byte_end":15481,"line_start":162,"line_end":162,"column_start":81,"column_end":87},"alias_span":null,"name":"tracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":169},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15487,"byte_end":15502,"line_start":163,"line_end":163,"column_start":5,"column_end":20},"alias_span":null,"name":"tracer_provider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":110},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15504,"byte_end":15513,"line_start":163,"line_end":163,"column_start":22,"column_end":31},"alias_span":null,"name":"BoxedSpan","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":128},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15515,"byte_end":15526,"line_start":163,"line_end":163,"column_start":33,"column_end":44},"alias_span":null,"name":"BoxedTracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":2271},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15528,"byte_end":15548,"line_start":163,"line_end":163,"column_start":46,"column_end":66},"alias_span":null,"name":"GlobalTracerProvider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15550,"byte_end":15566,"line_start":163,"line_end":163,"column_start":68,"column_end":84},"alias_span":null,"name":"ObjectSafeTracer","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":15572,"byte_end":15596,"line_start":164,"line_end":164,"column_start":5,"column_end":29},"alias_span":null,"name":"ObjectSafeTracerProvider","value":"","parent":{"krate":0,"index":3}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","byte_start":56168,"byte_end":56185,"line_start":6,"line_end":6,"column_start":18,"column_end":35},"alias_span":null,"name":"BaggagePropagator","value":"","parent":{"krate":0,"index":338}},{"kind":"Use","ref_id":{"krate":0,"index":2389},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","byte_start":56206,"byte_end":56232,"line_start":7,"line_end":7,"column_start":20,"column_end":46},"alias_span":null,"name":"TextMapCompositePropagator","value":"","parent":{"krate":0,"index":338}},{"kind":"Use","ref_id":{"krate":0,"index":2410},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","byte_start":56257,"byte_end":56279,"line_start":8,"line_end":8,"column_start":24,"column_end":46},"alias_span":null,"name":"TraceContextPropagator","value":"","parent":{"krate":0,"index":338}},{"kind":"Use","ref_id":{"krate":0,"index":2418},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95301,"byte_end":95320,"line_start":29,"line_end":29,"column_start":14,"column_end":33},"alias_span":null,"name":"EnvResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2422},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95335,"byte_end":95362,"line_start":30,"line_end":30,"column_start":14,"column_end":41},"alias_span":null,"name":"SdkProvidedResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2423},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95335,"byte_end":95362,"line_start":30,"line_end":30,"column_start":14,"column_end":41},"alias_span":null,"name":"SdkProvidedResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95376,"byte_end":95394,"line_start":31,"line_end":31,"column_start":13,"column_end":31},"alias_span":null,"name":"OsResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2432},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95376,"byte_end":95394,"line_start":31,"line_end":31,"column_start":13,"column_end":31},"alias_span":null,"name":"OsResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2435},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95413,"byte_end":95436,"line_start":32,"line_end":32,"column_start":18,"column_end":41},"alias_span":null,"name":"ProcessResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":2436},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95413,"byte_end":95436,"line_start":32,"line_end":32,"column_start":18,"column_end":41},"alias_span":null,"name":"ProcessResourceDetector","value":"","parent":{"krate":0,"index":491}},{"kind":"Use","ref_id":{"krate":0,"index":665},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112541,"byte_end":112547,"line_start":21,"line_end":21,"column_start":18,"column_end":24},"alias_span":null,"name":"config","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2461},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112549,"byte_end":112555,"line_start":21,"line_end":21,"column_start":26,"column_end":32},"alias_span":null,"name":"Config","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2468},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112584,"byte_end":112598,"line_start":22,"line_end":22,"column_start":27,"column_end":41},"alias_span":null,"name":"EvictedHashMap","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2493},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112623,"byte_end":112635,"line_start":23,"line_end":23,"column_start":24,"column_end":36},"alias_span":null,"name":"EvictedQueue","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2526},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112665,"byte_end":112680,"line_start":24,"line_end":24,"column_start":29,"column_end":44},"alias_span":null,"name":"XrayIdGenerator","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2532},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112682,"byte_end":112693,"line_start":24,"line_end":24,"column_start":46,"column_end":57},"alias_span":null,"name":"IdGenerator","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2556},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112715,"byte_end":112722,"line_start":25,"line_end":25,"column_start":20,"column_end":27},"alias_span":null,"name":"Builder","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2550},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112724,"byte_end":112738,"line_start":25,"line_end":25,"column_start":29,"column_end":43},"alias_span":null,"name":"TracerProvider","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":905},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112759,"byte_end":112771,"line_start":26,"line_end":26,"column_start":19,"column_end":31},"alias_span":null,"name":"TraceRuntime","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":909},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112773,"byte_end":112780,"line_start":26,"line_end":26,"column_start":33,"column_end":40},"alias_span":null,"name":"TrySend","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2588},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112801,"byte_end":112808,"line_start":27,"line_end":27,"column_start":19,"column_end":26},"alias_span":null,"name":"Sampler","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2574},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112810,"byte_end":112826,"line_start":27,"line_end":27,"column_start":28,"column_end":44},"alias_span":null,"name":"SamplingDecision","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2562},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112828,"byte_end":112842,"line_start":27,"line_end":27,"column_start":46,"column_end":60},"alias_span":null,"name":"SamplingResult","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":938},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112844,"byte_end":112856,"line_start":27,"line_end":27,"column_start":62,"column_end":74},"alias_span":null,"name":"ShouldSample","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2607},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112873,"byte_end":112877,"line_start":28,"line_end":28,"column_start":15,"column_end":19},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2633},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112899,"byte_end":112909,"line_start":29,"line_end":29,"column_start":21,"column_end":31},"alias_span":null,"name":"SpanLimits","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2661},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112941,"byte_end":112952,"line_start":31,"line_end":31,"column_start":5,"column_end":16},"alias_span":null,"name":"BatchConfig","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2649},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112954,"byte_end":112966,"line_start":31,"line_end":31,"column_start":18,"column_end":30},"alias_span":null,"name":"BatchMessage","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":1109},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112968,"byte_end":112986,"line_start":31,"line_end":31,"column_start":32,"column_end":50},"alias_span":null,"name":"BatchSpanProcessor","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2668},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112988,"byte_end":113013,"line_start":31,"line_end":31,"column_start":52,"column_end":77},"alias_span":null,"name":"BatchSpanProcessorBuilder","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2644},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":113015,"byte_end":113034,"line_start":31,"line_end":31,"column_start":79,"column_end":98},"alias_span":null,"name":"SimpleSpanProcessor","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":1096},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":113040,"byte_end":113053,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"alias_span":null,"name":"SpanProcessor","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2678},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":113074,"byte_end":113080,"line_start":34,"line_end":34,"column_start":17,"column_end":23},"alias_span":null,"name":"Tracer","value":"","parent":{"krate":0,"index":641}},{"kind":"Use","ref_id":{"krate":0,"index":2348},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44922,"byte_end":44944,"line_start":22,"line_end":22,"column_start":26,"column_end":48},"alias_span":null,"name":"InstrumentationLibrary","value":"","parent":{"krate":0,"index":226}},{"kind":"Use","ref_id":{"krate":0,"index":2439},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44964,"byte_end":44972,"line_start":23,"line_end":23,"column_start":19,"column_end":27},"alias_span":null,"name":"Resource","value":"","parent":{"krate":0,"index":226}},{"kind":"Use","ref_id":{"krate":0,"index":2745},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9144,"byte_end":9151,"line_start":232,"line_end":232,"column_start":19,"column_end":26},"alias_span":null,"name":"Context","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9153,"byte_end":9165,"line_start":232,"line_end":232,"column_start":28,"column_end":40},"alias_span":null,"name":"ContextGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2781},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9199,"byte_end":9204,"line_start":236,"line_end":236,"column_start":18,"column_end":23},"alias_span":null,"name":"Array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2760},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9206,"byte_end":9209,"line_start":236,"line_end":236,"column_start":25,"column_end":28},"alias_span":null,"name":"Key","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2842},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9211,"byte_end":9219,"line_start":236,"line_end":236,"column_start":30,"column_end":38},"alias_span":null,"name":"KeyValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2810},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9221,"byte_end":9226,"line_start":236,"line_end":236,"column_start":40,"column_end":45},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1610},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274675,"byte_end":274692,"line_start":168,"line_end":168,"column_start":30,"column_end":47},"alias_span":null,"name":"TextMapPropagator","value":"","parent":{"krate":0,"index":1588}},{"kind":"Use","ref_id":{"krate":0,"index":1759},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284619,"byte_end":284634,"line_start":191,"line_end":191,"column_start":15,"column_end":30},"alias_span":null,"name":"get_active_span","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":1757},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284636,"byte_end":284655,"line_start":191,"line_end":191,"column_start":32,"column_end":51},"alias_span":null,"name":"mark_span_as_active","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284657,"byte_end":284666,"line_start":191,"line_end":191,"column_start":53,"column_end":62},"alias_span":null,"name":"FutureExt","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2871},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284668,"byte_end":284675,"line_start":191,"line_end":191,"column_start":64,"column_end":71},"alias_span":null,"name":"SpanRef","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":1741},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284677,"byte_end":284692,"line_start":191,"line_end":191,"column_start":73,"column_end":88},"alias_span":null,"name":"TraceContextExt","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":1883},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284706,"byte_end":284710,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2965},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284712,"byte_end":284720,"line_start":192,"line_end":192,"column_start":18,"column_end":26},"alias_span":null,"name":"SpanKind","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2983},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284722,"byte_end":284732,"line_start":192,"line_end":192,"column_start":28,"column_end":38},"alias_span":null,"name":"StatusCode","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3091},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284754,"byte_end":284765,"line_start":193,"line_end":193,"column_start":20,"column_end":31},"alias_span":null,"name":"SpanContext","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3034},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284767,"byte_end":284773,"line_start":193,"line_end":193,"column_start":33,"column_end":39},"alias_span":null,"name":"SpanId","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3035},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284767,"byte_end":284773,"line_start":193,"line_end":193,"column_start":33,"column_end":39},"alias_span":null,"name":"SpanId","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2998},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284775,"byte_end":284785,"line_start":193,"line_end":193,"column_start":41,"column_end":51},"alias_span":null,"name":"TraceFlags","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3018},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284787,"byte_end":284794,"line_start":193,"line_end":193,"column_start":53,"column_end":60},"alias_span":null,"name":"TraceId","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3019},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284787,"byte_end":284794,"line_start":193,"line_end":193,"column_start":53,"column_end":60},"alias_span":null,"name":"TraceId","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3050},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284796,"byte_end":284806,"line_start":193,"line_end":193,"column_start":62,"column_end":72},"alias_span":null,"name":"TraceState","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3069},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284808,"byte_end":284823,"line_start":193,"line_end":193,"column_start":74,"column_end":89},"alias_span":null,"name":"TraceStateError","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":3111},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284839,"byte_end":284850,"line_start":194,"line_end":194,"column_start":14,"column_end":25},"alias_span":null,"name":"SpanBuilder","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2062},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284852,"byte_end":284858,"line_start":194,"line_end":194,"column_start":27,"column_end":33},"alias_span":null,"name":"Tracer","value":"","parent":{"krate":0,"index":1641}},{"kind":"Use","ref_id":{"krate":0,"index":2111},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284882,"byte_end":284896,"line_start":195,"line_end":195,"column_start":22,"column_end":36},"alias_span":null,"name":"TracerProvider","value":"","parent":{"krate":0,"index":1641}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":0,"byte_end":9983,"line_start":1,"line_end":270,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":226},{"krate":0,"index":1339},{"krate":0,"index":1439},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1641},{"krate":0,"index":2208}],"decl_id":null,"docs":" OpenTelemetry provides a single set of APIs, libraries, agents, and collector\n services to capture distributed traces and metrics from your application. You\n can analyze them using [Prometheus], [Jaeger], and other observability tools.","sig":null,"attributes":[{"value":"/ OpenTelemetry provides a single set of APIs, libraries, agents, and collector","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":0,"byte_end":81,"line_start":1,"line_end":1,"column_start":1,"column_end":82}},{"value":"/ services to capture distributed traces and metrics from your application. You","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":82,"byte_end":163,"line_start":2,"line_end":2,"column_start":1,"column_end":82}},{"value":"/ can analyze them using [Prometheus], [Jaeger], and other observability tools.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":164,"byte_end":245,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":246,"byte_end":249,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ *Compiler support: [requires `rustc` 1.46+][msrv]*","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":250,"byte_end":304,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":305,"byte_end":308,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ [Prometheus]: https://prometheus.io","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":309,"byte_end":348,"line_start":7,"line_end":7,"column_start":1,"column_end":40}},{"value":"/ [Jaeger]: https://www.jaegertracing.io","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":349,"byte_end":391,"line_start":8,"line_end":8,"column_start":1,"column_end":43}},{"value":"/ [msrv]: #supported-rust-versions","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":392,"byte_end":428,"line_start":9,"line_end":9,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":429,"byte_end":432,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Getting Started","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":433,"byte_end":454,"line_start":11,"line_end":11,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":455,"byte_end":458,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":459,"byte_end":472,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":473,"byte_end":504,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":505,"byte_end":512,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, sdk::export::trace::stdout, trace::Tracer};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":513,"byte_end":588,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":589,"byte_end":592,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":593,"byte_end":608,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/     // Create a new trace pipeline that prints to stdout","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":609,"byte_end":669,"line_start":19,"line_end":19,"column_start":1,"column_end":61}},{"value":"/     let tracer = stdout::new_pipeline().install_simple();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":670,"byte_end":731,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":732,"byte_end":735,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":736,"byte_end":779,"line_start":22,"line_end":22,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":780,"byte_end":819,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":820,"byte_end":831,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":832,"byte_end":835,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     // Shutdown trace pipeline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":836,"byte_end":870,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/     global::shutdown_tracer_provider();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":871,"byte_end":914,"line_start":27,"line_end":27,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":915,"byte_end":920,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":921,"byte_end":928,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":929,"byte_end":936,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":937,"byte_end":940,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ See the [examples] directory for different integration patterns.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":941,"byte_end":1009,"line_start":32,"line_end":32,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1010,"byte_end":1013,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ [examples]: https://github.com/open-telemetry/opentelemetry-rust/tree/main/examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1014,"byte_end":1101,"line_start":34,"line_end":34,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1102,"byte_end":1105,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Traces","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1106,"byte_end":1118,"line_start":36,"line_end":36,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1119,"byte_end":1122,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ The [`trace`] module includes types for tracking the progression of a single","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1123,"byte_end":1203,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/ request while it is handled by services that make up an application. A trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1204,"byte_end":1284,"line_start":39,"line_end":39,"column_start":1,"column_end":81}},{"value":"/ is a tree of [`Span`]s which are objects that represent the work being done","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1285,"byte_end":1364,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/ by individual services or components involved in a request as it flows","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1365,"byte_end":1439,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ through a system.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1440,"byte_end":1461,"line_start":42,"line_end":42,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1462,"byte_end":1465,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ### Creating and exporting spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1466,"byte_end":1502,"line_start":44,"line_end":44,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1503,"byte_end":1506,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1507,"byte_end":1514,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1515,"byte_end":1546,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1547,"byte_end":1554,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer}, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1555,"byte_end":1620,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1621,"byte_end":1624,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // get a tracer from a provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1625,"byte_end":1660,"line_start":51,"line_end":51,"column_start":1,"column_end":36}},{"value":"/ let tracer = global::tracer(\"my_service\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1661,"byte_end":1707,"line_start":52,"line_end":52,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1708,"byte_end":1711,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // start a new span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1712,"byte_end":1735,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/ let mut span = tracer.start(\"my_span\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1736,"byte_end":1779,"line_start":55,"line_end":55,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1780,"byte_end":1783,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // set some attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1784,"byte_end":1810,"line_start":57,"line_end":57,"column_start":1,"column_end":27}},{"value":"/ span.set_attribute(KeyValue::new(\"http.client_ip\", \"83.164.160.102\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1811,"byte_end":1885,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1886,"byte_end":1889,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // perform some more work...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1890,"byte_end":1922,"line_start":60,"line_end":60,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1923,"byte_end":1926,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ // end or drop the span to export","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1927,"byte_end":1964,"line_start":62,"line_end":62,"column_start":1,"column_end":38}},{"value":"/ span.end();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1965,"byte_end":1980,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1981,"byte_end":1988,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1989,"byte_end":1996,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":1997,"byte_end":2000,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ See the [`trace`] module docs for more information on creating and managing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2001,"byte_end":2080,"line_start":67,"line_end":67,"column_start":1,"column_end":80}},{"value":"/ spans.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2081,"byte_end":2091,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2092,"byte_end":2095,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2096,"byte_end":2128,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2129,"byte_end":2132,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Metrics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2133,"byte_end":2146,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2147,"byte_end":2150,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Note: the metrics specification is **still in progress** and **subject to major","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2151,"byte_end":2234,"line_start":74,"line_end":74,"column_start":1,"column_end":84}},{"value":"/ changes**.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2235,"byte_end":2249,"line_start":75,"line_end":75,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2250,"byte_end":2253,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The [`metrics`] module includes types for recording measurements about a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2254,"byte_end":2330,"line_start":77,"line_end":77,"column_start":1,"column_end":77}},{"value":"/ service at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2331,"byte_end":2354,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2355,"byte_end":2358,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ### Creating instruments and recording measurements","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2359,"byte_end":2414,"line_start":80,"line_end":80,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2415,"byte_end":2418,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2419,"byte_end":2426,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"metrics\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2427,"byte_end":2460,"line_start":83,"line_end":83,"column_start":1,"column_end":34}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2461,"byte_end":2468,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2469,"byte_end":2511,"line_start":85,"line_end":85,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2512,"byte_end":2515,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // get a meter from a provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2516,"byte_end":2550,"line_start":87,"line_end":87,"column_start":1,"column_end":35}},{"value":"/ let meter = global::meter(\"my_service\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2551,"byte_end":2595,"line_start":88,"line_end":88,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2596,"byte_end":2599,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // create an instrument","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2600,"byte_end":2627,"line_start":90,"line_end":90,"column_start":1,"column_end":28}},{"value":"/ let counter = meter.u64_counter(\"my_counter\").init();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2628,"byte_end":2685,"line_start":91,"line_end":91,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2686,"byte_end":2689,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ // record a measurement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2690,"byte_end":2717,"line_start":93,"line_end":93,"column_start":1,"column_end":28}},{"value":"/ counter.add(1, &[KeyValue::new(\"http.client_ip\", \"83.164.160.102\")]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2718,"byte_end":2791,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2792,"byte_end":2799,"line_start":95,"line_end":95,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2800,"byte_end":2807,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2808,"byte_end":2811,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ See the [`metrics`] module docs for more information on creating and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2812,"byte_end":2884,"line_start":98,"line_end":98,"column_start":1,"column_end":73}},{"value":"/ managing instruments.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2885,"byte_end":2910,"line_start":99,"line_end":99,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2911,"byte_end":2914,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ## Crate Feature Flags","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2915,"byte_end":2941,"line_start":101,"line_end":101,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2942,"byte_end":2945,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The following core crate feature flags are available:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":2946,"byte_end":3003,"line_start":103,"line_end":103,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3004,"byte_end":3007,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ * `trace`: Includes the trace API and SDK (enabled by default).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3008,"byte_end":3075,"line_start":105,"line_end":105,"column_start":1,"column_end":68}},{"value":"/ * `metrics`: Includes the unstable metrics API and SDK.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3076,"byte_end":3135,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/ * `serialize`: Adds [serde] serializers for common types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3136,"byte_end":3197,"line_start":107,"line_end":107,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3198,"byte_end":3201,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Support for recording and exporting telemetry asynchronously can be added","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3202,"byte_end":3279,"line_start":109,"line_end":109,"column_start":1,"column_end":78}},{"value":"/ via the following flags:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3280,"byte_end":3308,"line_start":110,"line_end":110,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3309,"byte_end":3312,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ * `rt-tokio`: Spawn telemetry tasks using [tokio]'s multi-thread runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3313,"byte_end":3390,"line_start":112,"line_end":112,"column_start":1,"column_end":78}},{"value":"/ * `rt-tokio-current-thread`: Spawn telemetry tasks on a separate runtime so that the main runtime won't be blocked.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3391,"byte_end":3510,"line_start":113,"line_end":113,"column_start":1,"column_end":120}},{"value":"/ * `rt-async-std`: Spawn telemetry tasks using [async-std]'s runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3511,"byte_end":3583,"line_start":114,"line_end":114,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3584,"byte_end":3587,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ [tokio]: https://crates.io/crates/tokio","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3588,"byte_end":3631,"line_start":116,"line_end":116,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3632,"byte_end":3683,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/ [serde]: https://crates.io/crates/serde","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3684,"byte_end":3727,"line_start":118,"line_end":118,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3728,"byte_end":3731,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ## Related Crates","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3732,"byte_end":3753,"line_start":120,"line_end":120,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3754,"byte_end":3757,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ In addition to `opentelemetry`, the [`open-telemetry/opentelemetry-rust`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3758,"byte_end":3835,"line_start":122,"line_end":122,"column_start":1,"column_end":78}},{"value":"/ repository contains several additional crates designed to be used with the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3836,"byte_end":3914,"line_start":123,"line_end":123,"column_start":1,"column_end":79}},{"value":"/ `opentelemetry` ecosystem. This includes a collection of trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3915,"byte_end":3981,"line_start":124,"line_end":124,"column_start":1,"column_end":67}},{"value":"/ `SpanExporter` and metrics pull and push controller implementations, as well","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":3982,"byte_end":4062,"line_start":125,"line_end":125,"column_start":1,"column_end":81}},{"value":"/ as utility and adapter crates to assist in propagating state and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4063,"byte_end":4131,"line_start":126,"line_end":126,"column_start":1,"column_end":69}},{"value":"/ instrumenting applications.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4132,"byte_end":4163,"line_start":127,"line_end":127,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4164,"byte_end":4167,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ In particular, the following crates are likely to be of interest:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4168,"byte_end":4237,"line_start":129,"line_end":129,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4238,"byte_end":4241,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - [`opentelemetry-http`] provides an interface for injecting and extracting","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4242,"byte_end":4321,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/   trace information from [`http`] headers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4322,"byte_end":4368,"line_start":132,"line_end":132,"column_start":1,"column_end":47}},{"value":"/ - [`opentelemetry-jaeger`] provides a pipeline and exporter for sending","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4369,"byte_end":4444,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/   trace information to [`Jaeger`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4445,"byte_end":4483,"line_start":134,"line_end":134,"column_start":1,"column_end":39}},{"value":"/ - [`opentelemetry-otlp`] exporter for sending trace and metric data in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4484,"byte_end":4562,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/   OTLP format to the OpenTelemetry collector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4563,"byte_end":4612,"line_start":136,"line_end":136,"column_start":1,"column_end":50}},{"value":"/ - [`opentelemetry-prometheus`] provides a pipeline and exporter for sending","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4613,"byte_end":4692,"line_start":137,"line_end":137,"column_start":1,"column_end":80}},{"value":"/   metrics information to [`Prometheus`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4693,"byte_end":4737,"line_start":138,"line_end":138,"column_start":1,"column_end":45}},{"value":"/ - [`opentelemetry-zipkin`] provides a pipeline and exporter for sending","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4738,"byte_end":4813,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/   trace information to [`Zipkin`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4814,"byte_end":4852,"line_start":140,"line_end":140,"column_start":1,"column_end":39}},{"value":"/ - [`opentelemetry-datadog`] provides additional exporters to [`Datadog`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4853,"byte_end":4930,"line_start":141,"line_end":141,"column_start":1,"column_end":78}},{"value":"/ - [`opentelemetry-aws`] provides unofficial propagators for AWS X-ray.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":4931,"byte_end":5005,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"/ - [`opentelemetry-contrib`] provides additional exporters and propagators that are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5006,"byte_end":5092,"line_start":143,"line_end":143,"column_start":1,"column_end":87}},{"value":"/   experimental.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5093,"byte_end":5112,"line_start":144,"line_end":144,"column_start":1,"column_end":20}},{"value":"/ - [`opentelemetry-semantic-conventions`] provides standard names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5113,"byte_end":5185,"line_start":145,"line_end":145,"column_start":1,"column_end":73}},{"value":"/   semantic otel conventions.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5186,"byte_end":5218,"line_start":146,"line_end":146,"column_start":1,"column_end":33}},{"value":"/ - [`opentelemetry-stackdriver`] provides an exporter for Google's [Cloud Trace]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5219,"byte_end":5302,"line_start":147,"line_end":147,"column_start":1,"column_end":84}},{"value":"/   (which used to be called StackDriver).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5303,"byte_end":5347,"line_start":148,"line_end":148,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5348,"byte_end":5351,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ Additionally, there are also several third-party crates which are not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5352,"byte_end":5425,"line_start":150,"line_end":150,"column_start":1,"column_end":74}},{"value":"/ maintained by the `opentelemetry` project. These include:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5426,"byte_end":5487,"line_start":151,"line_end":151,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5488,"byte_end":5491,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ - [`tracing-opentelemetry`] provides integration for applications","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5492,"byte_end":5561,"line_start":153,"line_end":153,"column_start":1,"column_end":70}},{"value":"/   instrumented using the [`tracing`] API and ecosystem.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5562,"byte_end":5621,"line_start":154,"line_end":154,"column_start":1,"column_end":60}},{"value":"/ - [`actix-web-opentelemetry`] provides integration for the [`actix-web`] web","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5622,"byte_end":5702,"line_start":155,"line_end":155,"column_start":1,"column_end":81}},{"value":"/   server and ecosystem.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5703,"byte_end":5730,"line_start":156,"line_end":156,"column_start":1,"column_end":28}},{"value":"/ - [`opentelemetry-application-insights`] provides an unofficial [Azure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5731,"byte_end":5805,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/   Application Insights] exporter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5806,"byte_end":5843,"line_start":158,"line_end":158,"column_start":1,"column_end":38}},{"value":"/ - [`opentelemetry-tide`] provides integration for the [`Tide`] web server","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5844,"byte_end":5921,"line_start":159,"line_end":159,"column_start":1,"column_end":78}},{"value":"/   and ecosystem.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5922,"byte_end":5942,"line_start":160,"line_end":160,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5943,"byte_end":5946,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ If you're the maintainer of an `opentelemetry` ecosystem crate not listed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":5947,"byte_end":6024,"line_start":162,"line_end":162,"column_start":1,"column_end":78}},{"value":"/ above, please let us know! We'd love to add your project to the list!","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6025,"byte_end":6098,"line_start":163,"line_end":163,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6099,"byte_end":6102,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ [`open-telemetry/opentelemetry-rust`]: https://github.com/open-telemetry/opentelemetry-rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6103,"byte_end":6198,"line_start":165,"line_end":165,"column_start":1,"column_end":96}},{"value":"/ [`opentelemetry-jaeger`]: https://crates.io/crates/opentelemetry-jaeger","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6199,"byte_end":6274,"line_start":166,"line_end":166,"column_start":1,"column_end":76}},{"value":"/ [`Jaeger`]: https://www.jaegertracing.io","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6275,"byte_end":6319,"line_start":167,"line_end":167,"column_start":1,"column_end":45}},{"value":"/ [`opentelemetry-otlp`]: https://crates.io/crates/opentelemetry-otlp","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6320,"byte_end":6391,"line_start":168,"line_end":168,"column_start":1,"column_end":72}},{"value":"/ [`opentelemetry-http`]: https://crates.io/crates/opentelemetry-http","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6392,"byte_end":6463,"line_start":169,"line_end":169,"column_start":1,"column_end":72}},{"value":"/ [`opentelemetry-prometheus`]: https://crates.io/crates/opentelemetry-prometheus","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6464,"byte_end":6547,"line_start":170,"line_end":170,"column_start":1,"column_end":84}},{"value":"/ [`opentelemetry-aws`]: https://crates.io/crates/opentelemetry-aws","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6548,"byte_end":6617,"line_start":171,"line_end":171,"column_start":1,"column_end":70}},{"value":"/ [`Prometheus`]: https://prometheus.io","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6618,"byte_end":6659,"line_start":172,"line_end":172,"column_start":1,"column_end":42}},{"value":"/ [`opentelemetry-zipkin`]: https://crates.io/crates/opentelemetry-zipkin","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6660,"byte_end":6735,"line_start":173,"line_end":173,"column_start":1,"column_end":76}},{"value":"/ [`http`]: https://crates.io/crates/http","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6736,"byte_end":6779,"line_start":174,"line_end":174,"column_start":1,"column_end":44}},{"value":"/ [`Zipkin`]: https://zipkin.io","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6780,"byte_end":6813,"line_start":175,"line_end":175,"column_start":1,"column_end":34}},{"value":"/ [`opentelemetry-contrib`]: https://crates.io/crates/opentelemetry-contrib","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6814,"byte_end":6891,"line_start":176,"line_end":176,"column_start":1,"column_end":78}},{"value":"/ [`opentelemetry-datadog`]: https://crates.io/crates/opentelemetry-datadog","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6892,"byte_end":6969,"line_start":177,"line_end":177,"column_start":1,"column_end":78}},{"value":"/ [`Datadog`]: https://www.datadoghq.com","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":6970,"byte_end":7012,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/ [`opentelemetry-semantic-conventions`]: https://crates.io/crates/opentelemetry-semantic-conventions","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7013,"byte_end":7116,"line_start":179,"line_end":179,"column_start":1,"column_end":104}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7117,"byte_end":7120,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ [`tracing-opentelemetry`]: https://crates.io/crates/tracing-opentelemetry","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7121,"byte_end":7198,"line_start":181,"line_end":181,"column_start":1,"column_end":78}},{"value":"/ [`tracing`]: https://crates.io/crates/tracing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7199,"byte_end":7248,"line_start":182,"line_end":182,"column_start":1,"column_end":50}},{"value":"/ [`actix-web-opentelemetry`]: https://crates.io/crates/actix-web-opentelemetry","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7249,"byte_end":7330,"line_start":183,"line_end":183,"column_start":1,"column_end":82}},{"value":"/ [`actix-web`]: https://crates.io/crates/actix-web","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7331,"byte_end":7384,"line_start":184,"line_end":184,"column_start":1,"column_end":54}},{"value":"/ [`opentelemetry-application-insights`]: https://crates.io/crates/opentelemetry-application-insights","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7385,"byte_end":7488,"line_start":185,"line_end":185,"column_start":1,"column_end":104}},{"value":"/ [Azure Application Insights]: https://docs.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7489,"byte_end":7601,"line_start":186,"line_end":186,"column_start":1,"column_end":113}},{"value":"/ [`opentelemetry-tide`]: https://crates.io/crates/opentelemetry-tide","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7602,"byte_end":7673,"line_start":187,"line_end":187,"column_start":1,"column_end":72}},{"value":"/ [`Tide`]: https://crates.io/crates/tide","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7674,"byte_end":7717,"line_start":188,"line_end":188,"column_start":1,"column_end":44}},{"value":"/ [`opentelemetry-stackdriver`]: https://crates.io/crates/opentelemetry-stackdriver","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7718,"byte_end":7803,"line_start":189,"line_end":189,"column_start":1,"column_end":86}},{"value":"/ [Cloud Trace]: https://cloud.google.com/trace/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7804,"byte_end":7854,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7855,"byte_end":7858,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ ## Supported Rust Versions","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7859,"byte_end":7889,"line_start":192,"line_end":192,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7890,"byte_end":7893,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ OpenTelemetry is built against the latest stable release. The minimum","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7894,"byte_end":7967,"line_start":194,"line_end":194,"column_start":1,"column_end":74}},{"value":"/ supported version is 1.46. The current OpenTelemetry version is not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":7968,"byte_end":8039,"line_start":195,"line_end":195,"column_start":1,"column_end":72}},{"value":"/ guaranteed to build on Rust versions earlier than the minimum supported","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8040,"byte_end":8115,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ version.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8116,"byte_end":8128,"line_start":197,"line_end":197,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8129,"byte_end":8132,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ The current stable Rust compiler and the three most recent minor versions","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8133,"byte_end":8210,"line_start":199,"line_end":199,"column_start":1,"column_end":78}},{"value":"/ before it will always be supported. For example, if the current stable","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8211,"byte_end":8285,"line_start":200,"line_end":200,"column_start":1,"column_end":75}},{"value":"/ compiler version is 1.49, the minimum supported version will not be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8286,"byte_end":8357,"line_start":201,"line_end":201,"column_start":1,"column_end":72}},{"value":"/ increased past 1.46, three minor versions prior. Increasing the minimum","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8358,"byte_end":8433,"line_start":202,"line_end":202,"column_start":1,"column_end":76}},{"value":"/ supported compiler version is not considered a semver breaking change as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8434,"byte_end":8510,"line_start":203,"line_end":203,"column_start":1,"column_end":77}},{"value":"/ long as doing so complies with this policy.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8511,"byte_end":8558,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"warn(future_incompatible, missing_debug_implementations, missing_docs,\nnonstandard_style, rust_2018_idioms, unreachable_pub, unused)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8559,"byte_end":8725,"line_start":205,"line_end":213,"column_start":1,"column_end":3}},{"value":"allow(clippy :: needless_doctest_main)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":8726,"byte_end":8766,"line_start":214,"line_end":214,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"global","qualname":"::global","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":25},{"krate":0,"index":43},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":208},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223}],"decl_id":null,"docs":" Utilities for working with global telemetry primitives","sig":null,"attributes":[{"value":"/ Utilities for working with global telemetry primitives","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":9985,"byte_end":10043,"line_start":1,"line_end":1,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10044,"byte_end":10047,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ## Global Trace API","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10048,"byte_end":10071,"line_start":3,"line_end":3,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10072,"byte_end":10075,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The global trace API **provides applications access to their configured","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10076,"byte_end":10151,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ [`TracerProvider`] instance from anywhere in the codebase**. This allows","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10152,"byte_end":10228,"line_start":6,"line_end":6,"column_start":1,"column_end":77}},{"value":"/ applications to be less coupled to the specific Open Telemetry SDK while not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10229,"byte_end":10309,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ manually passing references to each part of the code that needs to create","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10310,"byte_end":10387,"line_start":8,"line_end":8,"column_start":1,"column_end":78}},{"value":"/ [`Span`]s. Additionally, **3rd party middleware** or **library code** can be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10388,"byte_end":10468,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ written against this generic API and not constrain users to a specific","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10469,"byte_end":10543,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/ implementation choice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10544,"byte_end":10570,"line_start":11,"line_end":11,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10571,"byte_end":10574,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Applications","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10575,"byte_end":10604,"line_start":13,"line_end":13,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10605,"byte_end":10608,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Applications configure their tracer either by [installing a trace pipeline],","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10609,"byte_end":10689,"line_start":15,"line_end":15,"column_start":1,"column_end":81}},{"value":"/ or calling [`set_tracer_provider`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10690,"byte_end":10729,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10730,"byte_end":10733,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10734,"byte_end":10741,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10742,"byte_end":10771,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10772,"byte_end":10779,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::{Tracer, noop::NoopTracerProvider};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10780,"byte_end":10845,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::global;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10846,"byte_end":10876,"line_start":22,"line_end":22,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10877,"byte_end":10880,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ fn init_tracer() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10881,"byte_end":10903,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/     let provider = NoopTracerProvider::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10904,"byte_end":10953,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10954,"byte_end":10957,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     // Configure the global `TracerProvider` singleton when your app starts","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":10958,"byte_end":11037,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/     // (there is a no-op default if this is not set by your application)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11038,"byte_end":11114,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/     let _ = global::set_tracer_provider(provider);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11115,"byte_end":11169,"line_start":29,"line_end":29,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11170,"byte_end":11175,"line_start":30,"line_end":30,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11176,"byte_end":11179,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ fn do_something_tracked() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11180,"byte_end":11211,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/     // Then you can get a named tracer instance anywhere in your codebase.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11212,"byte_end":11290,"line_start":33,"line_end":33,"column_start":1,"column_end":79}},{"value":"/     let tracer = global::tracer(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11291,"byte_end":11343,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11344,"byte_end":11347,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11348,"byte_end":11391,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11392,"byte_end":11431,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11432,"byte_end":11443,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11444,"byte_end":11449,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11450,"byte_end":11453,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // in main or other app start","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11454,"byte_end":11487,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/ let _ = init_tracer();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11488,"byte_end":11514,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/ do_something_tracked();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11515,"byte_end":11542,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11543,"byte_end":11550,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11551,"byte_end":11558,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11559,"byte_end":11562,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Libraries","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11563,"byte_end":11589,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11590,"byte_end":11593,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11594,"byte_end":11601,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11602,"byte_end":11631,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11632,"byte_end":11639,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::{Tracer, TracerProvider};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11640,"byte_end":11695,"line_start":52,"line_end":52,"column_start":1,"column_end":56}},{"value":"/ use opentelemetry::global;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11696,"byte_end":11726,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11727,"byte_end":11730,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ pub fn my_traced_library_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11731,"byte_end":11772,"line_start":55,"line_end":55,"column_start":1,"column_end":42}},{"value":"/     // End users of your library will configure their global tracer provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11773,"byte_end":11853,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/     // so you can use the global tracer without any setup","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11854,"byte_end":11915,"line_start":57,"line_end":57,"column_start":1,"column_end":62}},{"value":"/     let tracer = global::tracer_provider().versioned_tracer(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11916,"byte_end":11980,"line_start":58,"line_end":58,"column_start":1,"column_end":65}},{"value":"/         \"my-library-name\",","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":11981,"byte_end":12011,"line_start":59,"line_end":59,"column_start":1,"column_end":31}},{"value":"/         Some(env!(\"CARGO_PKG_VERSION\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12012,"byte_end":12056,"line_start":60,"line_end":60,"column_start":1,"column_end":45}},{"value":"/         None,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12057,"byte_end":12074,"line_start":61,"line_end":61,"column_start":1,"column_end":18}},{"value":"/     );","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12075,"byte_end":12085,"line_start":62,"line_end":62,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12086,"byte_end":12089,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_library_work\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12090,"byte_end":12141,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/         // Traced library logic here...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12142,"byte_end":12185,"line_start":65,"line_end":65,"column_start":1,"column_end":44}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12186,"byte_end":12197,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12198,"byte_end":12203,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12204,"byte_end":12211,"line_start":68,"line_end":68,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12212,"byte_end":12219,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12220,"byte_end":12223,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ [installing a trace pipeline]: crate::sdk::export::trace::stdout::PipelineBuilder::install_simple","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12224,"byte_end":12325,"line_start":71,"line_end":71,"column_start":1,"column_end":102}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12326,"byte_end":12378,"line_start":72,"line_end":72,"column_start":1,"column_end":53}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12379,"byte_end":12411,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12412,"byte_end":12415,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ## Global Metrics API","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12416,"byte_end":12441,"line_start":75,"line_end":75,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12442,"byte_end":12445,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ The global metrics API **provides applications access to their configured","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12446,"byte_end":12523,"line_start":77,"line_end":77,"column_start":1,"column_end":78}},{"value":"/ [`MeterProvider`] instance from anywhere in the codebase**. This allows","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12524,"byte_end":12599,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/ applications to be less coupled to the specific Open Telemetry SDK while not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12600,"byte_end":12680,"line_start":79,"line_end":79,"column_start":1,"column_end":81}},{"value":"/ manually passing references to each part of the code that needs to create","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12681,"byte_end":12758,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ metric instruments. Additionally, **3rd party middleware** or **library code** can be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12759,"byte_end":12848,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/ written against this generic API and not constrain users to a specific","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12849,"byte_end":12923,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ implementation choice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12924,"byte_end":12950,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12951,"byte_end":12954,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Applications","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12955,"byte_end":12984,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12985,"byte_end":12988,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Applications configure their meter either by [installing a metrics pipeline],","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":12989,"byte_end":13070,"line_start":87,"line_end":87,"column_start":1,"column_end":82}},{"value":"/ or calling [`set_meter_provider`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13071,"byte_end":13109,"line_start":88,"line_end":88,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13110,"byte_end":13113,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13114,"byte_end":13121,"line_start":90,"line_end":90,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"metrics\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13122,"byte_end":13153,"line_start":91,"line_end":91,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13154,"byte_end":13161,"line_start":92,"line_end":92,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::metrics::{Meter, noop::NoopMeterProvider};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13162,"byte_end":13227,"line_start":93,"line_end":93,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::{global, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13228,"byte_end":13270,"line_start":94,"line_end":94,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13271,"byte_end":13274,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ fn init_meter() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13275,"byte_end":13296,"line_start":96,"line_end":96,"column_start":1,"column_end":22}},{"value":"/     let provider = NoopMeterProvider::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13297,"byte_end":13345,"line_start":97,"line_end":97,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13346,"byte_end":13349,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/     // Configure the global `MeterProvider` singleton when your app starts","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13350,"byte_end":13428,"line_start":99,"line_end":99,"column_start":1,"column_end":79}},{"value":"/     // (there is a no-op default if this is not set by your application)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13429,"byte_end":13505,"line_start":100,"line_end":100,"column_start":1,"column_end":77}},{"value":"/     global::set_meter_provider(provider)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13506,"byte_end":13550,"line_start":101,"line_end":101,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13551,"byte_end":13556,"line_start":102,"line_end":102,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13557,"byte_end":13560,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ fn do_something_instrumented() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13561,"byte_end":13597,"line_start":104,"line_end":104,"column_start":1,"column_end":37}},{"value":"/     // Then you can get a named tracer instance anywhere in your codebase.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13598,"byte_end":13676,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"/     let meter = global::meter(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13677,"byte_end":13727,"line_start":106,"line_end":106,"column_start":1,"column_end":51}},{"value":"/     let counter = meter.u64_counter(\"my_counter\").init();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13728,"byte_end":13789,"line_start":107,"line_end":107,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13790,"byte_end":13793,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/     // record metrics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13794,"byte_end":13819,"line_start":109,"line_end":109,"column_start":1,"column_end":26}},{"value":"/     counter.add(1, &[KeyValue::new(\"mykey\", \"myvalue\")]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13820,"byte_end":13881,"line_start":110,"line_end":110,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13882,"byte_end":13887,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13888,"byte_end":13891,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ // in main or other app start","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13892,"byte_end":13925,"line_start":113,"line_end":113,"column_start":1,"column_end":34}},{"value":"/ init_meter();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13926,"byte_end":13943,"line_start":114,"line_end":114,"column_start":1,"column_end":18}},{"value":"/ do_something_instrumented();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13944,"byte_end":13976,"line_start":115,"line_end":115,"column_start":1,"column_end":33}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13977,"byte_end":13984,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13985,"byte_end":13992,"line_start":117,"line_end":117,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13993,"byte_end":13996,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ ### Usage in Libraries","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":13997,"byte_end":14023,"line_start":119,"line_end":119,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14024,"byte_end":14027,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14028,"byte_end":14035,"line_start":121,"line_end":121,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"metrics\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14036,"byte_end":14067,"line_start":122,"line_end":122,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14068,"byte_end":14075,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14076,"byte_end":14118,"line_start":124,"line_end":124,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14119,"byte_end":14122,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ pub fn my_traced_library_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14123,"byte_end":14164,"line_start":126,"line_end":126,"column_start":1,"column_end":42}},{"value":"/     // End users of your library will configure their global meter provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14165,"byte_end":14244,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/     // so you can use the global meter without any setup","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14245,"byte_end":14305,"line_start":128,"line_end":128,"column_start":1,"column_end":61}},{"value":"/     let tracer = global::meter(\"my-library-name\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14306,"byte_end":14360,"line_start":129,"line_end":129,"column_start":1,"column_end":55}},{"value":"/     let counter = tracer.u64_counter(\"my_counter\").init();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14361,"byte_end":14423,"line_start":130,"line_end":130,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14424,"byte_end":14427,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/     // record metrics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14428,"byte_end":14453,"line_start":132,"line_end":132,"column_start":1,"column_end":26}},{"value":"/     counter.add(1, &[KeyValue::new(\"mykey\", \"myvalue\")]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14454,"byte_end":14515,"line_start":133,"line_end":133,"column_start":1,"column_end":62}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14516,"byte_end":14521,"line_start":134,"line_end":134,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14522,"byte_end":14529,"line_start":135,"line_end":135,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14530,"byte_end":14537,"line_start":136,"line_end":136,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14538,"byte_end":14541,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ [installing a metrics pipeline]: crate::sdk::export::metrics::stdout::StdoutExporterBuilder::init","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14542,"byte_end":14643,"line_start":138,"line_end":138,"column_start":1,"column_end":102}},{"value":"/ [`MeterProvider`]: crate::metrics::MeterProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14644,"byte_end":14696,"line_start":139,"line_end":139,"column_start":1,"column_end":53}},{"value":"/ [`set_meter_provider`]: crate::global::set_meter_provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/mod.rs","byte_start":14697,"byte_end":14758,"line_start":140,"line_end":140,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2243},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16217,"byte_end":16222,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"Trace","qualname":"::global::error_handler::Error::Trace","value":"Error::Trace(TraceError)","parent":{"krate":0,"index":2224},"children":[],"decl_id":null,"docs":" Failed to export traces.\n","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16075,"byte_end":16100,"line_start":18,"line_end":18,"column_start":5,"column_end":30}},{"value":"error(transparent)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16158,"byte_end":16179,"line_start":20,"line_end":20,"column_start":5,"column_end":26}},{"value":"/ Failed to export traces.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16184,"byte_end":16212,"line_start":21,"line_end":21,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2245},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16231,"byte_end":16241,"line_start":22,"line_end":22,"column_start":19,"column_end":29},"name":"0","qualname":"::global::error_handler::Error::Trace::0","value":"trace::TraceError","parent":{"krate":0,"index":2243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16223,"byte_end":16230,"line_start":22,"line_end":22,"column_start":11,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2246},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16529,"byte_end":16534,"line_start":30,"line_end":30,"column_start":5,"column_end":10},"name":"Other","qualname":"::global::error_handler::Error::Other","value":"Error::Other(String)","parent":{"krate":0,"index":2224},"children":[],"decl_id":null,"docs":" Other types of failures not covered by the variants above.\n","sig":null,"attributes":[{"value":"error(\"{0}\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16442,"byte_end":16457,"line_start":28,"line_end":28,"column_start":5,"column_end":20}},{"value":"/ Other types of failures not covered by the variants above.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16462,"byte_end":16524,"line_start":29,"line_end":29,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16535,"byte_end":16541,"line_start":30,"line_end":30,"column_start":11,"column_end":17},"name":"0","qualname":"::global::error_handler::Error::Other::0","value":"std::string::String","parent":{"krate":0,"index":2246},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2224},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16063,"byte_end":16068,"line_start":17,"line_end":17,"column_start":10,"column_end":15},"name":"Error","qualname":"::global::error_handler::Error","value":"enum Error { Trace(TraceError), Other(String), }","parent":null,"children":[{"krate":0,"index":2243},{"krate":0,"index":2246}],"decl_id":null,"docs":" Wrapper for error from both tracing and metrics part of open telemetry.\n","sig":null,"attributes":[{"value":"/ Wrapper for error from both tracing and metrics part of open telemetry.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":15925,"byte_end":16000,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"non_exhaustive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16036,"byte_end":16053,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16595,"byte_end":16599,"line_start":34,"line_end":34,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(PoisonError<T>) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":20},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16838,"byte_end":16850,"line_start":44,"line_end":44,"column_start":8,"column_end":20},"name":"handle_error","qualname":"::global::error_handler::handle_error","value":"fn handle_error<T>(T) where T: Into<Error>","parent":null,"children":[],"decl_id":null,"docs":" Handle error using the globally configured error handler.","sig":null,"attributes":[{"value":"/ Handle error using the globally configured error handler.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16734,"byte_end":16795,"line_start":41,"line_end":41,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16796,"byte_end":16799,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Writes to stderr if unset.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16800,"byte_end":16830,"line_start":43,"line_end":43,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":22},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":17573,"byte_end":17590,"line_start":60,"line_end":60,"column_start":8,"column_end":25},"name":"set_error_handler","qualname":"::global::error_handler::set_error_handler","value":"fn set_error_handler<F>(F) -> std::result::Result<(), Error> where\nF: Fn(Error) -> () + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Set global error handler.\n","sig":null,"attributes":[{"value":"/ Set global error handler.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":17536,"byte_end":17565,"line_start":59,"line_end":59,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":35},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18771,"byte_end":18794,"line_start":25,"line_end":25,"column_start":8,"column_end":31},"name":"set_text_map_propagator","qualname":"::global::propagation::set_text_map_propagator","value":"fn set_text_map_propagator<P>(P) where P: TextMapPropagator + Send + Sync +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Sets the given [`TextMapPropagator`] propagator as the current global propagator.","sig":null,"attributes":[{"value":"/ Sets the given [`TextMapPropagator`] propagator as the current global propagator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18374,"byte_end":18459,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18460,"byte_end":18463,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18464,"byte_end":18478,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18479,"byte_end":18482,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18483,"byte_end":18490,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, sdk::propagation::TraceContextPropagator};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18491,"byte_end":18565,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18566,"byte_end":18569,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // create your text map propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18570,"byte_end":18608,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/ let propagator = TraceContextPropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18609,"byte_end":18660,"line_start":20,"line_end":20,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18661,"byte_end":18664,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // assign it as the global propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18665,"byte_end":18706,"line_start":22,"line_end":22,"column_start":1,"column_end":42}},{"value":"/ global::set_text_map_propagator(propagator);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18707,"byte_end":18755,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":18756,"byte_end":18763,"line_start":24,"line_end":24,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19669,"byte_end":19692,"line_start":49,"line_end":49,"column_start":8,"column_end":31},"name":"get_text_map_propagator","qualname":"::global::propagation::get_text_map_propagator","value":"fn get_text_map_propagator<T, F>(F) -> T where\nF: for<'_> FnMut(&'_ dyn TextMapPropagator) -> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a closure with a reference to the current global [`TextMapPropagator`] propagator.","sig":null,"attributes":[{"value":"/ Executes a closure with a reference to the current global [`TextMapPropagator`] propagator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19002,"byte_end":19097,"line_start":31,"line_end":31,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19098,"byte_end":19101,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19102,"byte_end":19116,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19117,"byte_end":19120,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19121,"byte_end":19128,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{propagation::TextMapPropagator, global};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19129,"byte_end":19193,"line_start":36,"line_end":36,"column_start":1,"column_end":65}},{"value":"/ use opentelemetry::sdk::propagation::TraceContextPropagator;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19194,"byte_end":19258,"line_start":37,"line_end":37,"column_start":1,"column_end":65}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19259,"byte_end":19293,"line_start":38,"line_end":38,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19294,"byte_end":19297,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let example_carrier = HashMap::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19298,"byte_end":19339,"line_start":40,"line_end":40,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19340,"byte_end":19343,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // create your text map propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19344,"byte_end":19382,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/ let tc_propagator = TraceContextPropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19383,"byte_end":19437,"line_start":43,"line_end":43,"column_start":1,"column_end":55}},{"value":"/ global::set_text_map_propagator(tc_propagator);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19438,"byte_end":19489,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19490,"byte_end":19493,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ // use the global text map propagator to extract contexts","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19494,"byte_end":19555,"line_start":46,"line_end":46,"column_start":1,"column_end":62}},{"value":"/ let _cx = global::get_text_map_propagator(|propagator| propagator.extract(&example_carrier));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19556,"byte_end":19653,"line_start":47,"line_end":47,"column_start":1,"column_end":98}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/propagation.rs","byte_start":19654,"byte_end":19661,"line_start":48,"line_end":48,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":92},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20244,"byte_end":20258,"line_start":10,"line_end":10,"column_start":11,"column_end":25},"name":"ObjectSafeSpan","qualname":"::global::trace::ObjectSafeSpan","value":"ObjectSafeSpan","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20785,"byte_end":20809,"line_start":19,"line_end":19,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"::global::trace::ObjectSafeSpan::add_event_with_timestamp","value":"fn add_event_with_timestamp(&mut Self, Cow, SystemTime, Vec<KeyValue>)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" An API to record events at a specific time in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ An API to record events at a specific time in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20265,"byte_end":20345,"line_start":11,"line_end":11,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20350,"byte_end":20353,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ Events SHOULD preserve the order in which they're set. This will typically match","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20358,"byte_end":20442,"line_start":13,"line_end":13,"column_start":5,"column_end":89}},{"value":"/ the ordering of the events' timestamps.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20447,"byte_end":20490,"line_start":14,"line_end":14,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20495,"byte_end":20498,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20503,"byte_end":20587,"line_start":16,"line_end":16,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20592,"byte_end":20728,"line_start":17,"line_end":17,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20733,"byte_end":20777,"line_start":18,"line_end":18,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21141,"byte_end":21153,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"span_context","qualname":"::global::trace::ObjectSafeSpan::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns the `SpanContext` for the given `Span`. The returned value may be used even after\n the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`. The returned value may be used even after","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":20941,"byte_end":21034,"line_start":26,"line_end":26,"column_start":5,"column_end":98}},{"value":"/ the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21039,"byte_end":21133,"line_start":27,"line_end":27,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22361,"byte_end":22373,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"is_recording","qualname":"::global::trace::ObjectSafeSpan::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21183,"byte_end":21272,"line_start":30,"line_end":30,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21277,"byte_end":21357,"line_start":31,"line_end":31,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21362,"byte_end":21365,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ This flag SHOULD be used to avoid expensive computations of a `Span` attributes or events in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21370,"byte_end":21466,"line_start":33,"line_end":33,"column_start":5,"column_end":101}},{"value":"/ case when a `Span` is definitely not recorded. Note that any child span's recording is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21471,"byte_end":21561,"line_start":34,"line_end":34,"column_start":5,"column_end":95}},{"value":"/ determined independently from the value of this flag (typically based on the sampled flag of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21566,"byte_end":21662,"line_start":35,"line_end":35,"column_start":5,"column_end":101}},{"value":"/ a `TraceFlag` on `SpanContext`).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21667,"byte_end":21703,"line_start":36,"line_end":36,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21708,"byte_end":21711,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This flag may be true despite the entire trace being sampled out. This allows to record and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21716,"byte_end":21811,"line_start":38,"line_end":38,"column_start":5,"column_end":100}},{"value":"/ process information about the individual Span without sending it to the backend. An example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21816,"byte_end":21911,"line_start":39,"line_end":39,"column_start":5,"column_end":100}},{"value":"/ of this scenario may be recording and processing of all incoming requests for the processing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":21916,"byte_end":22012,"line_start":40,"line_end":40,"column_start":5,"column_end":101}},{"value":"/ and building of SLA/SLO latency charts while sending only a subset - sampled spans - to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22017,"byte_end":22112,"line_start":41,"line_end":41,"column_start":5,"column_end":100}},{"value":"/ backend. See also the sampling section of SDK design.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22117,"byte_end":22174,"line_start":42,"line_end":42,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22179,"byte_end":22182,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ Users of the API should only access the `is_recording` property when instrumenting code and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22187,"byte_end":22282,"line_start":44,"line_end":44,"column_start":5,"column_end":100}},{"value":"/ never access `SampledFlag` unless used in context propagators.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22287,"byte_end":22353,"line_start":45,"line_end":45,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23168,"byte_end":23181,"line_start":61,"line_end":61,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"::global::trace::ObjectSafeSpan::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" An API to set a single `Attribute` where the attribute properties are passed\n as arguments. To avoid extra allocations some implementations may offer a separate API for\n each of the possible value types.","sig":null,"attributes":[{"value":"/ An API to set a single `Attribute` where the attribute properties are passed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22395,"byte_end":22475,"line_start":48,"line_end":48,"column_start":5,"column_end":85}},{"value":"/ as arguments. To avoid extra allocations some implementations may offer a separate API for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22480,"byte_end":22574,"line_start":49,"line_end":49,"column_start":5,"column_end":99}},{"value":"/ each of the possible value types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22579,"byte_end":22616,"line_start":50,"line_end":50,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22621,"byte_end":22624,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ An `Attribute` is defined as a `KeyValue` pair.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22629,"byte_end":22680,"line_start":52,"line_end":52,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22685,"byte_end":22688,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Attributes SHOULD preserve the order in which they're set. Setting an attribute","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22693,"byte_end":22776,"line_start":54,"line_end":54,"column_start":5,"column_end":88}},{"value":"/ with the same key as an existing attribute SHOULD overwrite the existing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22781,"byte_end":22857,"line_start":55,"line_end":55,"column_start":5,"column_end":81}},{"value":"/ attribute's value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22862,"byte_end":22884,"line_start":56,"line_end":56,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22889,"byte_end":22892,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22897,"byte_end":22965,"line_start":58,"line_end":58,"column_start":5,"column_end":73}},{"value":"/ attributes\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":22970,"byte_end":23112,"line_start":59,"line_end":59,"column_start":5,"column_end":147}},{"value":"/ that have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23117,"byte_end":23160,"line_start":60,"line_end":60,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23652,"byte_end":23662,"line_start":70,"line_end":70,"column_start":8,"column_end":18},"name":"set_status","qualname":"::global::trace::ObjectSafeSpan::set_status","value":"fn set_status(&mut Self, StatusCode, String)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Sets the status of the `Span`. `message` MUST be ignored when the status is `OK` or\n `Unset`.","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. `message` MUST be ignored when the status is `OK` or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23220,"byte_end":23307,"line_start":63,"line_end":63,"column_start":5,"column_end":92}},{"value":"/ `Unset`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23312,"byte_end":23324,"line_start":64,"line_end":64,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23329,"byte_end":23332,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ The order of status is `Ok` > `Error` > `Unset`. That's means set the status","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23337,"byte_end":23417,"line_start":66,"line_end":66,"column_start":5,"column_end":85}},{"value":"/ to `Unset` will always be ignore, set the status to `Error` only works when current","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23422,"byte_end":23509,"line_start":67,"line_end":67,"column_start":5,"column_end":92}},{"value":"/ status is `Unset`, set the status to `Ok` will be consider final and any further call","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23514,"byte_end":23603,"line_start":68,"line_end":68,"column_start":5,"column_end":94}},{"value":"/ to this function will be ignore.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23608,"byte_end":23644,"line_start":69,"line_end":69,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24525,"byte_end":24536,"line_start":84,"line_end":84,"column_start":8,"column_end":19},"name":"update_name","qualname":"::global::trace::ObjectSafeSpan::update_name","value":"fn update_name(&mut Self, Cow)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Updates the `Span`'s name. After this update, any sampling behavior based on the\n name will depend on the implementation.","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name. After this update, any sampling behavior based on the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23715,"byte_end":23799,"line_start":72,"line_end":72,"column_start":5,"column_end":89}},{"value":"/ name will depend on the implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23804,"byte_end":23847,"line_start":73,"line_end":73,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23852,"byte_end":23855,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ It is highly discouraged to update the name of a `Span` after its creation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23860,"byte_end":23939,"line_start":75,"line_end":75,"column_start":5,"column_end":84}},{"value":"/ `Span` name is often used to group, filter and identify the logical groups of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":23944,"byte_end":24025,"line_start":76,"line_end":76,"column_start":5,"column_end":86}},{"value":"/ spans. Often, filtering logic will be implemented before the `Span` creation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24030,"byte_end":24110,"line_start":77,"line_end":77,"column_start":5,"column_end":85}},{"value":"/ for performance reasons, and the name update may interfere with this logic.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24115,"byte_end":24194,"line_start":78,"line_end":78,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24199,"byte_end":24202,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ The method name is called `update_name` to differentiate this method from the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24207,"byte_end":24288,"line_start":80,"line_end":80,"column_start":5,"column_end":86}},{"value":"/ regular property. It emphasizes that this operation signifies a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24293,"byte_end":24360,"line_start":81,"line_end":81,"column_start":5,"column_end":72}},{"value":"/ major change for a `Span` and may lead to re-calculation of sampling or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24365,"byte_end":24440,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"/ filtering decisions made previously depending on the implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24445,"byte_end":24517,"line_start":83,"line_end":83,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25009,"byte_end":25012,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"end","qualname":"::global::trace::ObjectSafeSpan::end","value":"fn end(&mut Self)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Finishes the `Span`.","sig":null,"attributes":[{"value":"/ Finishes the `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24583,"byte_end":24607,"line_start":86,"line_end":86,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24612,"byte_end":24615,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Implementations MUST ignore all subsequent calls to `end` (there might be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24620,"byte_end":24697,"line_start":88,"line_end":88,"column_start":5,"column_end":82}},{"value":"/ exceptions when the tracer is streaming events and has no mutable state","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24702,"byte_end":24777,"line_start":89,"line_end":89,"column_start":5,"column_end":80}},{"value":"/ associated with the Span).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24782,"byte_end":24812,"line_start":90,"line_end":90,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24817,"byte_end":24820,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Calls to `end` a Span MUST not have any effects on child `Span`s as they may","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24825,"byte_end":24905,"line_start":92,"line_end":92,"column_start":5,"column_end":85}},{"value":"/ still be running and can be ended later.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24910,"byte_end":24954,"line_start":93,"line_end":93,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24959,"byte_end":24962,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This API MUST be non-blocking.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":24967,"byte_end":25001,"line_start":95,"line_end":95,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25242,"byte_end":25260,"line_start":105,"line_end":105,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"::global::trace::ObjectSafeSpan::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":92},"children":[],"decl_id":null,"docs":" Finishes the `Span` with given timestamp","sig":null,"attributes":[{"value":"/ Finishes the `Span` with given timestamp","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25090,"byte_end":25134,"line_start":100,"line_end":100,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25139,"byte_end":25142,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ For more details, refer to [`Span::end`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25147,"byte_end":25191,"line_start":102,"line_end":102,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25196,"byte_end":25199,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ [`Span::end`]: Span::end()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25204,"byte_end":25234,"line_start":104,"line_end":104,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25350,"byte_end":25374,"line_start":109,"line_end":109,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"<T as global::trace::ObjectSafeSpan>::add_event_with_timestamp","value":"fn add_event_with_timestamp(&mut Self, Cow, SystemTime, Vec<KeyValue>)","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":93},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25583,"byte_end":25595,"line_start":118,"line_end":118,"column_start":8,"column_end":20},"name":"span_context","qualname":"<T as global::trace::ObjectSafeSpan>::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":94},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25663,"byte_end":25675,"line_start":122,"line_end":122,"column_start":8,"column_end":20},"name":"is_recording","qualname":"<T as global::trace::ObjectSafeSpan>::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":95},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25735,"byte_end":25748,"line_start":126,"line_end":126,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"<T as global::trace::ObjectSafeSpan>::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":96},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25835,"byte_end":25845,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"set_status","qualname":"<T as global::trace::ObjectSafeSpan>::set_status","value":"fn set_status(&mut Self, StatusCode, String)","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":97},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25947,"byte_end":25958,"line_start":134,"line_end":134,"column_start":8,"column_end":19},"name":"update_name","qualname":"<T as global::trace::ObjectSafeSpan>::update_name","value":"fn update_name(&mut Self, Cow)","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26050,"byte_end":26068,"line_start":138,"line_end":138,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"<T as global::trace::ObjectSafeSpan>::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":92},"children":[],"decl_id":{"krate":0,"index":100},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26333,"byte_end":26342,"line_start":147,"line_end":147,"column_start":12,"column_end":21},"name":"BoxedSpan","qualname":"::global::trace::BoxedSpan","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the [`BoxedTracer`]'s [`Span`] so it can be used generically by\n applications without knowing the underlying type.","sig":null,"attributes":[{"value":"/ Wraps the [`BoxedTracer`]'s [`Span`] so it can be used generically by","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26157,"byte_end":26230,"line_start":143,"line_end":143,"column_start":1,"column_end":74}},{"value":"/ applications without knowing the underlying type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26231,"byte_end":26284,"line_start":144,"line_end":144,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26285,"byte_end":26288,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26289,"byte_end":26321,"line_start":146,"line_end":146,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26592,"byte_end":26595,"line_start":159,"line_end":159,"column_start":8,"column_end":11},"name":"fmt","qualname":"<BoxedSpan as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27093,"byte_end":27117,"line_start":170,"line_end":170,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"<BoxedSpan as trace::span::Span>::add_event_with_timestamp","value":"fn add_event_with_timestamp<T>(&mut Self, T, SystemTime, Vec<KeyValue>) where\nT: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1889},"docs":" Records events at a specific time in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ Records events at a specific time in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26727,"byte_end":26798,"line_start":165,"line_end":165,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26803,"byte_end":26806,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26811,"byte_end":26895,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26900,"byte_end":27036,"line_start":168,"line_end":168,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27041,"byte_end":27085,"line_start":169,"line_end":169,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27437,"byte_end":27449,"line_start":183,"line_end":183,"column_start":8,"column_end":20},"name":"span_context","qualname":"<BoxedSpan as trace::span::Span>::span_context","value":"fn span_context(&Self) -> &trace::SpanContext","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1891},"docs":" Returns the `SpanContext` for the given `Span`.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27378,"byte_end":27429,"line_start":182,"line_end":182,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27705,"byte_end":27717,"line_start":189,"line_end":189,"column_start":8,"column_end":20},"name":"is_recording","qualname":"<BoxedSpan as trace::span::Span>::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1892},"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.\n","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27523,"byte_end":27612,"line_start":187,"line_end":187,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27617,"byte_end":27697,"line_start":188,"line_end":188,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28145,"byte_end":28158,"line_start":198,"line_end":198,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"<BoxedSpan as trace::span::Span>::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1893},"docs":" Sets a single `Attribute` where the attribute properties are passed as arguments.","sig":null,"attributes":[{"value":"/ Sets a single `Attribute` where the attribute properties are passed as arguments.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27776,"byte_end":27861,"line_start":193,"line_end":193,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27866,"byte_end":27869,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27874,"byte_end":27942,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ attributes\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":27947,"byte_end":28089,"line_start":196,"line_end":196,"column_start":5,"column_end":147}},{"value":"/ that have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28094,"byte_end":28137,"line_start":197,"line_end":197,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28367,"byte_end":28377,"line_start":204,"line_end":204,"column_start":8,"column_end":18},"name":"set_status","qualname":"<BoxedSpan as trace::span::Span>::set_status","value":"fn set_status(&mut Self, trace::StatusCode, String)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1894},"docs":" Sets the status of the `Span`. If used, this will override the default `Span`\n status, which is `Unset`.\n","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. If used, this will override the default `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28244,"byte_end":28325,"line_start":202,"line_end":202,"column_start":5,"column_end":86}},{"value":"/ status, which is `Unset`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28330,"byte_end":28359,"line_start":203,"line_end":203,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28523,"byte_end":28534,"line_start":209,"line_end":209,"column_start":8,"column_end":19},"name":"update_name","qualname":"<BoxedSpan as trace::span::Span>::update_name","value":"fn update_name<T>(&mut Self, T) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1895},"docs":" Updates the `Span`'s name.\n","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28485,"byte_end":28515,"line_start":208,"line_end":208,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28720,"byte_end":28738,"line_start":217,"line_end":217,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"<BoxedSpan as trace::span::Span>::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1898},"docs":" Finishes the span with given timestamp.\n","sig":null,"attributes":[{"value":"/ Finishes the span with given timestamp.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28669,"byte_end":28712,"line_start":216,"line_end":216,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29087,"byte_end":29098,"line_start":227,"line_end":227,"column_start":12,"column_end":23},"name":"BoxedTracer","qualname":"::global::trace::BoxedTracer","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wraps the [`GlobalTracerProvider`]'s [`Tracer`] so it can be used generically by\n applications without knowing the underlying type.","sig":null,"attributes":[{"value":"/ Wraps the [`GlobalTracerProvider`]'s [`Tracer`] so it can be used generically by","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28830,"byte_end":28914,"line_start":222,"line_end":222,"column_start":1,"column_end":85}},{"value":"/ applications without knowing the underlying type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28915,"byte_end":28968,"line_start":223,"line_end":223,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28969,"byte_end":28972,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":28973,"byte_end":29009,"line_start":225,"line_end":225,"column_start":1,"column_end":37}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29010,"byte_end":29075,"line_start":226,"line_end":226,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29183,"byte_end":29186,"line_start":230,"line_end":230,"column_start":8,"column_end":11},"name":"fmt","qualname":"<BoxedTracer as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29901,"byte_end":29919,"line_start":247,"line_end":247,"column_start":8,"column_end":26},"name":"start_with_context","qualname":"<BoxedTracer as trace::tracer::Tracer>::start_with_context","value":"fn start_with_context<T>(&Self, T, &Context) -> Self::Span where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2066},"docs":" Starts a new `Span`.","sig":null,"attributes":[{"value":"/ Starts a new `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29497,"byte_end":29521,"line_start":240,"line_end":240,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29526,"byte_end":29529,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29534,"byte_end":29612,"line_start":242,"line_end":242,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29617,"byte_end":29695,"line_start":243,"line_end":243,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29700,"byte_end":29780,"line_start":244,"line_end":244,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29785,"byte_end":29865,"line_start":245,"line_end":245,"column_start":5,"column_end":85}},{"value":"/ spans in the trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29870,"byte_end":29893,"line_start":246,"line_end":246,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30241,"byte_end":30253,"line_start":257,"line_end":257,"column_start":8,"column_end":20},"name":"span_builder","qualname":"<BoxedTracer as trace::tracer::Tracer>::span_builder","value":"fn span_builder<T>(&Self, T) -> trace::SpanBuilder where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2068},"docs":" Creates a span builder","sig":null,"attributes":[{"value":"/ Creates a span builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30112,"byte_end":30138,"line_start":254,"line_end":254,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30143,"byte_end":30146,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ An ergonomic way for attributes to be configured before the `Span` is started.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30151,"byte_end":30233,"line_start":256,"line_end":256,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30448,"byte_end":30466,"line_start":265,"line_end":265,"column_start":8,"column_end":26},"name":"build_with_context","qualname":"<BoxedTracer as trace::tracer::Tracer>::build_with_context","value":"fn build_with_context(&Self, trace::SpanBuilder, &Context) -> Self::Span","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2071},"docs":" Create a span from a `SpanBuilder`\n","sig":null,"attributes":[{"value":"/ Create a span from a `SpanBuilder`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30402,"byte_end":30440,"line_start":264,"line_end":264,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30816,"byte_end":30832,"line_start":274,"line_end":274,"column_start":11,"column_end":27},"name":"ObjectSafeTracer","qualname":"::global::trace::ObjectSafeTracer","value":"ObjectSafeTracer","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142}],"decl_id":null,"docs":" Allows a specific [`Tracer`] to be used generically by [`BoxedTracer`]\n instances by mirroring the interface and boxing the return types.","sig":null,"attributes":[{"value":"/ Allows a specific [`Tracer`] to be used generically by [`BoxedTracer`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30620,"byte_end":30694,"line_start":270,"line_end":270,"column_start":1,"column_end":75}},{"value":"/ instances by mirroring the interface and boxing the return types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30695,"byte_end":30764,"line_start":271,"line_end":271,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30765,"byte_end":30768,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30769,"byte_end":30805,"line_start":273,"line_end":273,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30945,"byte_end":30969,"line_start":277,"line_end":277,"column_start":8,"column_end":32},"name":"start_with_context_boxed","qualname":"::global::trace::ObjectSafeTracer::start_with_context_boxed","value":"fn start_with_context_boxed(&Self, Cow, &Context)\n-> Box<dyn ObjectSafeSpan + Send + Sync>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30839,"byte_end":30913,"line_start":275,"line_end":275,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":30918,"byte_end":30937,"line_start":276,"line_end":276,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31207,"byte_end":31231,"line_start":285,"line_end":285,"column_start":8,"column_end":32},"name":"build_with_context_boxed","qualname":"::global::trace::ObjectSafeTracer::build_with_context_boxed","value":"fn build_with_context_boxed(&Self, trace::SpanBuilder, &Context)\n-> Box<dyn ObjectSafeSpan + Send + Sync>","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31101,"byte_end":31175,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31180,"byte_end":31199,"line_start":284,"line_end":284,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31593,"byte_end":31617,"line_start":299,"line_end":299,"column_start":8,"column_end":32},"name":"start_with_context_boxed","qualname":"<T as global::trace::ObjectSafeTracer>::start_with_context_boxed","value":"fn start_with_context_boxed(&Self, Cow, &Context)\n-> Box<dyn ObjectSafeSpan + Send + Sync>","parent":{"krate":0,"index":140},"children":[],"decl_id":{"krate":0,"index":141},"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31487,"byte_end":31561,"line_start":297,"line_end":297,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31566,"byte_end":31585,"line_start":298,"line_end":298,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31921,"byte_end":31945,"line_start":309,"line_end":309,"column_start":8,"column_end":32},"name":"build_with_context_boxed","qualname":"<T as global::trace::ObjectSafeTracer>::build_with_context_boxed","value":"fn build_with_context_boxed(&Self, trace::SpanBuilder, &Context)\n-> Box<dyn ObjectSafeSpan + Send + Sync>","parent":{"krate":0,"index":140},"children":[],"decl_id":{"krate":0,"index":142},"docs":" Returns a trait object so the underlying implementation can be swapped\n out at runtime.\n","sig":null,"attributes":[{"value":"/ Returns a trait object so the underlying implementation can be swapped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31815,"byte_end":31889,"line_start":307,"line_end":307,"column_start":5,"column_end":79}},{"value":"/ out at runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31894,"byte_end":31913,"line_start":308,"line_end":308,"column_start":5,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":148},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32437,"byte_end":32461,"line_start":323,"line_end":323,"column_start":11,"column_end":35},"name":"ObjectSafeTracerProvider","qualname":"::global::trace::ObjectSafeTracerProvider","value":"ObjectSafeTracerProvider","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150}],"decl_id":null,"docs":" Allows a specific [`TracerProvider`] to be used generically by the\n [`GlobalTracerProvider`] by mirroring the interface and boxing the return types.","sig":null,"attributes":[{"value":"/ Allows a specific [`TracerProvider`] to be used generically by the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32148,"byte_end":32218,"line_start":318,"line_end":318,"column_start":1,"column_end":71}},{"value":"/ [`GlobalTracerProvider`] by mirroring the interface and boxing the return types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32219,"byte_end":32303,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32304,"byte_end":32307,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32308,"byte_end":32360,"line_start":321,"line_end":321,"column_start":1,"column_end":53}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32361,"byte_end":32426,"line_start":322,"line_end":322,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32593,"byte_end":32615,"line_start":326,"line_end":326,"column_start":8,"column_end":30},"name":"versioned_tracer_boxed","qualname":"::global::trace::ObjectSafeTracerProvider::versioned_tracer_boxed","value":"fn versioned_tracer_boxed(&Self, Cow, Option<&'static str>,\nOption<&'static str>) -> Box<dyn ObjectSafeTracer + Send + Sync>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Creates a versioned named tracer instance that is a trait object through the underlying\n `TracerProvider`.\n","sig":null,"attributes":[{"value":"/ Creates a versioned named tracer instance that is a trait object through the underlying","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32468,"byte_end":32559,"line_start":324,"line_end":324,"column_start":5,"column_end":96}},{"value":"/ `TracerProvider`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32564,"byte_end":32585,"line_start":325,"line_end":325,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32883,"byte_end":32894,"line_start":334,"line_end":334,"column_start":8,"column_end":19},"name":"force_flush","qualname":"::global::trace::ObjectSafeTracerProvider::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":148},"children":[],"decl_id":null,"docs":" Force flush all remaining spans in span processors and return results.\n","sig":null,"attributes":[{"value":"/ Force flush all remaining spans in span processors and return results.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32801,"byte_end":32875,"line_start":333,"line_end":333,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33172,"byte_end":33194,"line_start":344,"line_end":344,"column_start":8,"column_end":30},"name":"versioned_tracer_boxed","qualname":"<P as global::trace::ObjectSafeTracerProvider>::versioned_tracer_boxed","value":"fn versioned_tracer_boxed(&Self, Cow, Option<&'static str>,\nOption<&'static str>) -> Box<dyn ObjectSafeTracer + Send + Sync>","parent":{"krate":0,"index":148},"children":[],"decl_id":{"krate":0,"index":149},"docs":" Return a versioned boxed tracer\n","sig":null,"attributes":[{"value":"/ Return a versioned boxed tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33129,"byte_end":33164,"line_start":343,"line_end":343,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33457,"byte_end":33468,"line_start":353,"line_end":353,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<P as global::trace::ObjectSafeTracerProvider>::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":148},"children":[],"decl_id":{"krate":0,"index":150},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2271},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33796,"byte_end":33816,"line_start":364,"line_end":364,"column_start":12,"column_end":32},"name":"GlobalTracerProvider","qualname":"::global::trace::GlobalTracerProvider","value":"GlobalTracerProvider {  }","parent":null,"children":[{"krate":0,"index":2272}],"decl_id":null,"docs":" Represents the globally configured [`TracerProvider`] instance for this\n application. This allows generic tracing through the returned\n [`BoxedTracer`] instances.","sig":null,"attributes":[{"value":"/ Represents the globally configured [`TracerProvider`] instance for this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33538,"byte_end":33613,"line_start":358,"line_end":358,"column_start":1,"column_end":76}},{"value":"/ application. This allows generic tracing through the returned","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33614,"byte_end":33679,"line_start":359,"line_end":359,"column_start":1,"column_end":66}},{"value":"/ [`BoxedTracer`] instances.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33680,"byte_end":33710,"line_start":360,"line_end":360,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33711,"byte_end":33714,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33715,"byte_end":33767,"line_start":362,"line_end":362,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33935,"byte_end":33938,"line_start":369,"line_end":369,"column_start":8,"column_end":11},"name":"fmt","qualname":"<GlobalTracerProvider as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34652,"byte_end":34668,"line_start":392,"line_end":392,"column_start":8,"column_end":24},"name":"versioned_tracer","qualname":"<GlobalTracerProvider as trace::tracer_provider::TracerProvider>::versioned_tracer","value":"fn versioned_tracer<impl Into<Cow<'static, str>>>(&Self,\nimpl Into<Cow<'static, str>>, Option<&'static str>, Option<&'static str>)\n-> Self::Tracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2115},"docs":" Create a versioned tracer using the global provider.\n","sig":null,"attributes":[{"value":"/ Create a versioned tracer using the global provider.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34588,"byte_end":34644,"line_start":391,"line_end":391,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35059,"byte_end":35070,"line_start":405,"line_end":405,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<GlobalTracerProvider as trace::tracer_provider::TracerProvider>::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2117},"docs":" Force flush all remaining spans in span processors and return results.\n","sig":null,"attributes":[{"value":"/ Force flush all remaining spans in span processors and return results.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34977,"byte_end":35051,"line_start":404,"line_end":404,"column_start":5,"column_end":79}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35624,"byte_end":35639,"line_start":420,"line_end":420,"column_start":8,"column_end":23},"name":"tracer_provider","qualname":"::global::trace::tracer_provider","value":"fn tracer_provider() -> GlobalTracerProvider","parent":null,"children":[],"decl_id":null,"docs":" Returns an instance of the currently configured global [`TracerProvider`] through\n [`GlobalTracerProvider`].","sig":null,"attributes":[{"value":"/ Returns an instance of the currently configured global [`TracerProvider`] through","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35378,"byte_end":35463,"line_start":415,"line_end":415,"column_start":1,"column_end":86}},{"value":"/ [`GlobalTracerProvider`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35464,"byte_end":35493,"line_start":416,"line_end":416,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35494,"byte_end":35497,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35498,"byte_end":35550,"line_start":418,"line_end":418,"column_start":1,"column_end":53}},{"value":"/ [`GlobalTracerProvider`]: crate::global::GlobalTracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35551,"byte_end":35616,"line_start":419,"line_end":419,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":170},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36097,"byte_end":36103,"line_start":434,"line_end":434,"column_start":8,"column_end":14},"name":"tracer","qualname":"::global::trace::tracer","value":"fn tracer<impl Into<Cow<'static, str>>>(impl Into<Cow<'static, str>>)\n-> BoxedTracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Creates a named instance of [`Tracer`] via the configured [`GlobalTracerProvider`].","sig":null,"attributes":[{"value":"/ Creates a named instance of [`Tracer`] via the configured [`GlobalTracerProvider`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35789,"byte_end":35876,"line_start":427,"line_end":427,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35877,"byte_end":35880,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ If the name is an empty string, the provider will use a default name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35881,"byte_end":35954,"line_start":429,"line_end":429,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35955,"byte_end":35958,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ This is a more convenient way of expressing `global::tracer_provider().tracer(name)`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":35959,"byte_end":36048,"line_start":431,"line_end":431,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36049,"byte_end":36052,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ [`Tracer`]: crate::trace::Tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36053,"byte_end":36089,"line_start":433,"line_end":433,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":172},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36516,"byte_end":36535,"line_start":444,"line_end":444,"column_start":8,"column_end":27},"name":"set_tracer_provider","qualname":"::global::trace::set_tracer_provider","value":"fn set_tracer_provider<P, T, S>(P) -> GlobalTracerProvider where\nS: trace::Span + Send + Sync + 'static, T: trace::Tracer<Span = S> + Send +\nSync + 'static, P: trace::TracerProvider<Tracer = T> + Send + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Sets the given [`TracerProvider`] instance as the current global provider.","sig":null,"attributes":[{"value":"/ Sets the given [`TracerProvider`] instance as the current global provider.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36202,"byte_end":36280,"line_start":438,"line_end":438,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36281,"byte_end":36284,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ It returns the [`TracerProvider`] instance that was previously mounted as global provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36285,"byte_end":36378,"line_start":440,"line_end":440,"column_start":1,"column_end":94}},{"value":"/ (e.g. [`NoopTracerProvider`] if a provider had not been set before).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36379,"byte_end":36451,"line_start":441,"line_end":441,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36452,"byte_end":36455,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36456,"byte_end":36508,"line_start":443,"line_end":443,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37171,"byte_end":37195,"line_start":461,"line_end":461,"column_start":8,"column_end":32},"name":"shutdown_tracer_provider","qualname":"::global::trace::shutdown_tracer_provider","value":"fn shutdown_tracer_provider()","parent":null,"children":[],"decl_id":null,"docs":" Shut down the current tracer provider. This will invoke the shutdown method on all span processors.\n span processors should export remaining spans before return\n","sig":null,"attributes":[{"value":"/ Shut down the current tracer provider. This will invoke the shutdown method on all span processors.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":36996,"byte_end":37099,"line_start":459,"line_end":459,"column_start":1,"column_end":104}},{"value":"/ span processors should export remaining spans before return","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37100,"byte_end":37163,"line_start":460,"line_end":460,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37671,"byte_end":37698,"line_start":477,"line_end":477,"column_start":8,"column_end":35},"name":"force_flush_tracer_provider","qualname":"::global::trace::force_flush_tracer_provider","value":"fn force_flush_tracer_provider()","parent":null,"children":[],"decl_id":null,"docs":" Force flush all remaining spans in span processors.","sig":null,"attributes":[{"value":"/ Force flush all remaining spans in span processors.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37459,"byte_end":37514,"line_start":472,"line_end":472,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37515,"byte_end":37518,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ Use the [`global::handle_error`] to handle errors happened during force flush.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37519,"byte_end":37601,"line_start":474,"line_end":474,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37602,"byte_end":37605,"line_start":475,"line_end":475,"column_start":1,"column_end":4}},{"value":"/ [`global::handle_error`]: crate::global::handle_error","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":37606,"byte_end":37663,"line_start":476,"line_end":476,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":226},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sdk","qualname":"::sdk","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","parent":null,"children":[{"krate":0,"index":227},{"krate":0,"index":331},{"krate":0,"index":338},{"krate":0,"index":491},{"krate":0,"index":641},{"krate":0,"index":1333},{"krate":0,"index":1336}],"decl_id":null,"docs":" # OpenTelemetry SDK","sig":null,"attributes":[{"value":"/ # OpenTelemetry SDK","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44187,"byte_end":44210,"line_start":1,"line_end":1,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44211,"byte_end":44214,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This SDK provides an opinionated reference implementation of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44215,"byte_end":44279,"line_start":3,"line_end":3,"column_start":1,"column_end":65}},{"value":"/ the OpenTelemetry API. The SDK implements the specifics of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44280,"byte_end":44342,"line_start":4,"line_end":4,"column_start":1,"column_end":63}},{"value":"/ deciding which data to collect through `Sampler`s, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44343,"byte_end":44401,"line_start":5,"line_end":5,"column_start":1,"column_end":59}},{"value":"/ facilitates the delivery of telemetry data to storage systems","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44402,"byte_end":44467,"line_start":6,"line_end":6,"column_start":1,"column_end":66}},{"value":"/ through `Exporter`s. These can be configured on `Tracer` and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44468,"byte_end":44532,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ `Meter` creation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44533,"byte_end":44554,"line_start":8,"line_end":8,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":227},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"export","qualname":"::sdk::export","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","parent":null,"children":[{"krate":0,"index":228},{"krate":0,"index":329}],"decl_id":null,"docs":" Metrics Export\n","sig":null,"attributes":[{"value":"/ Metrics Export","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":44975,"byte_end":44993,"line_start":1,"line_end":1,"column_start":1,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":228},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::sdk::export::trace","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":328},{"krate":0,"index":2321},{"krate":0,"index":2326},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2344},{"krate":0,"index":2345}],"decl_id":null,"docs":" Trace exporters\n","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45090,"byte_end":45115,"line_start":5,"line_end":5,"column_start":1,"column_end":26}},{"value":"/ Trace exporters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":45400,"byte_end":45419,"line_start":1,"line_end":1,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":270},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stdout","qualname":"::sdk::export::trace::stdout","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","parent":null,"children":[{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":289},{"krate":0,"index":292},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":2286},{"krate":0,"index":2291},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":314},{"krate":0,"index":320},{"krate":0,"index":2294},{"krate":0,"index":2298},{"krate":0,"index":323},{"krate":0,"index":2301},{"krate":0,"index":2318},{"krate":0,"index":2307},{"krate":0,"index":2312},{"krate":0,"index":2314},{"krate":0,"index":2316},{"krate":0,"index":326}],"decl_id":null,"docs":" # Stdout Span Exporter","sig":null,"attributes":[{"value":"/ # Stdout Span Exporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50508,"byte_end":50534,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50535,"byte_end":50538,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The stdout [`SpanExporter`] writes debug printed [`Span`]s to its configured","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50539,"byte_end":50619,"line_start":3,"line_end":3,"column_start":1,"column_end":81}},{"value":"/ [`Write`] instance. By default it will write to [`Stdout`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50620,"byte_end":50683,"line_start":4,"line_end":4,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50684,"byte_end":50687,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: super::SpanExporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50688,"byte_end":50729,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"/ [`Span`]: crate::trace::Span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50730,"byte_end":50762,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ [`Write`]: std::io::Write","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50763,"byte_end":50792,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/ [`Stdout`]: std::io::Stdout","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50793,"byte_end":50824,"line_start":9,"line_end":9,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50825,"byte_end":50828,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50829,"byte_end":50843,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50844,"byte_end":50847,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50848,"byte_end":50861,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ use opentelemetry::trace::Tracer;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50862,"byte_end":50899,"line_start":14,"line_end":14,"column_start":1,"column_end":38}},{"value":"/ use opentelemetry::sdk::export::trace::stdout;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50900,"byte_end":50950,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/ use opentelemetry::global::shutdown_tracer_provider;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":50951,"byte_end":51007,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51008,"byte_end":51011,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51012,"byte_end":51027,"line_start":18,"line_end":18,"column_start":1,"column_end":16}},{"value":"/     let tracer = stdout::new_pipeline()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51028,"byte_end":51071,"line_start":19,"line_end":19,"column_start":1,"column_end":44}},{"value":"/         .with_pretty_print(true)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51072,"byte_end":51108,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/         .install_simple();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51109,"byte_end":51139,"line_start":21,"line_end":21,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51140,"byte_end":51143,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51144,"byte_end":51187,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51188,"byte_end":51227,"line_start":24,"line_end":24,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51228,"byte_end":51239,"line_start":25,"line_end":25,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51240,"byte_end":51243,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/     shutdown_tracer_provider(); // sending remaining spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51244,"byte_end":51306,"line_start":27,"line_end":27,"column_start":1,"column_end":63}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51307,"byte_end":51312,"line_start":28,"line_end":28,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51313,"byte_end":51320,"line_start":29,"line_end":29,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2286},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51622,"byte_end":51637,"line_start":44,"line_end":44,"column_start":12,"column_end":27},"name":"PipelineBuilder","qualname":"::sdk::export::trace::stdout::PipelineBuilder","value":"PipelineBuilder {  }","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290}],"decl_id":null,"docs":" Pipeline builder\n","sig":null,"attributes":[{"value":"/ Pipeline builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51573,"byte_end":51593,"line_start":42,"line_end":42,"column_start":1,"column_end":21}}]},{"kind":"Function","id":{"krate":0,"index":311},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51796,"byte_end":51808,"line_start":51,"line_end":51,"column_start":8,"column_end":20},"name":"new_pipeline","qualname":"::sdk::export::trace::stdout::new_pipeline","value":"fn new_pipeline() -> PipelineBuilder<Stdout>","parent":null,"children":[],"decl_id":null,"docs":" Create a new stdout exporter pipeline builder.\n","sig":null,"attributes":[{"value":"/ Create a new stdout exporter pipeline builder.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51738,"byte_end":51788,"line_start":50,"line_end":50,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51969,"byte_end":51976,"line_start":57,"line_end":57,"column_start":8,"column_end":15},"name":"default","qualname":"<PipelineBuilder<Stdout> as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Return the default pipeline builder.\n","sig":null,"attributes":[{"value":"/ Return the default pipeline builder.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51921,"byte_end":51961,"line_start":56,"line_end":56,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52207,"byte_end":52224,"line_start":68,"line_end":68,"column_start":12,"column_end":29},"name":"with_pretty_print","qualname":"<PipelineBuilder<W>>::with_pretty_print","value":"fn with_pretty_print(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the pretty print setting.\n","sig":null,"attributes":[{"value":"/ Specify the pretty print setting.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52158,"byte_end":52195,"line_start":67,"line_end":67,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52382,"byte_end":52399,"line_start":74,"line_end":74,"column_start":12,"column_end":29},"name":"with_trace_config","qualname":"<PipelineBuilder<W>>::with_trace_config","value":"fn with_trace_config(Self, sdk::trace::Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign the SDK trace configuration.\n","sig":null,"attributes":[{"value":"/ Assign the SDK trace configuration.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52331,"byte_end":52370,"line_start":73,"line_end":73,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52556,"byte_end":52567,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"with_writer","qualname":"<PipelineBuilder<W>>::with_writer","value":"fn with_writer<T>(Self, T) -> PipelineBuilder<T> where T: Write","parent":null,"children":[],"decl_id":null,"docs":" Specify the writer to use.\n","sig":null,"attributes":[{"value":"/ Specify the writer to use.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52514,"byte_end":52544,"line_start":79,"line_end":79,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52935,"byte_end":52949,"line_start":94,"line_end":94,"column_start":12,"column_end":26},"name":"install_simple","qualname":"<PipelineBuilder<W>>::install_simple","value":"fn install_simple(Self) -> sdk::trace::Tracer","parent":null,"children":[],"decl_id":null,"docs":" Install the stdout exporter pipeline with the recommended defaults.\n","sig":null,"attributes":[{"value":"/ Install the stdout exporter pipeline with the recommended defaults.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52852,"byte_end":52923,"line_start":93,"line_end":93,"column_start":5,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53770,"byte_end":53778,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"Exporter","qualname":"::sdk::export::trace::stdout::Exporter","value":"Exporter {  }","parent":null,"children":[{"krate":0,"index":2296},{"krate":0,"index":2297}],"decl_id":null,"docs":" A [`SpanExporter`] that writes to [`Stdout`] or other configured [`Write`].","sig":null,"attributes":[{"value":"/ A [`SpanExporter`] that writes to [`Stdout`] or other configured [`Write`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53554,"byte_end":53633,"line_start":112,"line_end":112,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53634,"byte_end":53637,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: super::SpanExporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53638,"byte_end":53679,"line_start":114,"line_end":114,"column_start":1,"column_end":42}},{"value":"/ [`Write`]: std::io::Write","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53680,"byte_end":53709,"line_start":115,"line_end":115,"column_start":1,"column_end":30}},{"value":"/ [`Stdout`]: std::io::Stdout","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53710,"byte_end":53741,"line_start":116,"line_end":116,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53913,"byte_end":53916,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"new","qualname":"<Exporter<W>>::new","value":"fn new(W, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new stdout `Exporter`.\n","sig":null,"attributes":[{"value":"/ Create a new stdout `Exporter`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53866,"byte_end":53901,"line_start":124,"line_end":124,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54181,"byte_end":54187,"line_start":139,"line_end":139,"column_start":14,"column_end":20},"name":"export","qualname":"<Exporter<W> as sdk::export::trace::SpanExporter>::export","value":"fn export<'life0, 'async_trait>(&'life0 mut Self, Vec<SpanData>)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ExportResult> +\n    ::core::marker::Send + 'async_trait>> where 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":2321},"children":[],"decl_id":{"krate":0,"index":2322},"docs":" Export spans to stdout\n","sig":null,"attributes":[{"value":"allow(clippy :: let_unit_value, clippy :: no_effect_underscore_binding,\nclippy :: shadow_same, clippy :: type_complexity, clippy ::\ntype_repetition_in_bounds, clippy :: used_underscore_binding)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54038,"byte_end":54052,"line_start":133,"line_end":133,"column_start":1,"column_end":15}}]},{"kind":"Type","id":{"krate":0,"index":328},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":45779,"byte_end":45791,"line_start":17,"line_end":17,"column_start":10,"column_end":22},"name":"ExportResult","qualname":"::sdk::export::trace::ExportResult","value":"Result<(), TraceError>","parent":null,"children":[],"decl_id":null,"docs":" Describes the result of an export.\n","sig":null,"attributes":[{"value":"/ Describes the result of an export.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":45731,"byte_end":45769,"line_start":16,"line_end":16,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":2321},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46256,"byte_end":46268,"line_start":27,"line_end":27,"column_start":11,"column_end":23},"name":"SpanExporter","qualname":"::sdk::export::trace::SpanExporter","value":"SpanExporter: Send + Debug","parent":null,"children":[{"krate":0,"index":2322},{"krate":0,"index":2325}],"decl_id":null,"docs":" `SpanExporter` defines the interface that protocol-specific exporters must\n implement so that they can be plugged into OpenTelemetry SDK and support\n sending of telemetry data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46927,"byte_end":46933,"line_start":40,"line_end":40,"column_start":14,"column_end":20},"name":"export","qualname":"::sdk::export::trace::SpanExporter::export","value":"fn export<'life0, 'async_trait>(&'life0 mut Self, Vec<SpanData>)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ExportResult> +\n    ::core::marker::Send + 'async_trait>> where 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":2321},"children":[],"decl_id":null,"docs":" Exports a batch of readable spans. Protocol exporters that will\n implement this function are typically expected to serialize and transmit\n the data to the destination.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46231,"byte_end":46245,"line_start":26,"line_end":26,"column_start":1,"column_end":15}},{"value":"allow(clippy :: type_complexity, clippy :: type_repetition_in_bounds)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46231,"byte_end":46245,"line_start":26,"line_end":26,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2325},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47576,"byte_end":47584,"line_start":53,"line_end":53,"column_start":8,"column_end":16},"name":"shutdown","qualname":"::sdk::export::trace::SpanExporter::shutdown","value":"fn shutdown(&mut Self)","parent":{"krate":0,"index":2321},"children":[],"decl_id":null,"docs":" Shuts down the exporter. Called when SDK is shut down. This is an\n opportunity for exporter to do any cleanup required.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2326},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47835,"byte_end":47843,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"SpanData","qualname":"::sdk::export::trace::SpanData","value":"SpanData { span_context, parent_span_id, span_kind, name, start_time, end_time, attributes, events, links, status_code, status_message, resource, instrumentation_lib }","parent":null,"children":[{"krate":0,"index":2327},{"krate":0,"index":2328},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2331},{"krate":0,"index":2332},{"krate":0,"index":2333},{"krate":0,"index":2334},{"krate":0,"index":2335},{"krate":0,"index":2336},{"krate":0,"index":2337},{"krate":0,"index":2338},{"krate":0,"index":2339}],"decl_id":null,"docs":" `SpanData` contains all the information collected by a `Span` and can be used\n by exporters as a standard input.\n","sig":null,"attributes":[{"value":"/ `SpanData` contains all the information collected by a `Span` and can be used","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47602,"byte_end":47683,"line_start":56,"line_end":56,"column_start":1,"column_end":82}},{"value":"/ by exporters as a standard input.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47684,"byte_end":47721,"line_start":57,"line_end":57,"column_start":1,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":2327},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47887,"byte_end":47899,"line_start":62,"line_end":62,"column_start":9,"column_end":21},"name":"span_context","qualname":"::sdk::export::trace::SpanData::span_context","value":"trace::span_context::SpanContext","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Exportable `SpanContext`\n","sig":null,"attributes":[{"value":"/ Exportable `SpanContext`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47850,"byte_end":47878,"line_start":61,"line_end":61,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2328},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47945,"byte_end":47959,"line_start":64,"line_end":64,"column_start":9,"column_end":23},"name":"parent_span_id","qualname":"::sdk::export::trace::SpanData::parent_span_id","value":"trace::span_context::SpanId","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span parent id\n","sig":null,"attributes":[{"value":"/ Span parent id","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47918,"byte_end":47936,"line_start":63,"line_end":63,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2329},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47995,"byte_end":48004,"line_start":66,"line_end":66,"column_start":9,"column_end":18},"name":"span_kind","qualname":"::sdk::export::trace::SpanData::span_kind","value":"trace::span::SpanKind","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span kind\n","sig":null,"attributes":[{"value":"/ Span kind","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":47973,"byte_end":47986,"line_start":65,"line_end":65,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2330},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48042,"byte_end":48046,"line_start":68,"line_end":68,"column_start":9,"column_end":13},"name":"name","qualname":"::sdk::export::trace::SpanData::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span name\n","sig":null,"attributes":[{"value":"/ Span name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48020,"byte_end":48033,"line_start":67,"line_end":67,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2331},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48099,"byte_end":48109,"line_start":70,"line_end":70,"column_start":9,"column_end":19},"name":"start_time","qualname":"::sdk::export::trace::SpanData::start_time","value":"std::time::SystemTime","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span start time\n","sig":null,"attributes":[{"value":"/ Span start time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48071,"byte_end":48090,"line_start":69,"line_end":69,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2332},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48153,"byte_end":48161,"line_start":72,"line_end":72,"column_start":9,"column_end":17},"name":"end_time","qualname":"::sdk::export::trace::SpanData::end_time","value":"std::time::SystemTime","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span end time\n","sig":null,"attributes":[{"value":"/ Span end time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48127,"byte_end":48144,"line_start":71,"line_end":71,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2333},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48207,"byte_end":48217,"line_start":74,"line_end":74,"column_start":9,"column_end":19},"name":"attributes","qualname":"::sdk::export::trace::SpanData::attributes","value":"sdk::trace::evicted_hash_map::EvictedHashMap","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span attributes\n","sig":null,"attributes":[{"value":"/ Span attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48179,"byte_end":48198,"line_start":73,"line_end":73,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2334},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48275,"byte_end":48281,"line_start":76,"line_end":76,"column_start":9,"column_end":15},"name":"events","qualname":"::sdk::export::trace::SpanData::events","value":"sdk::trace::evicted_queue::EvictedQueue<trace::Event>","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span events\n","sig":null,"attributes":[{"value":"/ Span events","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48251,"byte_end":48266,"line_start":75,"line_end":75,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2335},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48343,"byte_end":48348,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"name":"links","qualname":"::sdk::export::trace::SpanData::links","value":"sdk::trace::evicted_queue::EvictedQueue<trace::Link>","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span Links\n","sig":null,"attributes":[{"value":"/ Span Links","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48320,"byte_end":48334,"line_start":77,"line_end":77,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2336},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48415,"byte_end":48426,"line_start":80,"line_end":80,"column_start":9,"column_end":20},"name":"status_code","qualname":"::sdk::export::trace::SpanData::status_code","value":"trace::span::StatusCode","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span status code\n","sig":null,"attributes":[{"value":"/ Span status code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48386,"byte_end":48406,"line_start":79,"line_end":79,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2337},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48476,"byte_end":48490,"line_start":82,"line_end":82,"column_start":9,"column_end":23},"name":"status_message","qualname":"::sdk::export::trace::SpanData::status_message","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Span status message\n","sig":null,"attributes":[{"value":"/ Span status message","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48444,"byte_end":48467,"line_start":81,"line_end":81,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":2338},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48604,"byte_end":48612,"line_start":84,"line_end":84,"column_start":9,"column_end":17},"name":"resource","qualname":"::sdk::export::trace::SpanData::resource","value":"std::option::Option<std::sync::Arc<sdk::resource::Resource>>","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Resource contains attributes representing an entity that produced this span.\n","sig":null,"attributes":[{"value":"/ Resource contains attributes representing an entity that produced this span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48515,"byte_end":48595,"line_start":83,"line_end":83,"column_start":5,"column_end":85}}]},{"kind":"Field","id":{"krate":0,"index":2339},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48758,"byte_end":48777,"line_start":87,"line_end":87,"column_start":9,"column_end":28},"name":"instrumentation_lib","qualname":"::sdk::export::trace::SpanData::instrumentation_lib","value":"sdk::instrumentation::InstrumentationLibrary","parent":{"krate":0,"index":2326},"children":[],"decl_id":null,"docs":" Instrumentation library that produced this span\n","sig":null,"attributes":[{"value":"/ Instrumentation library that produced this span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":48646,"byte_end":48697,"line_start":85,"line_end":85,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":329},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45241,"byte_end":45252,"line_start":10,"line_end":10,"column_start":11,"column_end":22},"name":"ExportError","qualname":"::sdk::export::ExportError","value":"ExportError: std::error::Error + Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":330}],"decl_id":null,"docs":" Marker trait for errors returned by exporters\n","sig":null,"attributes":[{"value":"/ Marker trait for errors returned by exporters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45181,"byte_end":45230,"line_start":9,"line_end":9,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45359,"byte_end":45372,"line_start":12,"line_end":12,"column_start":8,"column_end":21},"name":"exporter_name","qualname":"::sdk::export::ExportError::exporter_name","value":"fn exporter_name(&Self) -> &'static str","parent":{"krate":0,"index":329},"children":[],"decl_id":null,"docs":" The name of exporter that returned this error\n","sig":null,"attributes":[{"value":"/ The name of exporter that returned this error","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45302,"byte_end":45351,"line_start":11,"line_end":11,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":331},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"instrumentation","qualname":"::sdk::instrumentation","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":2348},{"krate":0,"index":2351},{"krate":0,"index":2353},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2360},{"krate":0,"index":2361},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":335}],"decl_id":null,"docs":" Provides instrumentation information for both tracing and metric.\n See `OTEPS-0083` for details.","sig":null,"attributes":[{"value":"/ Provides instrumentation information for both tracing and metric.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":54898,"byte_end":54967,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/ See `OTEPS-0083` for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":54968,"byte_end":55001,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55002,"byte_end":55005,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ [OTEPS-0083](https://github.com/open-telemetry/oteps/blob/master/text/0083-component.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55006,"byte_end":55098,"line_start":4,"line_end":4,"column_start":1,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":2348},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55512,"byte_end":55534,"line_start":15,"line_end":15,"column_start":12,"column_end":34},"name":"InstrumentationLibrary","qualname":"::sdk::instrumentation::InstrumentationLibrary","value":"InstrumentationLibrary { name, version }","parent":null,"children":[{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" InstrumentationLibrary contains information about instrumentation library.","sig":null,"attributes":[{"value":"/ InstrumentationLibrary contains information about instrumentation library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55123,"byte_end":55201,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55202,"byte_end":55205,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ See `Instrumentation Libraries` for more information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55206,"byte_end":55263,"line_start":10,"line_end":10,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55264,"byte_end":55267,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Instrumentation Libraries`](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/overview.md#instrumentation-libraries)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55268,"byte_end":55428,"line_start":12,"line_end":12,"column_start":1,"column_end":161}},{"value":"non_exhaustive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55483,"byte_end":55500,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":2349},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55599,"byte_end":55603,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"name":"name","qualname":"::sdk::instrumentation::InstrumentationLibrary::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" instrumentation library name, cannot be empty\n","sig":null,"attributes":[{"value":"/ instrumentation library name, cannot be empty","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55541,"byte_end":55590,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2350},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55686,"byte_end":55693,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"name":"version","qualname":"::sdk::instrumentation::InstrumentationLibrary::version","value":"std::option::Option<std::borrow::Cow<'static, str>>","parent":{"krate":0,"index":2348},"children":[],"decl_id":null,"docs":" instrumentation library version, can be empty\n","sig":null,"attributes":[{"value":"/ instrumentation library version, can be empty","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55628,"byte_end":55677,"line_start":18,"line_end":18,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55830,"byte_end":55833,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<InstrumentationLibrary>::new","value":"fn new<T>(T, Option<T>) -> InstrumentationLibrary where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create an InstrumentationLibrary from name and version.\n","sig":null,"attributes":[{"value":"/ Create an InstrumentationLibrary from name and version.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55759,"byte_end":55818,"line_start":23,"line_end":23,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":338},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"propagation","qualname":"::sdk::propagation","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":394},{"krate":0,"index":422},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488}],"decl_id":null,"docs":" OpenTelemetry Propagators\n","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44692,"byte_end":44717,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"/ OpenTelemetry Propagators","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/mod.rs","byte_start":56073,"byte_end":56102,"line_start":1,"line_end":1,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2383},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60190,"byte_end":60207,"line_start":101,"line_end":101,"column_start":12,"column_end":29},"name":"BaggagePropagator","qualname":"::sdk::propagation::baggage::BaggagePropagator","value":"BaggagePropagator {  }","parent":null,"children":[{"krate":0,"index":2384}],"decl_id":null,"docs":" Propagates name-value pairs in [W3C Baggage] format.","sig":null,"attributes":[{"value":"/ Propagates name-value pairs in [W3C Baggage] format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58457,"byte_end":58513,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58514,"byte_end":58517,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Baggage is used to annotate telemetry, adding context and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58518,"byte_end":58579,"line_start":60,"line_end":60,"column_start":1,"column_end":62}},{"value":"/ information to metrics, traces, and logs. It is an abstract data type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58580,"byte_end":58653,"line_start":61,"line_end":61,"column_start":1,"column_end":74}},{"value":"/ represented by a set of name-value pairs describing user-defined properties.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58654,"byte_end":58734,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/ Each name in a [`Baggage`] is associated with exactly one value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58735,"byte_end":58803,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/ `Baggage`s are serialized according to the editor's draft of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58804,"byte_end":58868,"line_start":64,"line_end":64,"column_start":1,"column_end":65}},{"value":"/ the [W3C Baggage] specification.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58869,"byte_end":58905,"line_start":65,"line_end":65,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58906,"byte_end":58909,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58910,"byte_end":58924,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58925,"byte_end":58928,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58929,"byte_end":58936,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Key, propagation::TextMapPropagator};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":58937,"byte_end":59019,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/ use opentelemetry::sdk::propagation::BaggagePropagator;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59020,"byte_end":59079,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59080,"byte_end":59114,"line_start":72,"line_end":72,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59115,"byte_end":59118,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ // Example baggage value passed in externally via http headers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59119,"byte_end":59185,"line_start":74,"line_end":74,"column_start":1,"column_end":67}},{"value":"/ let mut headers = HashMap::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59186,"byte_end":59223,"line_start":75,"line_end":75,"column_start":1,"column_end":38}},{"value":"/ headers.insert(\"baggage\".to_string(), \"user_id=1\".to_string());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59224,"byte_end":59291,"line_start":76,"line_end":76,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59292,"byte_end":59295,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ let propagator = BaggagePropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59296,"byte_end":59342,"line_start":78,"line_end":78,"column_start":1,"column_end":47}},{"value":"/ // can extract from any type that impls `Extractor`, usually an HTTP header map","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59343,"byte_end":59426,"line_start":79,"line_end":79,"column_start":1,"column_end":84}},{"value":"/ let cx = propagator.extract(&headers);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59427,"byte_end":59469,"line_start":80,"line_end":80,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59470,"byte_end":59473,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Iterate over extracted name-value pairs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59474,"byte_end":59520,"line_start":82,"line_end":82,"column_start":1,"column_end":47}},{"value":"/ for (name, value) in cx.baggage() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59521,"byte_end":59560,"line_start":83,"line_end":83,"column_start":1,"column_end":40}},{"value":"/     // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59561,"byte_end":59575,"line_start":84,"line_end":84,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59576,"byte_end":59581,"line_start":85,"line_end":85,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59582,"byte_end":59585,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ // Add new baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59586,"byte_end":59608,"line_start":87,"line_end":87,"column_start":1,"column_end":23}},{"value":"/ let cx_with_additions = cx.with_baggage(vec![Key::new(\"server_id\").i64(42)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59609,"byte_end":59690,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59691,"byte_end":59694,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ // Inject baggage into http request","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59695,"byte_end":59734,"line_start":90,"line_end":90,"column_start":1,"column_end":40}},{"value":"/ propagator.inject_context(&cx_with_additions, &mut headers);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59735,"byte_end":59799,"line_start":91,"line_end":91,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59800,"byte_end":59803,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ let header_value = headers.get(\"baggage\").expect(\"header is injected\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59804,"byte_end":59879,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/ assert!(header_value.contains(\"user_id=1\"), \"still contains previous name-value\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59880,"byte_end":59966,"line_start":94,"line_end":94,"column_start":1,"column_end":87}},{"value":"/ assert!(header_value.contains(\"server_id=42\"), \"contains new name-value pair\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":59967,"byte_end":60050,"line_start":95,"line_end":95,"column_start":1,"column_end":84}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60051,"byte_end":60058,"line_start":96,"line_end":96,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60059,"byte_end":60062,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [W3C Baggage]: https://w3c.github.io/baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60063,"byte_end":60111,"line_start":98,"line_end":98,"column_start":1,"column_end":49}},{"value":"/ [`Baggage`]: crate::baggage::Baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60112,"byte_end":60152,"line_start":99,"line_end":99,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60311,"byte_end":60314,"line_start":107,"line_end":107,"column_start":12,"column_end":15},"name":"new","qualname":"<BaggagePropagator>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new baggage propagator.\n","sig":null,"attributes":[{"value":"/ Construct a new baggage propagator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60260,"byte_end":60299,"line_start":106,"line_end":106,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60524,"byte_end":60538,"line_start":114,"line_end":114,"column_start":8,"column_end":22},"name":"inject_context","qualname":"<BaggagePropagator as propagation::text_map_propagator::TextMapPropagator>::inject_context","value":"fn inject_context(&Self, &Context, &mut dyn Injector)","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1612},"docs":" Encodes the values of the `Context` and injects them into the provided `Injector`.\n","sig":null,"attributes":[{"value":"/ Encodes the values of the `Context` and injects them into the provided `Injector`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60430,"byte_end":60516,"line_start":113,"line_end":113,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":61524,"byte_end":61544,"line_start":136,"line_end":136,"column_start":8,"column_end":28},"name":"extract_with_context","qualname":"<BaggagePropagator as propagation::text_map_propagator::TextMapPropagator>::extract_with_context","value":"fn extract_with_context(&Self, &Context, &dyn Extractor) -> Context","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1614},"docs":" Extracts a `Context` with baggage values from a `Extractor`.\n","sig":null,"attributes":[{"value":"/ Extracts a `Context` with baggage values from a `Extractor`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":61452,"byte_end":61516,"line_start":135,"line_end":135,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":63452,"byte_end":63458,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"fields","qualname":"<BaggagePropagator as propagation::text_map_propagator::TextMapPropagator>::fields","value":"fn fields(&Self) -> FieldIter","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1615},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72592,"byte_end":72618,"line_start":62,"line_end":62,"column_start":12,"column_end":38},"name":"TextMapCompositePropagator","qualname":"::sdk::propagation::composite::TextMapCompositePropagator","value":"TextMapCompositePropagator {  }","parent":null,"children":[{"krate":0,"index":2390},{"krate":0,"index":2391}],"decl_id":null,"docs":" Composite propagator","sig":null,"attributes":[{"value":"/ Composite propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70684,"byte_end":70708,"line_start":7,"line_end":7,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70709,"byte_end":70712,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ A propagator that chains multiple [`TextMapPropagator`] propagators together,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70713,"byte_end":70794,"line_start":9,"line_end":9,"column_start":1,"column_end":82}},{"value":"/ injecting or extracting by their respective HTTP header names.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70795,"byte_end":70861,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70862,"byte_end":70865,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Injection and extraction from this propagator will preserve the order of the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70866,"byte_end":70946,"line_start":12,"line_end":12,"column_start":1,"column_end":81}},{"value":"/ injectors and extractors passed in during initialization.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":70947,"byte_end":71008,"line_start":13,"line_end":13,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71009,"byte_end":71012,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`TextMapPropagator`]: crate::propagation::TextMapPropagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71013,"byte_end":71077,"line_start":15,"line_end":15,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71078,"byte_end":71081,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71082,"byte_end":71096,"line_start":17,"line_end":17,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71097,"byte_end":71100,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71101,"byte_end":71108,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71109,"byte_end":71133,"line_start":20,"line_end":20,"column_start":1,"column_end":25}},{"value":"/     baggage::BaggageExt,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71134,"byte_end":71162,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/     propagation::TextMapPropagator,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71163,"byte_end":71202,"line_start":22,"line_end":22,"column_start":1,"column_end":40}},{"value":"/     trace::{TraceContextExt, Tracer, TracerProvider},","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71203,"byte_end":71260,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"/     Context, KeyValue,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71261,"byte_end":71287,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71288,"byte_end":71294,"line_start":25,"line_end":25,"column_start":1,"column_end":7}},{"value":"/ use opentelemetry::sdk::propagation::{","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71295,"byte_end":71337,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/     BaggagePropagator, TextMapCompositePropagator, TraceContextPropagator,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71338,"byte_end":71416,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71417,"byte_end":71423,"line_start":28,"line_end":28,"column_start":1,"column_end":7}},{"value":"/ use opentelemetry::sdk::trace as sdktrace;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71424,"byte_end":71470,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71471,"byte_end":71505,"line_start":30,"line_end":30,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71506,"byte_end":71509,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // First create 1 or more propagators","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71510,"byte_end":71551,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ let baggage_propagator = BaggagePropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71552,"byte_end":71606,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/ let trace_context_propagator = TraceContextPropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71607,"byte_end":71672,"line_start":34,"line_end":34,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71673,"byte_end":71676,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // Then create a composite propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71677,"byte_end":71718,"line_start":36,"line_end":36,"column_start":1,"column_end":42}},{"value":"/ let composite_propagator = TextMapCompositePropagator::new(vec![","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71719,"byte_end":71787,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/     Box::new(baggage_propagator),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71788,"byte_end":71825,"line_start":38,"line_end":38,"column_start":1,"column_end":38}},{"value":"/     Box::new(trace_context_propagator),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71826,"byte_end":71869,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ ]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71870,"byte_end":71877,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71878,"byte_end":71881,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ // Then for a given implementation of `Injector`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71882,"byte_end":71934,"line_start":42,"line_end":42,"column_start":1,"column_end":53}},{"value":"/ let mut injector = HashMap::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71935,"byte_end":71973,"line_start":43,"line_end":43,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71974,"byte_end":71977,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // And a given span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":71978,"byte_end":72001,"line_start":45,"line_end":45,"column_start":1,"column_end":24}},{"value":"/ let example_span = sdktrace::TracerProvider::default()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72002,"byte_end":72060,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/     .tracer(\"example-component\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72061,"byte_end":72097,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/     .start(\"span-name\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72098,"byte_end":72126,"line_start":48,"line_end":48,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72127,"byte_end":72130,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // with the current context, call inject to add the headers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72131,"byte_end":72194,"line_start":50,"line_end":50,"column_start":1,"column_end":64}},{"value":"/ composite_propagator.inject_context(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72195,"byte_end":72235,"line_start":51,"line_end":51,"column_start":1,"column_end":41}},{"value":"/     &Context::current_with_span(example_span)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72236,"byte_end":72285,"line_start":52,"line_end":52,"column_start":1,"column_end":50}},{"value":"/         .with_baggage(vec![KeyValue::new(\"test\", \"example\")]),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72286,"byte_end":72352,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/     &mut injector,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72353,"byte_end":72375,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"/ );","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72376,"byte_end":72382,"line_start":55,"line_end":55,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72383,"byte_end":72386,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // The injector now has both `baggage` and `traceparent` headers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72387,"byte_end":72455,"line_start":57,"line_end":57,"column_start":1,"column_end":69}},{"value":"/ assert!(injector.get(\"baggage\").is_some());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72456,"byte_end":72503,"line_start":58,"line_end":58,"column_start":1,"column_end":48}},{"value":"/ assert!(injector.get(\"traceparent\").is_some());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72504,"byte_end":72555,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72556,"byte_end":72563,"line_start":60,"line_end":60,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72914,"byte_end":72917,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<TextMapCompositePropagator>::new","value":"fn new(Vec<Box<dyn TextMapPropagator + Send + Sync>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new propagator out of instances of [`TextMapPropagator`].","sig":null,"attributes":[{"value":"/ Constructs a new propagator out of instances of [`TextMapPropagator`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72751,"byte_end":72825,"line_start":68,"line_end":68,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72830,"byte_end":72833,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ [`TextMapPropagator`]: crate::propagation::TextMapPropagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72838,"byte_end":72902,"line_start":70,"line_end":70,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73468,"byte_end":73482,"line_start":88,"line_end":88,"column_start":8,"column_end":22},"name":"inject_context","qualname":"<TextMapCompositePropagator as propagation::text_map_propagator::TextMapPropagator>::inject_context","value":"fn inject_context(&Self, &Context, &mut dyn Injector)","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1612},"docs":" Encodes the values of the `Context` and injects them into the `Injector`.\n","sig":null,"attributes":[{"value":"/ Encodes the values of the `Context` and injects them into the `Injector`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73383,"byte_end":73460,"line_start":87,"line_end":87,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73856,"byte_end":73876,"line_start":97,"line_end":97,"column_start":8,"column_end":28},"name":"extract_with_context","qualname":"<TextMapCompositePropagator as propagation::text_map_propagator::TextMapPropagator>::extract_with_context","value":"fn extract_with_context(&Self, &Context, &dyn Extractor) -> Context","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1614},"docs":" Retrieves encoded `Context` information using the `Extractor`. If no data was\n retrieved OR if the retrieved data is invalid, then the current `Context` is\n returned.\n","sig":null,"attributes":[{"value":"/ Retrieves encoded `Context` information using the `Extractor`. If no data was","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73664,"byte_end":73745,"line_start":94,"line_end":94,"column_start":5,"column_end":86}},{"value":"/ retrieved OR if the retrieved data is invalid, then the current `Context` is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73750,"byte_end":73830,"line_start":95,"line_end":95,"column_start":5,"column_end":85}},{"value":"/ returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73835,"byte_end":73848,"line_start":96,"line_end":96,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":74141,"byte_end":74147,"line_start":105,"line_end":105,"column_start":8,"column_end":14},"name":"fields","qualname":"<TextMapCompositePropagator as propagation::text_map_propagator::TextMapPropagator>::fields","value":"fn fields(&Self) -> FieldIter","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1615},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":82037,"byte_end":82059,"line_start":43,"line_end":43,"column_start":12,"column_end":34},"name":"TraceContextPropagator","qualname":"::sdk::propagation::trace_context::TraceContextPropagator","value":"TraceContextPropagator {  }","parent":null,"children":[{"krate":0,"index":2411}],"decl_id":null,"docs":" Propagates `SpanContext`s in [W3C TraceContext] format.","sig":null,"attributes":[{"value":"/ Propagates `SpanContext`s in [W3C TraceContext] format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":81868,"byte_end":81927,"line_start":39,"line_end":39,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":81928,"byte_end":81931,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ [W3C TraceContext]: https://www.w3.org/TR/trace-context/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":81932,"byte_end":81992,"line_start":41,"line_end":41,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":82171,"byte_end":82174,"line_start":49,"line_end":49,"column_start":12,"column_end":15},"name":"new","qualname":"<TraceContextPropagator>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TraceContextPropagator`.\n","sig":null,"attributes":[{"value":"/ Create a new `TraceContextPropagator`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":82117,"byte_end":82159,"line_start":48,"line_end":48,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":84442,"byte_end":84456,"line_start":115,"line_end":115,"column_start":8,"column_end":22},"name":"inject_context","qualname":"<TraceContextPropagator as propagation::text_map_propagator::TextMapPropagator>::inject_context","value":"fn inject_context(&Self, &Context, &mut dyn Injector)","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1612},"docs":" Properly encodes the values of the `SpanContext` and injects them\n into the `Injector`.\n","sig":null,"attributes":[{"value":"/ Properly encodes the values of the `SpanContext` and injects them","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":84336,"byte_end":84405,"line_start":113,"line_end":113,"column_start":5,"column_end":74}},{"value":"/ into the `Injector`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":84410,"byte_end":84434,"line_start":114,"line_end":114,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85326,"byte_end":85346,"line_start":135,"line_end":135,"column_start":8,"column_end":28},"name":"extract_with_context","qualname":"<TraceContextPropagator as propagation::text_map_propagator::TextMapPropagator>::extract_with_context","value":"fn extract_with_context(&Self, &Context, &dyn Extractor) -> Context","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1614},"docs":" Retrieves encoded `SpanContext`s using the `Extractor`. It decodes\n the `SpanContext` and returns it. If no `SpanContext` was retrieved\n OR if the retrieved SpanContext is invalid then an empty `SpanContext`\n is returned.\n","sig":null,"attributes":[{"value":"/ Retrieves encoded `SpanContext`s using the `Extractor`. It decodes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85072,"byte_end":85142,"line_start":131,"line_end":131,"column_start":5,"column_end":75}},{"value":"/ the `SpanContext` and returns it. If no `SpanContext` was retrieved","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85147,"byte_end":85218,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ OR if the retrieved SpanContext is invalid then an empty `SpanContext`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85223,"byte_end":85297,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85302,"byte_end":85318,"line_start":134,"line_end":134,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":85566,"byte_end":85572,"line_start":141,"line_end":141,"column_start":8,"column_end":14},"name":"fields","qualname":"<TraceContextPropagator as propagation::text_map_propagator::TextMapPropagator>::fields","value":"fn fields(&Self) -> FieldIter","parent":{"krate":0,"index":1610},"children":[],"decl_id":{"krate":0,"index":1615},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":491},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"resource","qualname":"::sdk::resource","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":525},{"krate":0,"index":543},{"krate":0,"index":575},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":2439},{"krate":0,"index":2441},{"krate":0,"index":2443},{"krate":0,"index":2445},{"krate":0,"index":2446},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":623},{"krate":0,"index":626},{"krate":0,"index":2454},{"krate":0,"index":2458},{"krate":0,"index":630},{"krate":0,"index":634},{"krate":0,"index":639}],"decl_id":null,"docs":" # Resource","sig":null,"attributes":[{"value":"/ # Resource","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":93871,"byte_end":93885,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":93886,"byte_end":93889,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ A `Resource` is an immutable representation of the entity producing telemetry. For example, a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":93890,"byte_end":93987,"line_start":3,"line_end":3,"column_start":1,"column_end":98}},{"value":"/ process producing telemetry that is running in a container on Kubernetes has a Pod name, it is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":93988,"byte_end":94086,"line_start":4,"line_end":4,"column_start":1,"column_end":99}},{"value":"/ in a namespace, and possibly is part of a Deployment which also has a name. All three of these","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94087,"byte_end":94185,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ attributes can be included in the `Resource`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94186,"byte_end":94235,"line_start":6,"line_end":6,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94236,"byte_end":94239,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ The primary purpose of resources as a first-class concept in the SDK is decoupling of discovery","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94240,"byte_end":94339,"line_start":8,"line_end":8,"column_start":1,"column_end":100}},{"value":"/ of resource information from exporters. This allows for independent development and easy","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94340,"byte_end":94432,"line_start":9,"line_end":9,"column_start":1,"column_end":93}},{"value":"/ customization for users that need to integrate with closed source environments. When used with","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94433,"byte_end":94531,"line_start":10,"line_end":10,"column_start":1,"column_end":99}},{"value":"/ distributed tracing, a resource can be associated with the [`TracerProvider`] when it is created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94532,"byte_end":94633,"line_start":11,"line_end":11,"column_start":1,"column_end":102}},{"value":"/ That association cannot be changed later. When associated with a `TracerProvider`, all `Span`s","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94634,"byte_end":94732,"line_start":12,"line_end":12,"column_start":1,"column_end":99}},{"value":"/ produced by any `Tracer` from the provider are associated with this `Resource`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94733,"byte_end":94816,"line_start":13,"line_end":13,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94817,"byte_end":94820,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`TracerProvider`]: crate::trace::TracerProvider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94821,"byte_end":94873,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94874,"byte_end":94877,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Resource detectors","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94878,"byte_end":94902,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94903,"byte_end":94906,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `ResourceDetector`s are used to detect resource from runtime or environmental variables. The","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":94907,"byte_end":95003,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ following `ResourceDetector`s are provided along with this SDK.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95004,"byte_end":95071,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95072,"byte_end":95075,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ - EnvResourceDetector, detect resource from environmental variables.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95076,"byte_end":95148,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/ - OsResourceDetector, detect OS from runtime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95149,"byte_end":95198,"line_start":23,"line_end":23,"column_start":1,"column_end":50}},{"value":"/ - ProcessResourceDetector, detect process information","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95199,"byte_end":95256,"line_start":24,"line_end":24,"column_start":1,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":2418},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103445,"byte_end":103464,"line_start":20,"line_end":20,"column_start":12,"column_end":31},"name":"EnvResourceDetector","qualname":"::sdk::resource::env::EnvResourceDetector","value":"EnvResourceDetector {  }","parent":null,"children":[{"krate":0,"index":2419}],"decl_id":null,"docs":" Resource detector implements ResourceDetector and is used to extract\n general SDK configuration from environment.","sig":null,"attributes":[{"value":"/ Resource detector implements ResourceDetector and is used to extract","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103107,"byte_end":103179,"line_start":13,"line_end":13,"column_start":1,"column_end":73}},{"value":"/ general SDK configuration from environment.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103180,"byte_end":103227,"line_start":14,"line_end":14,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103228,"byte_end":103231,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ See","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103232,"byte_end":103239,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/ [semantic conventions](https://github.com/open-telemetry/opentelemetry-specification/tree/master/specification/resource/semantic_conventions#telemetry-sdk)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103240,"byte_end":103399,"line_start":17,"line_end":17,"column_start":1,"column_end":160}},{"value":"/ for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103400,"byte_end":103416,"line_start":18,"line_end":18,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103543,"byte_end":103549,"line_start":25,"line_end":25,"column_start":8,"column_end":14},"name":"detect","qualname":"<EnvResourceDetector as sdk::resource::ResourceDetector>::detect","value":"fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":639},"children":[],"decl_id":{"krate":0,"index":640},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103891,"byte_end":103894,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<EnvResourceDetector>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create `EnvResourceDetector` instance.\n","sig":null,"attributes":[{"value":"/ Create `EnvResourceDetector` instance.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103837,"byte_end":103879,"line_start":34,"line_end":34,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104007,"byte_end":104014,"line_start":41,"line_end":41,"column_start":8,"column_end":15},"name":"default","qualname":"<EnvResourceDetector as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2422},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105498,"byte_end":105525,"line_start":76,"line_end":76,"column_start":12,"column_end":39},"name":"SdkProvidedResourceDetector","qualname":"::sdk::resource::env::SdkProvidedResourceDetector","value":"","parent":null,"children":[],"decl_id":null,"docs":" There are the attributes which MUST be provided by the SDK as specified in\n [the Resource SDK specification]. This detector detect those attributes and\n if the attribute cannot be detected, use the default value.","sig":null,"attributes":[{"value":"/ There are the attributes which MUST be provided by the SDK as specified in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104575,"byte_end":104653,"line_start":61,"line_end":61,"column_start":1,"column_end":79}},{"value":"/ [the Resource SDK specification]. This detector detect those attributes and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104654,"byte_end":104733,"line_start":62,"line_end":62,"column_start":1,"column_end":80}},{"value":"/ if the attribute cannot be detected, use the default value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104734,"byte_end":104797,"line_start":63,"line_end":63,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104798,"byte_end":104801,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ This detector will first try `OTEL_SERVICE_NAME` env. If it's not available.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104802,"byte_end":104882,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/ Then it will check the `OTEL_RESOURCE_ATTRIBUTES` env and see if it contains","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104883,"byte_end":104963,"line_start":66,"line_end":66,"column_start":1,"column_end":81}},{"value":"/ `service.name` resource. If it's also not available. Then it will use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":104964,"byte_end":105037,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ `unknown_service`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105038,"byte_end":105060,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105061,"byte_end":105064,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Note that if `service.name` is empty. It will be ignore and the service name will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105065,"byte_end":105150,"line_start":70,"line_end":70,"column_start":1,"column_end":86}},{"value":"/ be `unknown_service`. If users want to set an empty service name. They can provide","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105151,"byte_end":105237,"line_start":71,"line_end":71,"column_start":1,"column_end":87}},{"value":"/ a resource with empty value and `service.name` key.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105238,"byte_end":105293,"line_start":72,"line_end":72,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105294,"byte_end":105297,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ [the Resource SDK specification]:https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/sdk.md#sdk-provided-resource-attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105298,"byte_end":105469,"line_start":74,"line_end":74,"column_start":1,"column_end":172}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105591,"byte_end":105597,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"detect","qualname":"<SdkProvidedResourceDetector as sdk::resource::ResourceDetector>::detect","value":"fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":639},"children":[],"decl_id":{"krate":0,"index":640},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109643,"byte_end":109661,"line_start":18,"line_end":18,"column_start":12,"column_end":30},"name":"OsResourceDetector","qualname":"::sdk::resource::os::OsResourceDetector","value":"","parent":null,"children":[],"decl_id":null,"docs":" Detect runtime operating system information.","sig":null,"attributes":[{"value":"/ Detect runtime operating system information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109165,"byte_end":109213,"line_start":10,"line_end":10,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109214,"byte_end":109217,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This detector uses Rust's [`OS constant`] to detect the operating system type and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109218,"byte_end":109303,"line_start":12,"line_end":12,"column_start":1,"column_end":86}},{"value":"/ maps the result to the supported value defined in [`OpenTelemetry spec`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109304,"byte_end":109381,"line_start":13,"line_end":13,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109382,"byte_end":109385,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`OS constant`]: https://doc.rust-lang.org/std/env/consts/constant.OS.html","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109386,"byte_end":109464,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ [`OpenTelemetry spec`]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/resource/semantic_conventions/os.md","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109465,"byte_end":109614,"line_start":16,"line_end":16,"column_start":1,"column_end":150}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109718,"byte_end":109724,"line_start":21,"line_end":21,"column_start":8,"column_end":14},"name":"detect","qualname":"<OsResourceDetector as sdk::resource::ResourceDetector>::detect","value":"fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":639},"children":[],"decl_id":{"krate":0,"index":640},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2435},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":111012,"byte_end":111035,"line_start":21,"line_end":21,"column_start":12,"column_end":35},"name":"ProcessResourceDetector","qualname":"::sdk::resource::process::ProcessResourceDetector","value":"","parent":null,"children":[],"decl_id":null,"docs":" Detect process information.","sig":null,"attributes":[{"value":"/ Detect process information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110723,"byte_end":110754,"line_start":13,"line_end":13,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110755,"byte_end":110758,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This resource detector returns the following information:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110759,"byte_end":110820,"line_start":15,"line_end":15,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110821,"byte_end":110824,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - process command line arguments(`process.command_args`), the full command arguments of this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110825,"byte_end":110921,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ application.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110922,"byte_end":110938,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/ - OS assigned process id(`process.pid`).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":110939,"byte_end":110983,"line_start":19,"line_end":19,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":111097,"byte_end":111103,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"detect","qualname":"<ProcessResourceDetector as sdk::resource::ResourceDetector>::detect","value":"fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":639},"children":[],"decl_id":{"krate":0,"index":640},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2439},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95979,"byte_end":95987,"line_start":48,"line_end":48,"column_start":12,"column_end":20},"name":"Resource","qualname":"::sdk::resource::Resource","value":"Resource {  }","parent":null,"children":[{"krate":0,"index":2440}],"decl_id":null,"docs":" Describes an entity about which identifying information and metadata is exposed.","sig":null,"attributes":[{"value":"/ Describes an entity about which identifying information and metadata is exposed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95684,"byte_end":95768,"line_start":43,"line_end":43,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95769,"byte_end":95772,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Items are sorted by their key, and are only overwritten if the value is an empty string.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":95773,"byte_end":95865,"line_start":45,"line_end":45,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96061,"byte_end":96068,"line_start":53,"line_end":53,"column_start":8,"column_end":15},"name":"default","qualname":"<Resource as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":613},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96284,"byte_end":96289,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"empty","qualname":"<Resource>::empty","value":"fn empty() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty resource.\n","sig":null,"attributes":[{"value":"/ Creates an empty resource.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96242,"byte_end":96272,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96571,"byte_end":96574,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<Resource>::new","value":"fn new<T>(T) -> Self where T: IntoIterator<Item = KeyValue>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` from key value pairs.","sig":null,"attributes":[{"value":"/ Create a new `Resource` from key value pairs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96377,"byte_end":96426,"line_start":69,"line_end":69,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96431,"byte_end":96434,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Values are de-duplicated by key, and the first key-value pair with a non-empty string value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96439,"byte_end":96534,"line_start":71,"line_end":71,"column_start":5,"column_end":100}},{"value":"/ will be retained","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96539,"byte_end":96559,"line_start":72,"line_end":72,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96924,"byte_end":96938,"line_start":86,"line_end":86,"column_start":12,"column_end":26},"name":"from_detectors","qualname":"<Resource>::from_detectors","value":"fn from_detectors(Duration, Vec<Box<dyn ResourceDetector>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` from resource detectors.","sig":null,"attributes":[{"value":"/ Create a new `Resource` from resource detectors.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96802,"byte_end":96854,"line_start":83,"line_end":83,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96859,"byte_end":96862,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ timeout will be applied to each detector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96867,"byte_end":96912,"line_start":85,"line_end":85,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":97580,"byte_end":97585,"line_start":103,"line_end":103,"column_start":12,"column_end":17},"name":"merge","qualname":"<Resource>::merge","value":"fn merge<T>(&Self, T) -> Self where T: Deref<Target = Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Resource` by combining two resources.","sig":null,"attributes":[{"value":"/ Create a new `Resource` by combining two resources.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":97378,"byte_end":97433,"line_start":99,"line_end":99,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":97438,"byte_end":97441,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Keys from the `other` resource have priority over keys from this resource, even if the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":97446,"byte_end":97536,"line_start":101,"line_end":101,"column_start":5,"column_end":95}},{"value":"/ updated value is empty.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":97541,"byte_end":97568,"line_start":102,"line_end":102,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98243,"byte_end":98246,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"len","qualname":"<Resource>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of attributes for this resource\n","sig":null,"attributes":[{"value":"/ Returns the number of attributes for this resource","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98177,"byte_end":98231,"line_start":124,"line_end":124,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98371,"byte_end":98379,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Resource>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the resource contains no attributes.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the resource contains no attributes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98301,"byte_end":98359,"line_start":129,"line_end":129,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98523,"byte_end":98527,"line_start":135,"line_end":135,"column_start":12,"column_end":16},"name":"iter","qualname":"<Resource>::iter","value":"fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the attributes of this resource, sorted by key.\n","sig":null,"attributes":[{"value":"/ Gets an iterator over the attributes of this resource, sorted by key.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98438,"byte_end":98511,"line_start":134,"line_end":134,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98659,"byte_end":98662,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"get","qualname":"<Resource>::get","value":"fn get(&Self, Key) -> Option<Value>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the value from resource associate with given key.\n","sig":null,"attributes":[{"value":"/ Retrieve the value from resource associate with given key.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98585,"byte_end":98647,"line_start":139,"line_end":139,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2449},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99070,"byte_end":99078,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::resource::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `Resource`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `Resource`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":98986,"byte_end":99041,"line_start":152,"line_end":152,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99181,"byte_end":99185,"line_start":159,"line_end":159,"column_start":8,"column_end":12},"name":"next","qualname":"<IntoIter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99353,"byte_end":99362,"line_start":168,"line_end":168,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<Resource as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2454},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99517,"byte_end":99521,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::resource::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of a `Resource`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of a `Resource`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99439,"byte_end":99488,"line_start":173,"line_end":173,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99640,"byte_end":99644,"line_start":180,"line_end":180,"column_start":8,"column_end":12},"name":"next","qualname":"<Iter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99828,"byte_end":99837,"line_start":189,"line_end":189,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a Resource as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":639},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100130,"byte_end":100146,"line_start":198,"line_end":198,"column_start":11,"column_end":27},"name":"ResourceDetector","qualname":"::sdk::resource::ResourceDetector","value":"ResourceDetector","parent":null,"children":[{"krate":0,"index":640}],"decl_id":null,"docs":" ResourceDetector detects OpenTelemetry resource information","sig":null,"attributes":[{"value":"/ ResourceDetector detects OpenTelemetry resource information","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99905,"byte_end":99968,"line_start":194,"line_end":194,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99969,"byte_end":99972,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ Implementations of this trait can be passed to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99973,"byte_end":100023,"line_start":196,"line_end":196,"column_start":1,"column_end":51}},{"value":"/ the `Resource::from_detectors` function to generate a Resource from the merged information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100024,"byte_end":100119,"line_start":197,"line_end":197,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100593,"byte_end":100599,"line_start":207,"line_end":207,"column_start":8,"column_end":14},"name":"detect","qualname":"::sdk::resource::ResourceDetector::detect","value":"fn detect(&Self, Duration) -> Resource","parent":{"krate":0,"index":639},"children":[],"decl_id":null,"docs":" detect returns an initialized Resource based on gathered information.","sig":null,"attributes":[{"value":"/ detect returns an initialized Resource based on gathered information.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100153,"byte_end":100226,"line_start":199,"line_end":199,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100231,"byte_end":100234,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ timeout is used in case the detection operation takes too much time.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100239,"byte_end":100311,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100316,"byte_end":100319,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ If source information to construct a Resource is inaccessible, an empty Resource should be returned","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100324,"byte_end":100427,"line_start":203,"line_end":203,"column_start":5,"column_end":108}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100432,"byte_end":100435,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If source information to construct a Resource is invalid, for example,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100440,"byte_end":100514,"line_start":205,"line_end":205,"column_start":5,"column_end":79}},{"value":"/ missing required values. an empty Resource should be returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":100519,"byte_end":100585,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":641},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::sdk::trace","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":684},{"krate":0,"index":732},{"krate":0,"index":770},{"krate":0,"index":820},{"krate":0,"index":889},{"krate":0,"index":911},{"krate":0,"index":944},{"krate":0,"index":1009},{"krate":0,"index":1017},{"krate":0,"index":1153},{"krate":0,"index":1258},{"krate":0,"index":1259},{"krate":0,"index":1262},{"krate":0,"index":1265},{"krate":0,"index":1268},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1282},{"krate":0,"index":1285},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1292},{"krate":0,"index":1293},{"krate":0,"index":1296},{"krate":0,"index":1299},{"krate":0,"index":1302},{"krate":0,"index":1305},{"krate":0,"index":1308},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1315},{"krate":0,"index":1318},{"krate":0,"index":1321},{"krate":0,"index":1324},{"krate":0,"index":1327},{"krate":0,"index":1330}],"decl_id":null,"docs":" # OpenTelemetry Trace SDK","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44806,"byte_end":44831,"line_start":18,"line_end":18,"column_start":1,"column_end":26}},{"value":"/ # OpenTelemetry Trace SDK","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112013,"byte_end":112042,"line_start":1,"line_end":1,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112043,"byte_end":112046,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The tracing SDK consist of a few main structs:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112047,"byte_end":112097,"line_start":3,"line_end":3,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112098,"byte_end":112101,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * The `Tracer` struct which performs all tracing operations.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112102,"byte_end":112166,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ * The `Span` struct with is a mutable object storing information about the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112167,"byte_end":112245,"line_start":6,"line_end":6,"column_start":1,"column_end":79}},{"value":"/ current operation execution.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112246,"byte_end":112278,"line_start":7,"line_end":7,"column_start":1,"column_end":33}},{"value":"/ * The `TracerProvider` struct which configures and produces `Tracer`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/mod.rs","byte_start":112279,"byte_end":112353,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":665},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113450,"byte_end":113456,"line_start":12,"line_end":12,"column_start":8,"column_end":14},"name":"config","qualname":"::sdk::trace::config::config","value":"fn config() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Default trace configuration\n","sig":null,"attributes":[{"value":"/ Default trace configuration","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113411,"byte_end":113442,"line_start":11,"line_end":11,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2461},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113549,"byte_end":113555,"line_start":18,"line_end":18,"column_start":12,"column_end":18},"name":"Config","qualname":"::sdk::trace::config::Config","value":"Config { sampler, id_generator, span_limits, resource }","parent":null,"children":[{"krate":0,"index":2462},{"krate":0,"index":2463},{"krate":0,"index":2464},{"krate":0,"index":2465}],"decl_id":null,"docs":" Tracer configuration\n","sig":null,"attributes":[{"value":"/ Tracer configuration","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113496,"byte_end":113520,"line_start":16,"line_end":16,"column_start":1,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2462},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113610,"byte_end":113617,"line_start":20,"line_end":20,"column_start":9,"column_end":16},"name":"sampler","qualname":"::sdk::trace::config::Config::sampler","value":"std::boxed::Box<(dyn sdk::trace::sampler::ShouldSample + 'static)>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" The sampler that the sdk should use\n","sig":null,"attributes":[{"value":"/ The sampler that the sdk should use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113562,"byte_end":113601,"line_start":19,"line_end":19,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2463},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113711,"byte_end":113723,"line_start":22,"line_end":22,"column_start":9,"column_end":21},"name":"id_generator","qualname":"::sdk::trace::config::Config::id_generator","value":"std::boxed::Box<(dyn trace::IdGenerator + 'static)>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" The id generator that the sdk should use\n","sig":null,"attributes":[{"value":"/ The id generator that the sdk should use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113658,"byte_end":113702,"line_start":21,"line_end":21,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2464},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113775,"byte_end":113786,"line_start":24,"line_end":24,"column_start":9,"column_end":20},"name":"span_limits","qualname":"::sdk::trace::config::Config::span_limits","value":"sdk::trace::span_limit::SpanLimits","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" span limits\n","sig":null,"attributes":[{"value":"/ span limits","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113751,"byte_end":113766,"line_start":23,"line_end":23,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2465},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113884,"byte_end":113892,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"name":"resource","qualname":"::sdk::trace::config::Config::resource","value":"std::option::Option<std::sync::Arc<sdk::resource::Resource>>","parent":{"krate":0,"index":2461},"children":[],"decl_id":null,"docs":" Contains attributes representing an entity that produces telemetry.\n","sig":null,"attributes":[{"value":"/ Contains attributes representing an entity that produces telemetry.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113804,"byte_end":113875,"line_start":25,"line_end":25,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113990,"byte_end":114002,"line_start":31,"line_end":31,"column_start":12,"column_end":24},"name":"with_sampler","qualname":"<Config>::with_sampler","value":"fn with_sampler<T>(Self, T) -> Self where T: sdk::trace::ShouldSample +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Specify the sampler to be used.\n","sig":null,"attributes":[{"value":"/ Specify the sampler to be used.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113943,"byte_end":113978,"line_start":30,"line_end":30,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114192,"byte_end":114209,"line_start":37,"line_end":37,"column_start":12,"column_end":29},"name":"with_id_generator","qualname":"<Config>::with_id_generator","value":"fn with_id_generator<T>(Self, T) -> Self where T: IdGenerator + 'static","parent":null,"children":[],"decl_id":null,"docs":" Specify the id generator to be used.\n","sig":null,"attributes":[{"value":"/ Specify the id generator to be used.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114140,"byte_end":114180,"line_start":36,"line_end":36,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114418,"byte_end":114442,"line_start":43,"line_end":43,"column_start":12,"column_end":36},"name":"with_max_events_per_span","qualname":"<Config>::with_max_events_per_span","value":"fn with_max_events_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of events to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of events to be recorded per span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114349,"byte_end":114406,"line_start":42,"line_end":42,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":672},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114636,"byte_end":114664,"line_start":49,"line_end":49,"column_start":12,"column_end":40},"name":"with_max_attributes_per_span","qualname":"<Config>::with_max_attributes_per_span","value":"fn with_max_attributes_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of attributes to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of attributes to be recorded per span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114563,"byte_end":114624,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114866,"byte_end":114889,"line_start":55,"line_end":55,"column_start":12,"column_end":35},"name":"with_max_links_per_span","qualname":"<Config>::with_max_links_per_span","value":"fn with_max_links_per_span(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of events to be recorded per span.\n","sig":null,"attributes":[{"value":"/ Specify the number of events to be recorded per span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":114797,"byte_end":114854,"line_start":54,"line_end":54,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115075,"byte_end":115104,"line_start":61,"line_end":61,"column_start":12,"column_end":41},"name":"with_max_attributes_per_event","qualname":"<Config>::with_max_attributes_per_event","value":"fn with_max_attributes_per_event(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of attributes one event can have.\n","sig":null,"attributes":[{"value":"/ Specify the number of attributes one event can have.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115007,"byte_end":115063,"line_start":60,"line_end":60,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115305,"byte_end":115333,"line_start":67,"line_end":67,"column_start":12,"column_end":40},"name":"with_max_attributes_per_link","qualname":"<Config>::with_max_attributes_per_link","value":"fn with_max_attributes_per_link(Self, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the number of attributes one link can have.\n","sig":null,"attributes":[{"value":"/ Specify the number of attributes one link can have.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115238,"byte_end":115293,"line_start":66,"line_end":66,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115519,"byte_end":115535,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"with_span_limits","qualname":"<Config>::with_span_limits","value":"fn with_span_limits(Self, SpanLimits) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify all limit via the span_limits\n","sig":null,"attributes":[{"value":"/ Specify all limit via the span_limits","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115466,"byte_end":115507,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115731,"byte_end":115744,"line_start":79,"line_end":79,"column_start":12,"column_end":25},"name":"with_resource","qualname":"<Config>::with_resource","value":"fn with_resource(Self, sdk::Resource) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify the attributes representing the entity that produces telemetry\n","sig":null,"attributes":[{"value":"/ Specify the attributes representing the entity that produces telemetry","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115645,"byte_end":115719,"line_start":78,"line_end":78,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116234,"byte_end":116250,"line_start":90,"line_end":90,"column_start":12,"column_end":28},"name":"with_no_resource","qualname":"<Config>::with_no_resource","value":"fn with_no_resource(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Use empty resource instead of default resource in this config.","sig":null,"attributes":[{"value":"/ Use empty resource instead of default resource in this config.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115864,"byte_end":115930,"line_start":84,"line_end":84,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115935,"byte_end":115938,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Usually if no resource is provided, SDK will assign a default resource","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":115943,"byte_end":116017,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ to the `TracerProvider`, which could impact the performance. Performance","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116022,"byte_end":116098,"line_start":87,"line_end":87,"column_start":5,"column_end":81}},{"value":"/ sensitive application can use function to disable such behavior and assign","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116103,"byte_end":116181,"line_start":88,"line_end":88,"column_start":5,"column_end":83}},{"value":"/ no resource to `TracerProvider`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116186,"byte_end":116222,"line_start":89,"line_end":89,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116409,"byte_end":116416,"line_start":97,"line_end":97,"column_start":8,"column_end":15},"name":"default","qualname":"<Config as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":" Create default global sdk configuration.\n","sig":null,"attributes":[{"value":"/ Create default global sdk configuration.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116357,"byte_end":116401,"line_start":96,"line_end":96,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2468},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":117950,"byte_end":117964,"line_start":13,"line_end":13,"column_start":12,"column_end":26},"name":"EvictedHashMap","qualname":"::sdk::trace::evicted_hash_map::EvictedHashMap","value":"EvictedHashMap {  }","parent":null,"children":[{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472}],"decl_id":null,"docs":" A hash map with a capped number of attributes that retains the most\n recently set entries.\n","sig":null,"attributes":[{"value":"/ A hash map with a capped number of attributes that retains the most","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":117739,"byte_end":117810,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ recently set entries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":117811,"byte_end":117836,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118184,"byte_end":118187,"line_start":22,"line_end":22,"column_start":12,"column_end":15},"name":"new","qualname":"<EvictedHashMap>::new","value":"fn new(u32, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EvictedHashMap` with a given max length and capacity.\n","sig":null,"attributes":[{"value":"/ Create a new `EvictedHashMap` with a given max length and capacity.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118101,"byte_end":118172,"line_start":21,"line_end":21,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":707},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118474,"byte_end":118480,"line_start":32,"line_end":32,"column_start":12,"column_end":18},"name":"insert","qualname":"<EvictedHashMap>::insert","value":"fn insert(&mut Self, KeyValue)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.\n","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118420,"byte_end":118462,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119326,"byte_end":119329,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"len","qualname":"<EvictedHashMap>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the map.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119268,"byte_end":119314,"line_start":60,"line_end":60,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119433,"byte_end":119441,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EvictedHashMap>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the map is empty.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119382,"byte_end":119421,"line_start":65,"line_end":65,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119549,"byte_end":119562,"line_start":71,"line_end":71,"column_start":12,"column_end":25},"name":"dropped_count","qualname":"<EvictedHashMap>::dropped_count","value":"fn dropped_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the dropped attribute count\n","sig":null,"attributes":[{"value":"/ Returns the dropped attribute count","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119498,"byte_end":119537,"line_start":70,"line_end":70,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119666,"byte_end":119670,"line_start":76,"line_end":76,"column_start":12,"column_end":16},"name":"iter","qualname":"<EvictedHashMap>::iter","value":"fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.\n","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119617,"byte_end":119654,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119819,"byte_end":119822,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"get","qualname":"<EvictedHashMap>::get","value":"fn get(&Self, &Key) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key if it exists\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key if it exists","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":119733,"byte_end":119807,"line_start":80,"line_end":80,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2481},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":120916,"byte_end":120924,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::trace::evicted_hash_map::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `EvictedHashMap`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `EvictedHashMap`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":120826,"byte_end":120887,"line_start":112,"line_end":112,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121044,"byte_end":121048,"line_start":119,"line_end":119,"column_start":8,"column_end":12},"name":"next","qualname":"<IntoIter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121222,"byte_end":121231,"line_start":128,"line_end":128,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<EvictedHashMap as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121429,"byte_end":121438,"line_start":137,"line_end":137,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a EvictedHashMap as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2486},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121589,"byte_end":121593,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::trace::evicted_hash_map::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of an `EvictedHashMap`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of an `EvictedHashMap`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121504,"byte_end":121560,"line_start":142,"line_end":142,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121729,"byte_end":121733,"line_start":149,"line_end":149,"column_start":8,"column_end":12},"name":"next","qualname":"<Iter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122833,"byte_end":122845,"line_start":12,"line_end":12,"column_start":12,"column_end":24},"name":"EvictedQueue","qualname":"::sdk::trace::evicted_queue::EvictedQueue","value":"EvictedQueue {  }","parent":null,"children":[{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497}],"decl_id":null,"docs":" This queue maintains an ordered list of elements, and a count of\n dropped elements. Elements are removed from the queue in a first\n in first out fashion.\n","sig":null,"attributes":[{"value":"/ This queue maintains an ordered list of elements, and a count of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122556,"byte_end":122624,"line_start":7,"line_end":7,"column_start":1,"column_end":69}},{"value":"/ dropped elements. Elements are removed from the queue in a first","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122625,"byte_end":122693,"line_start":8,"line_end":8,"column_start":1,"column_end":69}},{"value":"/ in first out fashion.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122694,"byte_end":122719,"line_start":9,"line_end":9,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123026,"byte_end":123029,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<EvictedQueue<T>>::new","value":"fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `EvictedQueue` with a given max length.\n","sig":null,"attributes":[{"value":"/ Create a new `EvictedQueue` with a given max length.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122958,"byte_end":123014,"line_start":19,"line_end":19,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123654,"byte_end":123664,"line_start":40,"line_end":40,"column_start":12,"column_end":22},"name":"append_vec","qualname":"<EvictedQueue<T>>::append_vec","value":"fn append_vec(&mut Self, &mut Vec<T>)","parent":null,"children":[],"decl_id":null,"docs":" Moves all the elements of other into self, leaving other empty.\n","sig":null,"attributes":[{"value":"/ Moves all the elements of other into self, leaving other empty.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123575,"byte_end":123642,"line_start":39,"line_end":39,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123809,"byte_end":123817,"line_start":45,"line_end":45,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<EvictedQueue<T>>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `EvictedQueue` is empty.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `EvictedQueue` is empty.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123747,"byte_end":123797,"line_start":44,"line_end":44,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123962,"byte_end":123966,"line_start":50,"line_end":50,"column_start":12,"column_end":16},"name":"iter","qualname":"<EvictedQueue<T>>::iter","value":"fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a front-to-back iterator.\n","sig":null,"attributes":[{"value":"/ Returns a front-to-back iterator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":123913,"byte_end":123950,"line_start":49,"line_end":49,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124131,"byte_end":124134,"line_start":55,"line_end":55,"column_start":12,"column_end":15},"name":"len","qualname":"<EvictedQueue<T>>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the `EvictedQueue`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124062,"byte_end":124119,"line_start":54,"line_end":54,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124266,"byte_end":124279,"line_start":60,"line_end":60,"column_start":12,"column_end":25},"name":"dropped_count","qualname":"<EvictedQueue<T>>::dropped_count","value":"fn dropped_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Count of dropped attributes\n","sig":null,"attributes":[{"value":"/ Count of dropped attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124223,"byte_end":124254,"line_start":59,"line_end":59,"column_start":5,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124420,"byte_end":124428,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::sdk::trace::evicted_queue::IntoIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An owned iterator over the entries of a `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ An owned iterator over the entries of a `EvictedQueue`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124332,"byte_end":124391,"line_start":65,"line_end":65,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124546,"byte_end":124550,"line_start":72,"line_end":72,"column_start":8,"column_end":12},"name":"next","qualname":"<IntoIter<T> as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124751,"byte_end":124760,"line_start":81,"line_end":81,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<EvictedQueue<T> as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124939,"byte_end":124943,"line_start":88,"line_end":88,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sdk::trace::evicted_queue::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of an `EvictedQueue`.\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of an `EvictedQueue`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124856,"byte_end":124910,"line_start":86,"line_end":86,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125082,"byte_end":125086,"line_start":93,"line_end":93,"column_start":8,"column_end":12},"name":"next","qualname":"<Iter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125231,"byte_end":125237,"line_start":99,"line_end":99,"column_start":8,"column_end":14},"name":"extend","qualname":"<EvictedQueue<T> as std::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = T>","parent":{"krate":2,"index":8288},"children":[],"decl_id":{"krate":2,"index":8290},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128553,"byte_end":128568,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"XrayIdGenerator","qualname":"::sdk::trace::id_generator::aws::XrayIdGenerator","value":"XrayIdGenerator {  }","parent":null,"children":[{"krate":0,"index":2527}],"decl_id":null,"docs":" Generates AWS X-Ray compliant Trace and Span ids.","sig":null,"attributes":[{"value":"/ Generates AWS X-Ray compliant Trace and Span ids.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":126890,"byte_end":126943,"line_start":5,"line_end":5,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":126944,"byte_end":126947,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Generates OpenTelemetry formatted `TraceId`'s and `SpanId`'s. The `TraceId`'s are generated so","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":126948,"byte_end":127046,"line_start":7,"line_end":7,"column_start":1,"column_end":99}},{"value":"/ they can be backed out into X-Ray format by the [AWS X-Ray Exporter][xray-exporter] in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127047,"byte_end":127141,"line_start":8,"line_end":8,"column_start":1,"column_end":95}},{"value":"/ [OpenTelemetry Collector][otel-collector].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127142,"byte_end":127188,"line_start":9,"line_end":9,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127189,"byte_end":127192,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ## Trace ID Format","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127193,"byte_end":127215,"line_start":11,"line_end":11,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127216,"byte_end":127219,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ A `trace_id` consists of three numbers separated by hyphens. For example, `1-58406520-a006649127e371903a2de979`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127220,"byte_end":127336,"line_start":13,"line_end":13,"column_start":1,"column_end":117}},{"value":"/ This includes:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127337,"byte_end":127355,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127356,"byte_end":127359,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ * The version number, that is, 1.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127360,"byte_end":127397,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ * The time of the original request, in Unix epoch time, in 8 hexadecimal digits.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127398,"byte_end":127482,"line_start":17,"line_end":17,"column_start":1,"column_end":85}},{"value":"/ * For example, 10:00AM December 1st, 2016 PST in epoch time is 1480615200 seconds, or 58406520 in hexadecimal digits.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127483,"byte_end":127604,"line_start":18,"line_end":18,"column_start":1,"column_end":122}},{"value":"/ * A 96-bit identifier for the trace, globally unique, in 24 hexadecimal digits.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127605,"byte_end":127688,"line_start":19,"line_end":19,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127689,"byte_end":127692,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ See the [AWS X-Ray Documentation][xray-trace-id] for more details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127693,"byte_end":127763,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127764,"byte_end":127767,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127768,"byte_end":127782,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127783,"byte_end":127786,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127787,"byte_end":127794,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::trace::noop::NoopSpanExporter;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127795,"byte_end":127848,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/ use opentelemetry::sdk::trace::{self, TracerProvider, XrayIdGenerator};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127849,"byte_end":127924,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127925,"byte_end":127928,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let _provider: TracerProvider = TracerProvider::builder()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127929,"byte_end":127990,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/     .with_simple_exporter(NoopSpanExporter::new())","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":127991,"byte_end":128045,"line_start":30,"line_end":30,"column_start":1,"column_end":55}},{"value":"/     .with_config(trace::config().with_id_generator(XrayIdGenerator::default()))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128046,"byte_end":128129,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/     .build();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128130,"byte_end":128147,"line_start":32,"line_end":32,"column_start":1,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128148,"byte_end":128155,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128156,"byte_end":128159,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [otel-collector]: https://github.com/open-telemetry/opentelemetry-collector-contrib#opentelemetry-collector-contrib","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128160,"byte_end":128279,"line_start":35,"line_end":35,"column_start":1,"column_end":120}},{"value":"/ [xray-exporter]: https://godoc.org/github.com/open-telemetry/opentelemetry-collector-contrib/exporter/awsxrayexporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128280,"byte_end":128401,"line_start":36,"line_end":36,"column_start":1,"column_end":122}},{"value":"/ [xray-trace-id]: https://docs.aws.amazon.com/xray/latest/devguide/xray-api-sendingdata.html#xray-api-traceids","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128402,"byte_end":128515,"line_start":37,"line_end":37,"column_start":1,"column_end":114}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128749,"byte_end":128761,"line_start":45,"line_end":45,"column_start":8,"column_end":20},"name":"new_trace_id","qualname":"<XrayIdGenerator as trace::IdGenerator>::new_trace_id","value":"fn new_trace_id(&Self) -> TraceId","parent":{"krate":0,"index":2195},"children":[],"decl_id":{"krate":0,"index":2196},"docs":" Generates a new `TraceId` that can be converted to an X-Ray Trace ID\n","sig":null,"attributes":[{"value":"/ Generates a new `TraceId` that can be converted to an X-Ray Trace ID","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128669,"byte_end":128741,"line_start":44,"line_end":44,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":129346,"byte_end":129357,"line_start":61,"line_end":61,"column_start":8,"column_end":19},"name":"new_span_id","qualname":"<XrayIdGenerator as trace::IdGenerator>::new_span_id","value":"fn new_span_id(&Self) -> SpanId","parent":{"krate":0,"index":2195},"children":[],"decl_id":{"krate":0,"index":2197},"docs":" Generates a new `SpanId` that can be converted to an X-Ray Segment ID\n","sig":null,"attributes":[{"value":"/ Generates a new `SpanId` that can be converted to an X-Ray Segment ID","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":129265,"byte_end":129338,"line_start":60,"line_end":60,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126171,"byte_end":126182,"line_start":11,"line_end":11,"column_start":12,"column_end":23},"name":"IdGenerator","qualname":"::sdk::trace::id_generator::IdGenerator","value":"IdGenerator {  }","parent":null,"children":[{"krate":0,"index":2533}],"decl_id":null,"docs":" Default [`crate::trace::IdGenerator`] implementation.\n Generates Trace and Span ids using a random number generator.\n","sig":null,"attributes":[{"value":"/ Default [`crate::trace::IdGenerator`] implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126003,"byte_end":126060,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/ Generates Trace and Span ids using a random number generator.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126061,"byte_end":126126,"line_start":9,"line_end":9,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126316,"byte_end":126328,"line_start":17,"line_end":17,"column_start":8,"column_end":20},"name":"new_trace_id","qualname":"<IdGenerator as trace::IdGenerator>::new_trace_id","value":"fn new_trace_id(&Self) -> TraceId","parent":{"krate":0,"index":2195},"children":[],"decl_id":{"krate":0,"index":2196},"docs":" Generate new `TraceId` using thread local rng\n","sig":null,"attributes":[{"value":"/ Generate new `TraceId` using thread local rng","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126259,"byte_end":126308,"line_start":16,"line_end":16,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":817},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126498,"byte_end":126509,"line_start":22,"line_end":22,"column_start":8,"column_end":19},"name":"new_span_id","qualname":"<IdGenerator as trace::IdGenerator>::new_span_id","value":"fn new_span_id(&Self) -> SpanId","parent":{"krate":0,"index":2195},"children":[],"decl_id":{"krate":0,"index":2197},"docs":" Generate new `SpanId` using thread local rng\n","sig":null,"attributes":[{"value":"/ Generate new `SpanId` using thread local rng","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126442,"byte_end":126490,"line_start":21,"line_end":21,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":2550},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131704,"byte_end":131718,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"TracerProvider","qualname":"::sdk::trace::provider::TracerProvider","value":"TracerProvider {  }","parent":null,"children":[{"krate":0,"index":2551}],"decl_id":null,"docs":" Creator and registry of named `Tracer` instances.\n","sig":null,"attributes":[{"value":"/ Creator and registry of named `Tracer` instances.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131615,"byte_end":131668,"line_start":43,"line_end":43,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131802,"byte_end":131809,"line_start":50,"line_end":50,"column_start":8,"column_end":15},"name":"default","qualname":"<TracerProvider as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132094,"byte_end":132101,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"builder","qualname":"<TracerProvider>::builder","value":"fn builder() -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a new `TracerProvider` builder.\n","sig":null,"attributes":[{"value":"/ Create a new `TracerProvider` builder.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132040,"byte_end":132082,"line_start":61,"line_end":61,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132216,"byte_end":132231,"line_start":67,"line_end":67,"column_start":12,"column_end":27},"name":"span_processors","qualname":"<TracerProvider>::span_processors","value":"fn span_processors(&Self) -> &Vec<Box<dyn SpanProcessor>>","parent":null,"children":[],"decl_id":null,"docs":" Span processors associated with this provider\n","sig":null,"attributes":[{"value":"/ Span processors associated with this provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132155,"byte_end":132204,"line_start":66,"line_end":66,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132365,"byte_end":132371,"line_start":72,"line_end":72,"column_start":12,"column_end":18},"name":"config","qualname":"<TracerProvider>::config","value":"fn config(&Self) -> &sdk::trace::Config","parent":null,"children":[],"decl_id":null,"docs":" Config associated with this tracer\n","sig":null,"attributes":[{"value":"/ Config associated with this tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132315,"byte_end":132353,"line_start":71,"line_end":71,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132668,"byte_end":132684,"line_start":82,"line_end":82,"column_start":8,"column_end":24},"name":"versioned_tracer","qualname":"<TracerProvider as trace::tracer_provider::TracerProvider>::versioned_tracer","value":"fn versioned_tracer<impl Into<Cow<'static, str>>>(&Self,\nimpl Into<Cow<'static, str>>, Option<&'static str>, Option<&'static str>)\n-> Self::Tracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2115},"docs":" Create a new versioned `Tracer` instance.\n","sig":null,"attributes":[{"value":"/ Create a new versioned `Tracer` instance.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132615,"byte_end":132660,"line_start":81,"line_end":81,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133386,"byte_end":133397,"line_start":102,"line_end":102,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<TracerProvider as trace::tracer_provider::TracerProvider>::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2117},"docs":" Force flush all remaining spans in span processors and return results.\n","sig":null,"attributes":[{"value":"/ Force flush all remaining spans in span processors and return results.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133304,"byte_end":133378,"line_start":101,"line_end":101,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2556},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133633,"byte_end":133640,"line_start":112,"line_end":112,"column_start":12,"column_end":19},"name":"Builder","qualname":"::sdk::trace::provider::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":2557},{"krate":0,"index":2558},{"krate":0,"index":2559}],"decl_id":null,"docs":" Builder for provider attributes.\n","sig":null,"attributes":[{"value":"/ Builder for provider attributes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133568,"byte_end":133604,"line_start":110,"line_end":110,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133794,"byte_end":133801,"line_start":119,"line_end":119,"column_start":8,"column_end":15},"name":"default","qualname":"<Builder as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":879},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134293,"byte_end":134313,"line_start":136,"line_end":136,"column_start":12,"column_end":32},"name":"with_simple_exporter","qualname":"<Builder>::with_simple_exporter","value":"fn with_simple_exporter<T>(Self, T) -> Self where T: SpanExporter + 'static","parent":null,"children":[],"decl_id":null,"docs":" The `SpanExporter` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanExporter` that this provider should use.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134228,"byte_end":134281,"line_start":135,"line_end":135,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":881},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134691,"byte_end":134710,"line_start":146,"line_end":146,"column_start":12,"column_end":31},"name":"with_batch_exporter","qualname":"<Builder>::with_batch_exporter","value":"fn with_batch_exporter<T, R>(Self, T, R) -> Self where T: SpanExporter +\n'static, R: TraceRuntime","parent":null,"children":[],"decl_id":null,"docs":" The `SpanExporter` setup using a default `BatchSpanProcessor` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanExporter` setup using a default `BatchSpanProcessor` that this provider should use.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134583,"byte_end":134679,"line_start":145,"line_end":145,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135032,"byte_end":135051,"line_start":156,"line_end":156,"column_start":12,"column_end":31},"name":"with_span_processor","qualname":"<Builder>::with_span_processor","value":"fn with_span_processor<T>(Self, T) -> Self where T: SpanProcessor + 'static","parent":null,"children":[],"decl_id":null,"docs":" The `SpanProcessor` that this provider should use.\n","sig":null,"attributes":[{"value":"/ The `SpanProcessor` that this provider should use.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134966,"byte_end":135020,"line_start":155,"line_end":155,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135314,"byte_end":135325,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"with_config","qualname":"<Builder>::with_config","value":"fn with_config(Self, sdk::trace::Config) -> Self","parent":null,"children":[],"decl_id":null,"docs":" The sdk `Config` that this provider will use.\n","sig":null,"attributes":[{"value":"/ The sdk `Config` that this provider will use.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135253,"byte_end":135302,"line_start":163,"line_end":163,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135654,"byte_end":135675,"line_start":172,"line_end":172,"column_start":12,"column_end":33},"name":"sdk_provided_resource","qualname":"<Builder>::sdk_provided_resource","value":"fn sdk_provided_resource(&Self) -> Resource","parent":null,"children":[],"decl_id":null,"docs":" Return the clone of sdk provided resource.","sig":null,"attributes":[{"value":"/ Return the clone of sdk provided resource.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135416,"byte_end":135462,"line_start":168,"line_end":168,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135467,"byte_end":135470,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ See <https://github.com/open-telemetry/opentelemetry-specification/blob/v1.8.0/specification/resource/sdk.md#sdk-provided-resource-attributes>","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135475,"byte_end":135621,"line_start":170,"line_end":170,"column_start":5,"column_end":151}},{"value":"/ for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135626,"byte_end":135642,"line_start":171,"line_end":171,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135813,"byte_end":135818,"line_start":177,"line_end":177,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"fn build(Self) -> TracerProvider","parent":null,"children":[],"decl_id":null,"docs":" Create a new provider from this configuration.\n","sig":null,"attributes":[{"value":"/ Create a new provider from this configuration.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":135751,"byte_end":135801,"line_start":176,"line_end":176,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":905},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142340,"byte_end":142352,"line_start":39,"line_end":39,"column_start":11,"column_end":23},"name":"TraceRuntime","qualname":"::sdk::trace::runtime::TraceRuntime","value":"TraceRuntime: Runtime","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908}],"decl_id":null,"docs":" Trace runtime is an extension to [`Runtime`]. Currently it provides a channel that used\n by [`BatchSpanProcessor`].","sig":null,"attributes":[{"value":"/ Trace runtime is an extension to [`Runtime`]. Currently it provides a channel that used","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142096,"byte_end":142187,"line_start":34,"line_end":34,"column_start":1,"column_end":92}},{"value":"/ by [`BatchSpanProcessor`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142188,"byte_end":142218,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142219,"byte_end":142222,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ [`BatchSpanProcessor`]: crate::sdk::trace::BatchSpanProcessor","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142223,"byte_end":142288,"line_start":37,"line_end":37,"column_start":1,"column_end":66}},{"value":"/ [`Runtime`]: crate::runtime::Runtime","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142289,"byte_end":142329,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":906},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142442,"byte_end":142450,"line_start":41,"line_end":41,"column_start":10,"column_end":18},"name":"Receiver","qualname":"::sdk::trace::runtime::TraceRuntime::Receiver","value":"type Receiver: Stream<Item = BatchMessage> + Send;","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" A future stream to receive the batch messages from channels.\n","sig":null,"attributes":[{"value":"/ A future stream to receive the batch messages from channels.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142368,"byte_end":142432,"line_start":40,"line_end":40,"column_start":5,"column_end":69}}]},{"kind":"Type","id":{"krate":0,"index":907},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142571,"byte_end":142577,"line_start":44,"line_end":44,"column_start":10,"column_end":16},"name":"Sender","qualname":"::sdk::trace::runtime::TraceRuntime::Sender","value":"type Sender: TrySend + Debug;","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" A batch messages sender that could be sent across thread safely.\n","sig":null,"attributes":[{"value":"/ A batch messages sender that could be sent across thread safely.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142493,"byte_end":142561,"line_start":43,"line_end":43,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142685,"byte_end":142706,"line_start":47,"line_end":47,"column_start":8,"column_end":29},"name":"batch_message_channel","qualname":"::sdk::trace::runtime::TraceRuntime::batch_message_channel","value":"fn batch_message_channel(&Self, usize) -> (Self::Sender, Self::Receiver)","parent":{"krate":0,"index":905},"children":[],"decl_id":null,"docs":" Return the sender and receiver used to send batch message between tasks.\n","sig":null,"attributes":[{"value":"/ Return the sender and receiver used to send batch message between tasks.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142601,"byte_end":142677,"line_start":46,"line_end":46,"column_start":5,"column_end":81}}]},{"kind":"Trait","id":{"krate":0,"index":909},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142872,"byte_end":142879,"line_start":51,"line_end":51,"column_start":11,"column_end":18},"name":"TrySend","qualname":"::sdk::trace::runtime::TrySend","value":"TrySend: Sync + Send","parent":null,"children":[{"krate":0,"index":910}],"decl_id":null,"docs":" TrySend is an abstraction of sender that is capable to send BatchMessage with reference.\n","sig":null,"attributes":[{"value":"/ TrySend is an abstraction of sender that is capable to send BatchMessage with reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142769,"byte_end":142861,"line_start":50,"line_end":50,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":143048,"byte_end":143056,"line_start":55,"line_end":55,"column_start":8,"column_end":16},"name":"try_send","qualname":"::sdk::trace::runtime::TrySend::try_send","value":"fn try_send(&Self, BatchMessage) -> Result<(), TraceError>","parent":{"krate":0,"index":909},"children":[],"decl_id":null,"docs":" Try to send one batch message to worker thread.","sig":null,"attributes":[{"value":"/ Try to send one batch message to worker thread.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142899,"byte_end":142950,"line_start":52,"line_end":52,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142955,"byte_end":142958,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ It can fail because either the receiver has closed or the buffer is full.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142963,"byte_end":143040,"line_start":54,"line_end":54,"column_start":5,"column_end":82}}]},{"kind":"Trait","id":{"krate":0,"index":938},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147961,"byte_end":147973,"line_start":51,"line_end":51,"column_start":11,"column_end":23},"name":"ShouldSample","qualname":"::sdk::trace::sampler::ShouldSample","value":"ShouldSample: Send + Sync + std::fmt::Debug","parent":null,"children":[{"krate":0,"index":939}],"decl_id":null,"docs":" The `ShouldSample` interface allows implementations to provide samplers\n which will return a sampling `SamplingResult` based on information that\n is typically available just before the `Span` was created.\n","sig":null,"attributes":[{"value":"/ The `ShouldSample` interface allows implementations to provide samplers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147736,"byte_end":147811,"line_start":48,"line_end":48,"column_start":1,"column_end":76}},{"value":"/ which will return a sampling `SamplingResult` based on information that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147812,"byte_end":147887,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ is typically available just before the `Span` was created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147888,"byte_end":147950,"line_start":50,"line_end":50,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148122,"byte_end":148135,"line_start":54,"line_end":54,"column_start":8,"column_end":21},"name":"should_sample","qualname":"::sdk::trace::sampler::ShouldSample::should_sample","value":"fn should_sample(&Self, Option<&Context>, TraceId, &str, &SpanKind,\n&[KeyValue], &[Link], &InstrumentationLibrary) -> SamplingResult","parent":{"krate":0,"index":938},"children":[],"decl_id":null,"docs":" Returns the `SamplingDecision` for a `Span` to be created.\n","sig":null,"attributes":[{"value":"/ Returns the `SamplingDecision` for a `Span` to be created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148011,"byte_end":148073,"line_start":52,"line_end":52,"column_start":5,"column_end":67}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148078,"byte_end":148114,"line_start":53,"line_end":53,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2562},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148513,"byte_end":148527,"line_start":68,"line_end":68,"column_start":12,"column_end":26},"name":"SamplingResult","qualname":"::sdk::trace::sampler::SamplingResult","value":"SamplingResult { decision, attributes, trace_state }","parent":null,"children":[{"krate":0,"index":2563},{"krate":0,"index":2564},{"krate":0,"index":2565}],"decl_id":null,"docs":" The result of sampling logic for a given `Span`.\n","sig":null,"attributes":[{"value":"/ The result of sampling logic for a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148414,"byte_end":148466,"line_start":66,"line_end":66,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2563},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148588,"byte_end":148596,"line_start":70,"line_end":70,"column_start":9,"column_end":17},"name":"decision","qualname":"::sdk::trace::sampler::SamplingResult::decision","value":"sdk::trace::sampler::SamplingDecision","parent":{"krate":0,"index":2562},"children":[],"decl_id":null,"docs":" `SamplingDecision` reached by this result\n","sig":null,"attributes":[{"value":"/ `SamplingDecision` reached by this result","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148534,"byte_end":148579,"line_start":69,"line_end":69,"column_start":5,"column_end":50}}]},{"kind":"Field","id":{"krate":0,"index":2564},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148670,"byte_end":148680,"line_start":72,"line_end":72,"column_start":9,"column_end":19},"name":"attributes","qualname":"::sdk::trace::sampler::SamplingResult::attributes","value":"std::vec::Vec<common::KeyValue>","parent":{"krate":0,"index":2562},"children":[],"decl_id":null,"docs":" Extra attributes added by this result\n","sig":null,"attributes":[{"value":"/ Extra attributes added by this result","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148620,"byte_end":148661,"line_start":71,"line_end":71,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":2565},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148775,"byte_end":148786,"line_start":74,"line_end":74,"column_start":9,"column_end":20},"name":"trace_state","qualname":"::sdk::trace::sampler::SamplingResult::trace_state","value":"trace::span_context::TraceState","parent":{"krate":0,"index":2562},"children":[],"decl_id":null,"docs":" Trace state from parent context, might be modified by sampler\n","sig":null,"attributes":[{"value":"/ Trace state from parent context, might be modified by sampler","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148701,"byte_end":148766,"line_start":73,"line_end":73,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149030,"byte_end":149034,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Drop","qualname":"::sdk::trace::sampler::SamplingDecision::Drop","value":"SamplingDecision::Drop","parent":{"krate":0,"index":2574},"children":[],"decl_id":null,"docs":" `is_recording() == false`, span will not be recorded and all events and\n attributes will be dropped.\n","sig":null,"attributes":[{"value":"/ `is_recording() == false`, span will not be recorded and all events and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148914,"byte_end":148989,"line_start":80,"line_end":80,"column_start":5,"column_end":80}},{"value":"/ attributes will be dropped.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148994,"byte_end":149025,"line_start":81,"line_end":81,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149110,"byte_end":149120,"line_start":84,"line_end":84,"column_start":5,"column_end":15},"name":"RecordOnly","qualname":"::sdk::trace::sampler::SamplingDecision::RecordOnly","value":"SamplingDecision::RecordOnly","parent":{"krate":0,"index":2574},"children":[],"decl_id":null,"docs":" `is_recording() == true`, but `Sampled` flag MUST NOT be set.\n","sig":null,"attributes":[{"value":"/ `is_recording() == true`, but `Sampled` flag MUST NOT be set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149040,"byte_end":149105,"line_start":83,"line_end":83,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149192,"byte_end":149207,"line_start":86,"line_end":86,"column_start":5,"column_end":20},"name":"RecordAndSample","qualname":"::sdk::trace::sampler::SamplingDecision::RecordAndSample","value":"SamplingDecision::RecordAndSample","parent":{"krate":0,"index":2574},"children":[],"decl_id":null,"docs":" `is_recording() == true` AND `Sampled` flag` MUST be set.\n","sig":null,"attributes":[{"value":"/ `is_recording() == true` AND `Sampled` flag` MUST be set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149126,"byte_end":149187,"line_start":85,"line_end":85,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2574},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148891,"byte_end":148907,"line_start":79,"line_end":79,"column_start":10,"column_end":26},"name":"SamplingDecision","qualname":"::sdk::trace::sampler::SamplingDecision","value":"enum SamplingDecision { Drop, RecordOnly, RecordAndSample, }","parent":null,"children":[{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2579}],"decl_id":null,"docs":" Decision about whether or not to sample\n","sig":null,"attributes":[{"value":"/ Decision about whether or not to sample","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":148803,"byte_end":148846,"line_start":77,"line_end":77,"column_start":1,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2589},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149390,"byte_end":149398,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"AlwaysOn","qualname":"::sdk::trace::sampler::Sampler::AlwaysOn","value":"Sampler::AlwaysOn","parent":{"krate":0,"index":2588},"children":[],"decl_id":null,"docs":" Always sample the trace\n","sig":null,"attributes":[{"value":"/ Always sample the trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149358,"byte_end":149385,"line_start":93,"line_end":93,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2591},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149435,"byte_end":149444,"line_start":96,"line_end":96,"column_start":5,"column_end":14},"name":"AlwaysOff","qualname":"::sdk::trace::sampler::Sampler::AlwaysOff","value":"Sampler::AlwaysOff","parent":{"krate":0,"index":2588},"children":[],"decl_id":null,"docs":" Never sample the trace\n","sig":null,"attributes":[{"value":"/ Never sample the trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149404,"byte_end":149430,"line_start":95,"line_end":95,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2593},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149551,"byte_end":149562,"line_start":98,"line_end":98,"column_start":5,"column_end":16},"name":"ParentBased","qualname":"::sdk::trace::sampler::Sampler::ParentBased","value":"Sampler::ParentBased(Box<Sampler>)","parent":{"krate":0,"index":2588},"children":[],"decl_id":null,"docs":" Respects the parent span's sampling decision or delegates a delegate sampler for root spans.\n","sig":null,"attributes":[{"value":"/ Respects the parent span's sampling decision or delegates a delegate sampler for root spans.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149450,"byte_end":149546,"line_start":97,"line_end":97,"column_start":5,"column_end":101}}]},{"kind":"Field","id":{"krate":0,"index":2595},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149563,"byte_end":149575,"line_start":98,"line_end":98,"column_start":17,"column_end":29},"name":"0","qualname":"::sdk::trace::sampler::Sampler::ParentBased::0","value":"std::boxed::Box<sdk::trace::sampler::Sampler>","parent":{"krate":0,"index":2593},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2596},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149846,"byte_end":149863,"line_start":102,"line_end":102,"column_start":5,"column_end":22},"name":"TraceIdRatioBased","qualname":"::sdk::trace::sampler::Sampler::TraceIdRatioBased","value":"Sampler::TraceIdRatioBased(f64)","parent":{"krate":0,"index":2588},"children":[],"decl_id":null,"docs":" Sample a given fraction of traces. Fractions >= 1 will always sample. If the parent span is\n sampled, then it's child spans will automatically be sampled. Fractions < 0 are treated as\n zero, but spans may still be sampled if their parent is.\n","sig":null,"attributes":[{"value":"/ Sample a given fraction of traces. Fractions >= 1 will always sample. If the parent span is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149582,"byte_end":149677,"line_start":99,"line_end":99,"column_start":5,"column_end":100}},{"value":"/ sampled, then it's child spans will automatically be sampled. Fractions < 0 are treated as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149682,"byte_end":149776,"line_start":100,"line_end":100,"column_start":5,"column_end":99}},{"value":"/ zero, but spans may still be sampled if their parent is.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149781,"byte_end":149841,"line_start":101,"line_end":101,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2598},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149864,"byte_end":149867,"line_start":102,"line_end":102,"column_start":23,"column_end":26},"name":"0","qualname":"::sdk::trace::sampler::Sampler::TraceIdRatioBased::0","value":"f64","parent":{"krate":0,"index":2596},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2588},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149344,"byte_end":149351,"line_start":92,"line_end":92,"column_start":10,"column_end":17},"name":"Sampler","qualname":"::sdk::trace::sampler::Sampler","value":"enum Sampler {\n    AlwaysOn,\n    AlwaysOff,\n    ParentBased(Box<Sampler>),\n    TraceIdRatioBased(f64),\n}","parent":null,"children":[{"krate":0,"index":2589},{"krate":0,"index":2591},{"krate":0,"index":2593},{"krate":0,"index":2596}],"decl_id":null,"docs":" Sampling options\n","sig":null,"attributes":[{"value":"/ Sampling options","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149212,"byte_end":149232,"line_start":89,"line_end":89,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149912,"byte_end":149925,"line_start":106,"line_end":106,"column_start":8,"column_end":21},"name":"should_sample","qualname":"<Sampler as sdk::trace::sampler::ShouldSample>::should_sample","value":"fn should_sample(&Self, Option<&Context>, TraceId, &str, &SpanKind,\n&[KeyValue], &[Link], &InstrumentationLibrary) -> SamplingResult","parent":{"krate":0,"index":938},"children":[],"decl_id":{"krate":0,"index":939},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":160434,"byte_end":160438,"line_start":20,"line_end":20,"column_start":12,"column_end":16},"name":"Span","qualname":"::sdk::trace::span::Span","value":"Span {  }","parent":null,"children":[{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611}],"decl_id":null,"docs":" Single operation within a trace.\n","sig":null,"attributes":[{"value":"/ Single operation within a trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":160369,"byte_end":160405,"line_start":18,"line_end":18,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162017,"byte_end":162030,"line_start":77,"line_end":77,"column_start":12,"column_end":25},"name":"exported_data","qualname":"<Span>::exported_data","value":"fn exported_data(&Self) -> Option<crate::sdk::export::trace::SpanData>","parent":null,"children":[],"decl_id":null,"docs":" Convert information in this span into `exporter::trace::SpanData`.\n This function copies all data from the current span, which will create a\n overhead.\n","sig":null,"attributes":[{"value":"/ Convert information in this span into `exporter::trace::SpanData`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":161836,"byte_end":161906,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/ This function copies all data from the current span, which will create a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":161911,"byte_end":161987,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ overhead.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":161992,"byte_end":162005,"line_start":76,"line_end":76,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162874,"byte_end":162898,"line_start":96,"line_end":96,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"<Span as trace::span::Span>::add_event_with_timestamp","value":"fn add_event_with_timestamp<T>(&mut Self, T, SystemTime, Vec<KeyValue>) where\nT: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1889},"docs":" Records events at a specific time in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ Records events at a specific time in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162508,"byte_end":162579,"line_start":91,"line_end":91,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162584,"byte_end":162587,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162592,"byte_end":162676,"line_start":93,"line_end":93,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162681,"byte_end":162817,"line_start":94,"line_end":94,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162822,"byte_end":162866,"line_start":95,"line_end":95,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":994},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163611,"byte_end":163623,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"span_context","qualname":"<Span as trace::span::Span>::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1891},"docs":" Returns the `SpanContext` for the given `Span`.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163552,"byte_end":163603,"line_start":118,"line_end":118,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163916,"byte_end":163928,"line_start":126,"line_end":126,"column_start":8,"column_end":20},"name":"is_recording","qualname":"<Span as trace::span::Span>::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1892},"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.\n Always returns false after span `end`.\n","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163687,"byte_end":163776,"line_start":123,"line_end":123,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163781,"byte_end":163861,"line_start":124,"line_end":124,"column_start":5,"column_end":85}},{"value":"/ Always returns false after span `end`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163866,"byte_end":163908,"line_start":125,"line_end":125,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164354,"byte_end":164367,"line_start":135,"line_end":135,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"<Span as trace::span::Span>::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1893},"docs":" Sets a single `Attribute` where the attribute properties are passed as arguments.","sig":null,"attributes":[{"value":"/ Sets a single `Attribute` where the attribute properties are passed as arguments.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":163985,"byte_end":164070,"line_start":130,"line_end":130,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164075,"byte_end":164078,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164083,"byte_end":164151,"line_start":132,"line_end":132,"column_start":5,"column_end":73}},{"value":"/ attributes\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164156,"byte_end":164298,"line_start":133,"line_end":133,"column_start":5,"column_end":147}},{"value":"/ that have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164303,"byte_end":164346,"line_start":134,"line_end":134,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164688,"byte_end":164698,"line_start":143,"line_end":143,"column_start":8,"column_end":18},"name":"set_status","qualname":"<Span as trace::span::Span>::set_status","value":"fn set_status(&mut Self, StatusCode, String)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1894},"docs":" Sets the status of the `Span`. If used, this will override the default `Span`\n status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`\n","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. If used, this will override the default `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164504,"byte_end":164585,"line_start":141,"line_end":141,"column_start":5,"column_end":86}},{"value":"/ status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":164590,"byte_end":164680,"line_start":142,"line_end":142,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165197,"byte_end":165208,"line_start":158,"line_end":158,"column_start":8,"column_end":19},"name":"update_name","qualname":"<Span as trace::span::Span>::update_name","value":"fn update_name<T>(&mut Self, T) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1895},"docs":" Updates the `Span`'s name.\n","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165159,"byte_end":165189,"line_start":157,"line_end":157,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165435,"byte_end":165453,"line_start":168,"line_end":168,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"<Span as trace::span::Span>::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1898},"docs":" Finishes the span with given timestamp.\n","sig":null,"attributes":[{"value":"/ Finishes the span with given timestamp.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165384,"byte_end":165427,"line_start":167,"line_end":167,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":167109,"byte_end":167113,"line_start":221,"line_end":221,"column_start":8,"column_end":12},"name":"drop","qualname":"<Span as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":" Report span on inner drop\n","sig":null,"attributes":[{"value":"/ Report span on inner drop","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":167072,"byte_end":167101,"line_start":220,"line_end":220,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":2633},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182110,"byte_end":182120,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"SpanLimits","qualname":"::sdk::trace::span_limit::SpanLimits","value":"SpanLimits { max_events_per_span, max_attributes_per_span, max_links_per_span, max_attributes_per_event, max_attributes_per_link }","parent":null,"children":[{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638}],"decl_id":null,"docs":" Span limit configuration to keep attributes, events and links to a span in a reasonable number.\n","sig":null,"attributes":[{"value":"/ Span limit configuration to keep attributes, events and links to a span in a reasonable number.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":181902,"byte_end":182001,"line_start":25,"line_end":25,"column_start":1,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182185,"byte_end":182204,"line_start":30,"line_end":30,"column_start":9,"column_end":28},"name":"max_events_per_span","qualname":"::sdk::trace::span_limit::SpanLimits::max_events_per_span","value":"u32","parent":{"krate":0,"index":2633},"children":[],"decl_id":null,"docs":" The max events that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max events that can be added to a `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182127,"byte_end":182176,"line_start":29,"line_end":29,"column_start":5,"column_end":54}}]},{"kind":"Field","id":{"krate":0,"index":2635},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182277,"byte_end":182300,"line_start":32,"line_end":32,"column_start":9,"column_end":32},"name":"max_attributes_per_span","qualname":"::sdk::trace::span_limit::SpanLimits::max_attributes_per_span","value":"u32","parent":{"krate":0,"index":2633},"children":[],"decl_id":null,"docs":" The max attributes that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max attributes that can be added to a `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182215,"byte_end":182268,"line_start":31,"line_end":31,"column_start":5,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":2636},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182368,"byte_end":182386,"line_start":34,"line_end":34,"column_start":9,"column_end":27},"name":"max_links_per_span","qualname":"::sdk::trace::span_limit::SpanLimits::max_links_per_span","value":"u32","parent":{"krate":0,"index":2633},"children":[],"decl_id":null,"docs":" The max links that can be added to a `Span`.\n","sig":null,"attributes":[{"value":"/ The max links that can be added to a `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182311,"byte_end":182359,"line_start":33,"line_end":33,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182462,"byte_end":182486,"line_start":36,"line_end":36,"column_start":9,"column_end":33},"name":"max_attributes_per_event","qualname":"::sdk::trace::span_limit::SpanLimits::max_attributes_per_event","value":"u32","parent":{"krate":0,"index":2633},"children":[],"decl_id":null,"docs":" The max attributes that can be added into an `Event`\n","sig":null,"attributes":[{"value":"/ The max attributes that can be added into an `Event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182397,"byte_end":182453,"line_start":35,"line_end":35,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":2638},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182560,"byte_end":182583,"line_start":38,"line_end":38,"column_start":9,"column_end":32},"name":"max_attributes_per_link","qualname":"::sdk::trace::span_limit::SpanLimits::max_attributes_per_link","value":"u32","parent":{"krate":0,"index":2633},"children":[],"decl_id":null,"docs":" The max attributes that can be added into a `Link`\n","sig":null,"attributes":[{"value":"/ The max attributes that can be added into a `Link`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182497,"byte_end":182551,"line_start":37,"line_end":37,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182630,"byte_end":182637,"line_start":42,"line_end":42,"column_start":8,"column_end":15},"name":"default","qualname":"<SpanLimits as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1096},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186194,"byte_end":186207,"line_start":70,"line_end":70,"column_start":11,"column_end":24},"name":"SpanProcessor","qualname":"::sdk::trace::span_processor::SpanProcessor","value":"SpanProcessor: Send + Sync + std::fmt::Debug","parent":null,"children":[{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100}],"decl_id":null,"docs":" `SpanProcessor` is an interface which allows hooks for span start and end\n method invocations. The span processors are invoked only when is_recording\n is true.\n","sig":null,"attributes":[{"value":"/ `SpanProcessor` is an interface which allows hooks for span start and end","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186014,"byte_end":186091,"line_start":67,"line_end":67,"column_start":1,"column_end":78}},{"value":"/ method invocations. The span processors are invoked only when is_recording","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186092,"byte_end":186170,"line_start":68,"line_end":68,"column_start":1,"column_end":79}},{"value":"/ is true.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186171,"byte_end":186183,"line_start":69,"line_end":69,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186444,"byte_end":186452,"line_start":74,"line_end":74,"column_start":8,"column_end":16},"name":"on_start","qualname":"::sdk::trace::span_processor::SpanProcessor::on_start","value":"fn on_start(&Self, &mut Span, &Context)","parent":{"krate":0,"index":1096},"children":[],"decl_id":null,"docs":" `on_start` is called when a `Span` is started.  This method is called\n synchronously on the thread that started the span, therefore it should\n not block or throw exceptions.\n","sig":null,"attributes":[{"value":"/ `on_start` is called when a `Span` is started.  This method is called","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186245,"byte_end":186318,"line_start":71,"line_end":71,"column_start":5,"column_end":78}},{"value":"/ synchronously on the thread that started the span, therefore it should","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186323,"byte_end":186397,"line_start":72,"line_end":72,"column_start":5,"column_end":79}},{"value":"/ not block or throw exceptions.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186402,"byte_end":186436,"line_start":73,"line_end":73,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186725,"byte_end":186731,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"on_end","qualname":"::sdk::trace::span_processor::SpanProcessor::on_end","value":"fn on_end(&Self, SpanData)","parent":{"krate":0,"index":1096},"children":[],"decl_id":null,"docs":" `on_end` is called after a `Span` is ended (i.e., the end timestamp is\n already set). This method is called synchronously within the `Span::end`\n API, therefore it should not block or throw an exception.\n","sig":null,"attributes":[{"value":"/ `on_end` is called after a `Span` is ended (i.e., the end timestamp is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186496,"byte_end":186570,"line_start":75,"line_end":75,"column_start":5,"column_end":79}},{"value":"/ already set). This method is called synchronously within the `Span::end`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186575,"byte_end":186651,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ API, therefore it should not block or throw an exception.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186656,"byte_end":186717,"line_start":77,"line_end":77,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1099},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186822,"byte_end":186833,"line_start":80,"line_end":80,"column_start":8,"column_end":19},"name":"force_flush","qualname":"::sdk::trace::span_processor::SpanProcessor::force_flush","value":"fn force_flush(&Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":null,"docs":" Force the spans lying in the cache to be exported.\n","sig":null,"attributes":[{"value":"/ Force the spans lying in the cache to be exported.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186760,"byte_end":186814,"line_start":79,"line_end":79,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187006,"byte_end":187014,"line_start":83,"line_end":83,"column_start":8,"column_end":16},"name":"shutdown","qualname":"::sdk::trace::span_processor::SpanProcessor::shutdown","value":"fn shutdown(&mut Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":null,"docs":" Shuts down the processor. Called when SDK is shut down. This is an\n opportunity for processors to do any cleanup required.\n","sig":null,"attributes":[{"value":"/ Shuts down the processor. Called when SDK is shut down. This is an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186865,"byte_end":186935,"line_start":81,"line_end":81,"column_start":5,"column_end":75}},{"value":"/ opportunity for processors to do any cleanup required.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186940,"byte_end":186998,"line_start":82,"line_end":82,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":2644},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187795,"byte_end":187814,"line_start":107,"line_end":107,"column_start":12,"column_end":31},"name":"SimpleSpanProcessor","qualname":"::sdk::trace::span_processor::SimpleSpanProcessor","value":"SimpleSpanProcessor {  }","parent":null,"children":[{"krate":0,"index":2645},{"krate":0,"index":2646}],"decl_id":null,"docs":" A [`SpanProcessor`] that exports synchronously when spans are finished.","sig":null,"attributes":[{"value":"/ A [`SpanProcessor`] that exports synchronously when spans are finished.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187049,"byte_end":187124,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187125,"byte_end":187128,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187129,"byte_end":187143,"line_start":88,"line_end":88,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187144,"byte_end":187147,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Note that the simple processor exports synchronously every time a span is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187148,"byte_end":187225,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ ended. If you find this limiting, consider the batch processor instead.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187226,"byte_end":187301,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187302,"byte_end":187305,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187306,"byte_end":187313,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{trace::noop::NoopSpanExporter, sdk, global};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187314,"byte_end":187382,"line_start":94,"line_end":94,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187383,"byte_end":187386,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ // Configure your preferred exporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187387,"byte_end":187427,"line_start":96,"line_end":96,"column_start":1,"column_end":41}},{"value":"/ let exporter = NoopSpanExporter::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187428,"byte_end":187471,"line_start":97,"line_end":97,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187472,"byte_end":187475,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Then use the `with_simple_exporter` method to have the provider export when spans finish.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187476,"byte_end":187572,"line_start":99,"line_end":99,"column_start":1,"column_end":97}},{"value":"/ let provider = sdk::trace::TracerProvider::builder()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187573,"byte_end":187629,"line_start":100,"line_end":100,"column_start":1,"column_end":57}},{"value":"/     .with_simple_exporter(exporter)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187630,"byte_end":187669,"line_start":101,"line_end":101,"column_start":1,"column_end":40}},{"value":"/     .build();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187670,"byte_end":187687,"line_start":102,"line_end":102,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187688,"byte_end":187691,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ let previous_provider = global::set_tracer_provider(provider);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187692,"byte_end":187758,"line_start":104,"line_end":104,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187759,"byte_end":187766,"line_start":105,"line_end":105,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189002,"byte_end":189010,"line_start":144,"line_end":144,"column_start":8,"column_end":16},"name":"on_start","qualname":"<SimpleSpanProcessor as sdk::trace::span_processor::SpanProcessor>::on_start","value":"fn on_start(&Self, &mut Span, &Context)","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1097},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189086,"byte_end":189092,"line_start":148,"line_end":148,"column_start":8,"column_end":14},"name":"on_end","qualname":"<SimpleSpanProcessor as sdk::trace::span_processor::SpanProcessor>::on_end","value":"fn on_end(&Self, SpanData)","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1098},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189295,"byte_end":189306,"line_start":154,"line_end":154,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<SimpleSpanProcessor as sdk::trace::span_processor::SpanProcessor>::force_flush","value":"fn force_flush(&Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1099},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189451,"byte_end":189459,"line_start":159,"line_end":159,"column_start":8,"column_end":16},"name":"shutdown","qualname":"<SimpleSpanProcessor as sdk::trace::span_processor::SpanProcessor>::shutdown","value":"fn shutdown(&mut Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1100},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192177,"byte_end":192195,"line_start":231,"line_end":231,"column_start":12,"column_end":30},"name":"BatchSpanProcessor","qualname":"::sdk::trace::span_processor::BatchSpanProcessor","value":"BatchSpanProcessor {  }","parent":null,"children":[{"krate":0,"index":1111}],"decl_id":null,"docs":" A [`SpanProcessor`] that asynchronously buffers finished spans and reports\n them at a preconfigured interval.","sig":null,"attributes":[{"value":"/ A [`SpanProcessor`] that asynchronously buffers finished spans and reports","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189809,"byte_end":189887,"line_start":173,"line_end":173,"column_start":1,"column_end":79}},{"value":"/ them at a preconfigured interval.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189888,"byte_end":189925,"line_start":174,"line_end":174,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189926,"byte_end":189929,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Batch span processors need to run a background task to collect and send","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":189930,"byte_end":190005,"line_start":176,"line_end":176,"column_start":1,"column_end":76}},{"value":"/ spans. Different runtimes need different ways to handle the background task.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190006,"byte_end":190086,"line_start":177,"line_end":177,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190087,"byte_end":190090,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Note: Configuring an opentelemetry `Runtime` that's not compatible with the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190091,"byte_end":190170,"line_start":179,"line_end":179,"column_start":1,"column_end":80}},{"value":"/ underlying runtime can cause deadlocks (see tokio section).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190171,"byte_end":190234,"line_start":180,"line_end":180,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190235,"byte_end":190238,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ ### Use with Tokio","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190239,"byte_end":190261,"line_start":182,"line_end":182,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190262,"byte_end":190265,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ Tokio currently offers two different schedulers. One is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190266,"byte_end":190325,"line_start":184,"line_end":184,"column_start":1,"column_end":60}},{"value":"/ `current_thread_scheduler`, the other is `multiple_thread_scheduler`. Both","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190326,"byte_end":190404,"line_start":185,"line_end":185,"column_start":1,"column_end":79}},{"value":"/ of them default to use batch span processors to install span exporters.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190405,"byte_end":190480,"line_start":186,"line_end":186,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190481,"byte_end":190484,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ Tokio's `current_thread_scheduler` can cause the program to hang forever if","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190485,"byte_end":190564,"line_start":188,"line_end":188,"column_start":1,"column_end":80}},{"value":"/ blocking work is scheduled with other tasks in the same runtime. To avoid","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190565,"byte_end":190642,"line_start":189,"line_end":189,"column_start":1,"column_end":78}},{"value":"/ this, be sure to enable the `rt-tokio-current-thread` feature in this crate","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190643,"byte_end":190722,"line_start":190,"line_end":190,"column_start":1,"column_end":80}},{"value":"/ if you are using that runtime (e.g. users of actix-web), and blocking tasks","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190723,"byte_end":190802,"line_start":191,"line_end":191,"column_start":1,"column_end":80}},{"value":"/ will then be scheduled on a different thread.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190803,"byte_end":190852,"line_start":192,"line_end":192,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190853,"byte_end":190856,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190857,"byte_end":190871,"line_start":194,"line_end":194,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190872,"byte_end":190875,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ This processor can be configured with an [`executor`] of your choice to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190876,"byte_end":190951,"line_start":196,"line_end":196,"column_start":1,"column_end":76}},{"value":"/ batch and upload spans asynchronously when they end. If you have added a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":190952,"byte_end":191028,"line_start":197,"line_end":197,"column_start":1,"column_end":77}},{"value":"/ library like [`tokio`] or [`async-std`], you can pass in their respective","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191029,"byte_end":191106,"line_start":198,"line_end":198,"column_start":1,"column_end":78}},{"value":"/ `spawn` and `interval` functions to have batching performed in those","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191107,"byte_end":191179,"line_start":199,"line_end":199,"column_start":1,"column_end":73}},{"value":"/ contexts.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191180,"byte_end":191193,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191194,"byte_end":191197,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191198,"byte_end":191205,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature=\"tokio\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191206,"byte_end":191235,"line_start":203,"line_end":203,"column_start":1,"column_end":30}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191236,"byte_end":191243,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, runtime, sdk, trace::noop::NoopSpanExporter};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191244,"byte_end":191321,"line_start":205,"line_end":205,"column_start":1,"column_end":78}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191322,"byte_end":191350,"line_start":206,"line_end":206,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191351,"byte_end":191354,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ #[tokio::main]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191355,"byte_end":191373,"line_start":208,"line_end":208,"column_start":1,"column_end":19}},{"value":"/ async fn main() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191374,"byte_end":191395,"line_start":209,"line_end":209,"column_start":1,"column_end":22}},{"value":"/     // Configure your preferred exporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191396,"byte_end":191440,"line_start":210,"line_end":210,"column_start":1,"column_end":45}},{"value":"/     let exporter = NoopSpanExporter::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191441,"byte_end":191488,"line_start":211,"line_end":211,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191489,"byte_end":191492,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/     // Create a batch span processor using an exporter and a runtime","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191493,"byte_end":191565,"line_start":213,"line_end":213,"column_start":1,"column_end":73}},{"value":"/     let batch = sdk::trace::BatchSpanProcessor::builder(exporter, runtime::Tokio)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191566,"byte_end":191651,"line_start":214,"line_end":214,"column_start":1,"column_end":86}},{"value":"/         .with_max_queue_size(4096)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191652,"byte_end":191690,"line_start":215,"line_end":215,"column_start":1,"column_end":39}},{"value":"/         .build();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191691,"byte_end":191712,"line_start":216,"line_end":216,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191713,"byte_end":191716,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/     // Then use the `with_batch_exporter` method to have the provider export spans in batches.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191717,"byte_end":191815,"line_start":218,"line_end":218,"column_start":1,"column_end":99}},{"value":"/     let provider = sdk::trace::TracerProvider::builder()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191816,"byte_end":191876,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/         .with_span_processor(batch)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191877,"byte_end":191916,"line_start":220,"line_end":220,"column_start":1,"column_end":40}},{"value":"/         .build();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191917,"byte_end":191938,"line_start":221,"line_end":221,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191939,"byte_end":191942,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/     let _ = global::set_tracer_provider(provider);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191943,"byte_end":191997,"line_start":223,"line_end":223,"column_start":1,"column_end":55}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":191998,"byte_end":192003,"line_start":224,"line_end":224,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192004,"byte_end":192011,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192012,"byte_end":192019,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192020,"byte_end":192023,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [`executor`]: https://docs.rs/futures/0.3/futures/executor/index.html","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192024,"byte_end":192097,"line_start":228,"line_end":228,"column_start":1,"column_end":74}},{"value":"/ [`tokio`]: https://tokio.rs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192098,"byte_end":192129,"line_start":229,"line_end":229,"column_start":1,"column_end":32}},{"value":"/ [`async-std`]: https://async.rs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192130,"byte_end":192165,"line_start":230,"line_end":230,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192317,"byte_end":192320,"line_start":236,"line_end":236,"column_start":8,"column_end":11},"name":"fmt","qualname":"<BatchSpanProcessor<R> as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192579,"byte_end":192587,"line_start":244,"line_end":244,"column_start":8,"column_end":16},"name":"on_start","qualname":"<BatchSpanProcessor<R> as sdk::trace::span_processor::SpanProcessor>::on_start","value":"fn on_start(&Self, &mut Span, &Context)","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1097},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192663,"byte_end":192669,"line_start":248,"line_end":248,"column_start":8,"column_end":14},"name":"on_end","qualname":"<BatchSpanProcessor<R> as sdk::trace::span_processor::SpanProcessor>::on_end","value":"fn on_end(&Self, SpanData)","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1098},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192877,"byte_end":192888,"line_start":256,"line_end":256,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<BatchSpanProcessor<R> as sdk::trace::span_processor::SpanProcessor>::force_flush","value":"fn force_flush(&Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1099},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193234,"byte_end":193242,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"shutdown","qualname":"<BatchSpanProcessor<R> as sdk::trace::span_processor::SpanProcessor>::shutdown","value":"fn shutdown(&mut Self) -> TraceResult<()>","parent":{"krate":0,"index":1096},"children":[],"decl_id":{"krate":0,"index":1100},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2650},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193992,"byte_end":194002,"line_start":285,"line_end":285,"column_start":5,"column_end":15},"name":"ExportSpan","qualname":"::sdk::trace::span_processor::BatchMessage::ExportSpan","value":"BatchMessage::ExportSpan(SpanData)","parent":{"krate":0,"index":2649},"children":[],"decl_id":null,"docs":" Export spans, usually called when span ends\n","sig":null,"attributes":[{"value":"/ Export spans, usually called when span ends","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193940,"byte_end":193987,"line_start":284,"line_end":284,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2652},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194003,"byte_end":194011,"line_start":285,"line_end":285,"column_start":16,"column_end":24},"name":"0","qualname":"::sdk::trace::span_processor::BatchMessage::ExportSpan::0","value":"sdk::export::trace::SpanData","parent":{"krate":0,"index":2650},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2653},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194158,"byte_end":194163,"line_start":288,"line_end":288,"column_start":5,"column_end":10},"name":"Flush","qualname":"::sdk::trace::span_processor::BatchMessage::Flush","value":"BatchMessage::Flush(Option<oneshot::Sender<ExportResult>>)","parent":{"krate":0,"index":2649},"children":[],"decl_id":null,"docs":" Flush the current buffer to the backend, it can be triggered by\n pre configured interval or a call to `force_push` function.\n","sig":null,"attributes":[{"value":"/ Flush the current buffer to the backend, it can be triggered by","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194018,"byte_end":194085,"line_start":286,"line_end":286,"column_start":5,"column_end":72}},{"value":"/ pre configured interval or a call to `force_push` function.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194090,"byte_end":194153,"line_start":287,"line_end":287,"column_start":5,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":2655},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194164,"byte_end":194201,"line_start":288,"line_end":288,"column_start":11,"column_end":48},"name":"0","qualname":"::sdk::trace::span_processor::BatchMessage::Flush::0","value":"std::option::Option<futures_channel::oneshot::Sender<std::result::Result<(), trace::TraceError>>>","parent":{"krate":0,"index":2653},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2656},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194286,"byte_end":194294,"line_start":290,"line_end":290,"column_start":5,"column_end":13},"name":"Shutdown","qualname":"::sdk::trace::span_processor::BatchMessage::Shutdown","value":"BatchMessage::Shutdown(oneshot::Sender<ExportResult>)","parent":{"krate":0,"index":2649},"children":[],"decl_id":null,"docs":" Shut down the worker thread, push all spans in buffer to the backend.\n","sig":null,"attributes":[{"value":"/ Shut down the worker thread, push all spans in buffer to the backend.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194208,"byte_end":194281,"line_start":289,"line_end":289,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":2658},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194295,"byte_end":194324,"line_start":290,"line_end":290,"column_start":14,"column_end":43},"name":"0","qualname":"::sdk::trace::span_processor::BatchMessage::Shutdown::0","value":"futures_channel::oneshot::Sender<std::result::Result<(), trace::TraceError>>","parent":{"krate":0,"index":2656},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2649},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193921,"byte_end":193933,"line_start":283,"line_end":283,"column_start":10,"column_end":22},"name":"BatchMessage","qualname":"::sdk::trace::span_processor::BatchMessage","value":"enum BatchMessage {\n    ExportSpan(SpanData),\n    Flush(Option<oneshot::Sender<ExportResult>>),\n    Shutdown(oneshot::Sender<ExportResult>),\n}","parent":null,"children":[{"krate":0,"index":2650},{"krate":0,"index":2653},{"krate":0,"index":2656}],"decl_id":null,"docs":" Messages sent between application thread and batch span processor's work thread.\n","sig":null,"attributes":[{"value":"/ Messages sent between application thread and batch span processor's work thread.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193584,"byte_end":193668,"line_start":277,"line_end":277,"column_start":1,"column_end":85}},{"value":"allow(clippy :: large_enum_variant)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":193858,"byte_end":193894,"line_start":281,"line_end":281,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":198039,"byte_end":198046,"line_start":382,"line_end":382,"column_start":12,"column_end":19},"name":"builder","qualname":"<BatchSpanProcessor<R>>::builder","value":"fn builder<E>(E, R) -> BatchSpanProcessorBuilder<E, R> where E: SpanExporter","parent":null,"children":[],"decl_id":null,"docs":" Create a new batch processor builder\n","sig":null,"attributes":[{"value":"/ Create a new batch processor builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":197987,"byte_end":198027,"line_start":381,"line_end":381,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":2661},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":198949,"byte_end":198960,"line_start":420,"line_end":420,"column_start":12,"column_end":23},"name":"BatchConfig","qualname":"::sdk::trace::span_processor::BatchConfig","value":"BatchConfig {  }","parent":null,"children":[{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665}],"decl_id":null,"docs":" Batch span processor configuration\n","sig":null,"attributes":[{"value":"/ Batch span processor configuration","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":198882,"byte_end":198920,"line_start":418,"line_end":418,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1138},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":199724,"byte_end":199731,"line_start":440,"line_end":440,"column_start":8,"column_end":15},"name":"default","qualname":"<BatchConfig as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2668},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201679,"byte_end":201704,"line_start":491,"line_end":491,"column_start":12,"column_end":37},"name":"BatchSpanProcessorBuilder","qualname":"::sdk::trace::span_processor::BatchSpanProcessorBuilder","value":"BatchSpanProcessorBuilder {  }","parent":null,"children":[{"krate":0,"index":2671},{"krate":0,"index":2672},{"krate":0,"index":2673}],"decl_id":null,"docs":" A builder for creating [`BatchSpanProcessor`] instances.","sig":null,"attributes":[{"value":"/ A builder for creating [`BatchSpanProcessor`] instances.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201586,"byte_end":201646,"line_start":488,"line_end":488,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201647,"byte_end":201650,"line_start":489,"line_end":489,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1148},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201927,"byte_end":201946,"line_start":503,"line_end":503,"column_start":12,"column_end":31},"name":"with_max_queue_size","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_queue_size","value":"fn with_max_queue_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max queue size for batches\n","sig":null,"attributes":[{"value":"/ Set max queue size for batches","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201881,"byte_end":201915,"line_start":502,"line_end":502,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202164,"byte_end":202184,"line_start":511,"line_end":511,"column_start":12,"column_end":32},"name":"with_scheduled_delay","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_scheduled_delay","value":"fn with_scheduled_delay(Self, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set scheduled delay for batches\n","sig":null,"attributes":[{"value":"/ Set scheduled delay for batches","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202117,"byte_end":202152,"line_start":510,"line_end":510,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202407,"byte_end":202423,"line_start":519,"line_end":519,"column_start":12,"column_end":28},"name":"with_max_timeout","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_timeout","value":"fn with_max_timeout(Self, Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max timeout for exporting.\n","sig":null,"attributes":[{"value":"/ Set max timeout for exporting.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202361,"byte_end":202395,"line_start":518,"line_end":518,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202808,"byte_end":202834,"line_start":529,"line_end":529,"column_start":12,"column_end":38},"name":"with_max_export_batch_size","qualname":"<BatchSpanProcessorBuilder<E, R>>::with_max_export_batch_size","value":"fn with_max_export_batch_size(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set max export size for batches, should always less than or equals to max queue size.","sig":null,"attributes":[{"value":"/ Set max export size for batches, should always less than or equals to max queue size.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202607,"byte_end":202696,"line_start":526,"line_end":526,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202701,"byte_end":202704,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ If input is larger than max queue size, will lower it to be equal to max queue size","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":202709,"byte_end":202796,"line_start":528,"line_end":528,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":203190,"byte_end":203195,"line_start":541,"line_end":541,"column_start":12,"column_end":17},"name":"build","qualname":"<BatchSpanProcessorBuilder<E, R>>::build","value":"fn build(Self) -> BatchSpanProcessor<R>","parent":null,"children":[],"decl_id":null,"docs":" Build a batch processor\n","sig":null,"attributes":[{"value":"/ Build a batch processor","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":203151,"byte_end":203178,"line_start":540,"line_end":540,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212505,"byte_end":212511,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"Tracer","qualname":"::sdk::trace::tracer::Tracer","value":"Tracer {  }","parent":null,"children":[{"krate":0,"index":2679},{"krate":0,"index":2680}],"decl_id":null,"docs":" `Tracer` implementation to create and manage spans\n","sig":null,"attributes":[{"value":"/ `Tracer` implementation to create and manage spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212422,"byte_end":212476,"line_start":28,"line_end":28,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1239},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212762,"byte_end":212765,"line_start":38,"line_end":38,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Tracer as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":" Formats the `Tracer` using the given formatter.\n Omitting `provider` here is necessary to avoid cycles.\n","sig":null,"attributes":[{"value":"/ Formats the `Tracer` using the given formatter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212640,"byte_end":212691,"line_start":36,"line_end":36,"column_start":5,"column_end":56}},{"value":"/ Omitting `provider` here is necessary to avoid cycles.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212696,"byte_end":212754,"line_start":37,"line_end":37,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1242},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213377,"byte_end":213385,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"provider","qualname":"<Tracer>::provider","value":"fn provider(&Self) -> Option<TracerProvider>","parent":null,"children":[],"decl_id":null,"docs":" TracerProvider associated with this tracer.\n","sig":null,"attributes":[{"value":"/ TracerProvider associated with this tracer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213318,"byte_end":213365,"line_start":58,"line_end":58,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1243},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213556,"byte_end":213579,"line_start":64,"line_end":64,"column_start":12,"column_end":35},"name":"instrumentation_library","qualname":"<Tracer>::instrumentation_library","value":"fn instrumentation_library(&Self) -> &InstrumentationLibrary","parent":null,"children":[],"decl_id":null,"docs":" instrumentation library information of this tracer.\n","sig":null,"attributes":[{"value":"/ instrumentation library information of this tracer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213489,"byte_end":213544,"line_start":63,"line_end":63,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1248},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216040,"byte_end":216058,"line_start":135,"line_end":135,"column_start":8,"column_end":26},"name":"start_with_context","qualname":"<Tracer as trace::tracer::Tracer>::start_with_context","value":"fn start_with_context<T>(&Self, T, &Context) -> Self::Span where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2066},"docs":" Starts a new `Span` with a given context.","sig":null,"attributes":[{"value":"/ Starts a new `Span` with a given context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215615,"byte_end":215660,"line_start":128,"line_end":128,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215665,"byte_end":215668,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215673,"byte_end":215751,"line_start":130,"line_end":130,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215756,"byte_end":215834,"line_start":131,"line_end":131,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215839,"byte_end":215919,"line_start":132,"line_end":132,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215924,"byte_end":216004,"line_start":133,"line_end":133,"column_start":5,"column_end":85}},{"value":"/ spans in the trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216009,"byte_end":216032,"line_start":134,"line_end":134,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216378,"byte_end":216390,"line_start":145,"line_end":145,"column_start":8,"column_end":20},"name":"span_builder","qualname":"<Tracer as trace::tracer::Tracer>::span_builder","value":"fn span_builder<T>(&Self, T) -> SpanBuilder where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2068},"docs":" Creates a span builder","sig":null,"attributes":[{"value":"/ Creates a span builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216249,"byte_end":216275,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216280,"byte_end":216283,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ An ergonomic way for attributes to be configured before the `Span` is started.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216288,"byte_end":216370,"line_start":144,"line_end":144,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216944,"byte_end":216962,"line_start":159,"line_end":159,"column_start":8,"column_end":26},"name":"build_with_context","qualname":"<Tracer as trace::tracer::Tracer>::build_with_context","value":"fn build_with_context(&Self, SpanBuilder, &Context) -> Self::Span","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2071},"docs":" Starts a span from a `SpanBuilder`.","sig":null,"attributes":[{"value":"/ Starts a span from a `SpanBuilder`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216525,"byte_end":216564,"line_start":152,"line_end":152,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216569,"byte_end":216572,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216577,"byte_end":216655,"line_start":154,"line_end":154,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216660,"byte_end":216738,"line_start":155,"line_end":155,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216743,"byte_end":216823,"line_start":156,"line_end":156,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216828,"byte_end":216908,"line_start":157,"line_end":157,"column_start":5,"column_end":85}},{"value":"/ spans in the trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":216913,"byte_end":216936,"line_start":158,"line_end":158,"column_start":5,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"baggage","qualname":"::baggage","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1357},{"krate":0,"index":1360},{"krate":0,"index":2683},{"krate":0,"index":2685},{"krate":0,"index":2686},{"krate":0,"index":2691},{"krate":0,"index":1363},{"krate":0,"index":1364},{"krate":0,"index":1365},{"krate":0,"index":2694},{"krate":0,"index":2697},{"krate":0,"index":2699},{"krate":0,"index":1366},{"krate":0,"index":1387},{"krate":0,"index":2701},{"krate":0,"index":2705},{"krate":0,"index":1388},{"krate":0,"index":1392},{"krate":0,"index":1397},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1406},{"krate":0,"index":1415},{"krate":0,"index":2708},{"krate":0,"index":2711},{"krate":0,"index":2713},{"krate":0,"index":2715},{"krate":0,"index":2717},{"krate":0,"index":2718},{"krate":0,"index":2721},{"krate":0,"index":1426},{"krate":0,"index":1428},{"krate":0,"index":1430},{"krate":0,"index":2723},{"krate":0,"index":2727},{"krate":0,"index":2729},{"krate":0,"index":2731},{"krate":0,"index":2732},{"krate":0,"index":1432},{"krate":0,"index":1437}],"decl_id":null,"docs":" Primitives for sending name-value data across system boundaries.","sig":null,"attributes":[{"value":"/ Primitives for sending name-value data across system boundaries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227326,"byte_end":227394,"line_start":1,"line_end":1,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227395,"byte_end":227398,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Main types in this module are:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227399,"byte_end":227433,"line_start":3,"line_end":3,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227434,"byte_end":227437,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * [`Baggage`]: Baggage is used to annotate telemetry, adding context and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227438,"byte_end":227514,"line_start":5,"line_end":5,"column_start":1,"column_end":77}},{"value":"/   information to metrics, traces, and logs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227515,"byte_end":227562,"line_start":6,"line_end":6,"column_start":1,"column_end":48}},{"value":"/ * [`BaggageExt`]: Extensions for managing `Baggage` in a [`Context`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227563,"byte_end":227636,"line_start":7,"line_end":7,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227637,"byte_end":227640,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Baggage can be sent between systems using the [`BaggagePropagator`] in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227641,"byte_end":227715,"line_start":9,"line_end":9,"column_start":1,"column_end":75}},{"value":"/ accordance with the [W3C Baggage] specification.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227716,"byte_end":227768,"line_start":10,"line_end":10,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227769,"byte_end":227772,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`BaggagePropagator`]: crate::sdk::propagation::BaggagePropagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227773,"byte_end":227842,"line_start":12,"line_end":12,"column_start":1,"column_end":70}},{"value":"/ [W3C Baggage]: https://w3c.github.io/baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227843,"byte_end":227891,"line_start":13,"line_end":13,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227892,"byte_end":227895,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227896,"byte_end":227910,"line_start":15,"line_end":15,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227911,"byte_end":227914,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227915,"byte_end":227922,"line_start":17,"line_end":17,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227923,"byte_end":227954,"line_start":18,"line_end":18,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227955,"byte_end":227962,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Key, propagation::TextMapPropagator};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":227963,"byte_end":228045,"line_start":20,"line_end":20,"column_start":1,"column_end":83}},{"value":"/ use opentelemetry::sdk::propagation::BaggagePropagator;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228046,"byte_end":228105,"line_start":21,"line_end":21,"column_start":1,"column_end":60}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228106,"byte_end":228140,"line_start":22,"line_end":22,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228141,"byte_end":228144,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Example baggage value passed in externally via http headers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228145,"byte_end":228211,"line_start":24,"line_end":24,"column_start":1,"column_end":67}},{"value":"/ let mut headers = HashMap::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228212,"byte_end":228249,"line_start":25,"line_end":25,"column_start":1,"column_end":38}},{"value":"/ headers.insert(\"baggage\".to_string(), \"user_id=1\".to_string());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228250,"byte_end":228317,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228318,"byte_end":228321,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let propagator = BaggagePropagator::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228322,"byte_end":228368,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/ // can extract from any type that impls `Extractor`, usually an HTTP header map","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228369,"byte_end":228452,"line_start":29,"line_end":29,"column_start":1,"column_end":84}},{"value":"/ let cx = propagator.extract(&headers);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228453,"byte_end":228495,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228496,"byte_end":228499,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Iterate over extracted name-value pairs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228500,"byte_end":228546,"line_start":32,"line_end":32,"column_start":1,"column_end":47}},{"value":"/ for (name, value) in cx.baggage() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228547,"byte_end":228586,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/     // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228587,"byte_end":228601,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228602,"byte_end":228607,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228608,"byte_end":228611,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // Add new baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228612,"byte_end":228634,"line_start":37,"line_end":37,"column_start":1,"column_end":23}},{"value":"/ let cx_with_additions = cx.with_baggage(vec![Key::new(\"server_id\").i64(42)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228635,"byte_end":228716,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228717,"byte_end":228720,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ // Inject baggage into http request","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228721,"byte_end":228760,"line_start":40,"line_end":40,"column_start":1,"column_end":40}},{"value":"/ propagator.inject_context(&cx_with_additions, &mut headers);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228761,"byte_end":228825,"line_start":41,"line_end":41,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228826,"byte_end":228829,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let header_value = headers.get(\"baggage\").expect(\"header is injected\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228830,"byte_end":228905,"line_start":43,"line_end":43,"column_start":1,"column_end":76}},{"value":"/ assert!(header_value.contains(\"user_id=1\"), \"still contains previous name-value\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228906,"byte_end":228992,"line_start":44,"line_end":44,"column_start":1,"column_end":87}},{"value":"/ assert!(header_value.contains(\"server_id=42\"), \"contains new name-value pair\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":228993,"byte_end":229076,"line_start":45,"line_end":45,"column_start":1,"column_end":84}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229077,"byte_end":229084,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229085,"byte_end":229092,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2694},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230287,"byte_end":230294,"line_start":86,"line_end":86,"column_start":12,"column_end":19},"name":"Baggage","qualname":"::baggage::Baggage","value":"Baggage {  }","parent":null,"children":[{"krate":0,"index":2695},{"krate":0,"index":2696}],"decl_id":null,"docs":" A set of name-value pairs describing user-defined properties.","sig":null,"attributes":[{"value":"/ A set of name-value pairs describing user-defined properties.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229497,"byte_end":229562,"line_start":62,"line_end":62,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229563,"byte_end":229566,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Names","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229567,"byte_end":229588,"line_start":64,"line_end":64,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229589,"byte_end":229592,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ * ASCII strings according to the token format, defined in [RFC2616, Section 2.2]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229593,"byte_end":229677,"line_start":66,"line_end":66,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229678,"byte_end":229681,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229682,"byte_end":229704,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229705,"byte_end":229708,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * URL encoded UTF-8 strings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229709,"byte_end":229741,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229742,"byte_end":229745,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ ### Baggage Value Metadata","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229746,"byte_end":229776,"line_start":72,"line_end":72,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229777,"byte_end":229780,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ Additional metadata can be added to values in the form of a property set,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229781,"byte_end":229858,"line_start":74,"line_end":74,"column_start":1,"column_end":78}},{"value":"/ represented as semi-colon `;` delimited list of names and/or name-value pairs,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229859,"byte_end":229941,"line_start":75,"line_end":75,"column_start":1,"column_end":83}},{"value":"/ e.g. `;k1=v1;k2;k3=v3`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229942,"byte_end":229969,"line_start":76,"line_end":76,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229970,"byte_end":229973,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ### Limits","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229974,"byte_end":229988,"line_start":78,"line_end":78,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229989,"byte_end":229992,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * Maximum number of name-value pairs: `180`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":229993,"byte_end":230041,"line_start":80,"line_end":80,"column_start":1,"column_end":49}},{"value":"/ * Maximum number of bytes per a single name-value pair: `4096`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230042,"byte_end":230109,"line_start":81,"line_end":81,"column_start":1,"column_end":68}},{"value":"/ * Maximum total length of all name-value pairs: `8192`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230110,"byte_end":230169,"line_start":82,"line_end":82,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230170,"byte_end":230173,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [RFC2616, Section 2.2]: https://tools.ietf.org/html/rfc2616#section-2.2","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230174,"byte_end":230249,"line_start":84,"line_end":84,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230494,"byte_end":230497,"line_start":93,"line_end":93,"column_start":12,"column_end":15},"name":"new","qualname":"<Baggage>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `Baggage`.\n","sig":null,"attributes":[{"value":"/ Creates an empty `Baggage`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230451,"byte_end":230482,"line_start":92,"line_end":92,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230982,"byte_end":230985,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"get","qualname":"<Baggage>::get","value":"fn get<T>(&Self, T) -> Option<&Value> where T: Into<Key>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value associated with a given name","sig":null,"attributes":[{"value":"/ Returns a reference to the value associated with a given name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230619,"byte_end":230684,"line_start":100,"line_end":100,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230689,"byte_end":230692,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230697,"byte_end":230711,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230716,"byte_end":230719,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230724,"byte_end":230731,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::Baggage, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230736,"byte_end":230785,"line_start":105,"line_end":105,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230790,"byte_end":230793,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230798,"byte_end":230830,"line_start":107,"line_end":107,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230835,"byte_end":230880,"line_start":108,"line_end":108,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230885,"byte_end":230888,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get(\"my-name\"), Some(&Value::from(\"my-value\")))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230893,"byte_end":230958,"line_start":110,"line_end":110,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230963,"byte_end":230970,"line_start":111,"line_end":111,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1371},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231589,"byte_end":231606,"line_start":128,"line_end":128,"column_start":12,"column_end":29},"name":"get_with_metadata","qualname":"<Baggage>::get_with_metadata","value":"fn get_with_metadata<T>(&Self, T) -> Option<&(Value, BaggageMetadata)> where\nT: Into<Key>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value and metadata associated with a given name","sig":null,"attributes":[{"value":"/ Returns a reference to the value and metadata associated with a given name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231114,"byte_end":231192,"line_start":116,"line_end":116,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231197,"byte_end":231200,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231205,"byte_end":231219,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231224,"byte_end":231231,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::{Baggage, BaggageMetadata}, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231236,"byte_end":231304,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231309,"byte_end":231312,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231317,"byte_end":231349,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231354,"byte_end":231399,"line_start":123,"line_end":123,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231404,"byte_end":231407,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ // By default, the metadata is empty","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231412,"byte_end":231452,"line_start":125,"line_end":125,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(cc.get_with_metadata(\"my-name\"), Some(&(Value::from(\"my-value\"), BaggageMetadata::from(\"\"))))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231457,"byte_end":231565,"line_start":126,"line_end":126,"column_start":5,"column_end":113}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231570,"byte_end":231577,"line_start":127,"line_end":127,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1373},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232220,"byte_end":232226,"line_start":147,"line_end":147,"column_start":12,"column_end":18},"name":"insert","qualname":"<Baggage>::insert","value":"fn insert<K, V>(&mut Self, K, V) -> Option<Value> where K: Into<Key>,\nV: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a name-value pair into the baggage.","sig":null,"attributes":[{"value":"/ Inserts a name-value pair into the baggage.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231722,"byte_end":231769,"line_start":132,"line_end":132,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231774,"byte_end":231777,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ If the name was not present, [`None`] is returned. If the name was present,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231782,"byte_end":231861,"line_start":134,"line_end":134,"column_start":5,"column_end":84}},{"value":"/ the value is updated, and the old value is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231866,"byte_end":231922,"line_start":135,"line_end":135,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231927,"byte_end":231930,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231935,"byte_end":231949,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231954,"byte_end":231957,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231962,"byte_end":231969,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::Baggage, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":231974,"byte_end":232023,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232028,"byte_end":232031,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232036,"byte_end":232068,"line_start":142,"line_end":142,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert(\"my-name\", \"my-value\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232073,"byte_end":232118,"line_start":143,"line_end":143,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232123,"byte_end":232126,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get(\"my-name\"), Some(&Value::from(\"my-value\")))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232131,"byte_end":232196,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232201,"byte_end":232208,"line_start":146,"line_end":146,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1377},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233060,"byte_end":233080,"line_start":171,"line_end":171,"column_start":12,"column_end":32},"name":"insert_with_metadata","qualname":"<Baggage>::insert_with_metadata","value":"fn insert_with_metadata<K, V, S>(&mut Self, K, V, S)\n-> Option<(Value, BaggageMetadata)> where K: Into<Key>, V: Into<Value>,\nS: Into<BaggageMetadata>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a name-value pair into the baggage.","sig":null,"attributes":[{"value":"/ Inserts a name-value pair into the baggage.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232458,"byte_end":232505,"line_start":156,"line_end":156,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232510,"byte_end":232513,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Same with `insert`, if the name was not present, [`None`] will be returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232518,"byte_end":232597,"line_start":158,"line_end":158,"column_start":5,"column_end":84}},{"value":"/ If the name is present, the old value and metadata will be returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232602,"byte_end":232674,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232679,"byte_end":232682,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232687,"byte_end":232701,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232706,"byte_end":232709,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232714,"byte_end":232721,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::{Baggage, BaggageMetadata}, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232726,"byte_end":232794,"line_start":164,"line_end":164,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232799,"byte_end":232802,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let mut cc = Baggage::new();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232807,"byte_end":232839,"line_start":166,"line_end":166,"column_start":5,"column_end":37}},{"value":"/ let _ = cc.insert_with_metadata(\"my-name\", \"my-value\", \"test\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232844,"byte_end":232911,"line_start":167,"line_end":167,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232916,"byte_end":232919,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cc.get_with_metadata(\"my-name\"), Some(&(Value::from(\"my-value\"), BaggageMetadata::from(\"test\"))))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":232924,"byte_end":233036,"line_start":169,"line_end":169,"column_start":5,"column_end":117}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233041,"byte_end":233048,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233689,"byte_end":233695,"line_start":192,"line_end":192,"column_start":12,"column_end":18},"name":"remove","qualname":"<Baggage>::remove","value":"fn remove<K>(&mut Self, K) -> Option<(Value, BaggageMetadata)> where\nK: Into<Key>","parent":null,"children":[],"decl_id":null,"docs":" Removes a name from the baggage, returning the value\n corresponding to the name if the pair was previously in the map.\n","sig":null,"attributes":[{"value":"/ Removes a name from the baggage, returning the value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233548,"byte_end":233604,"line_start":190,"line_end":190,"column_start":5,"column_end":61}},{"value":"/ corresponding to the name if the pair was previously in the map.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233609,"byte_end":233677,"line_start":191,"line_end":191,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1383},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233882,"byte_end":233885,"line_start":197,"line_end":197,"column_start":12,"column_end":15},"name":"len","qualname":"<Baggage>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of attributes for this baggage\n","sig":null,"attributes":[{"value":"/ Returns the number of attributes for this baggage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233817,"byte_end":233870,"line_start":196,"line_end":196,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":234004,"byte_end":234012,"line_start":202,"line_end":202,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Baggage>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the baggage contains no items.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the baggage contains no items.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":233940,"byte_end":233992,"line_start":201,"line_end":201,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1385},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":234143,"byte_end":234147,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"iter","qualname":"<Baggage>::iter","value":"fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Gets an iterator over the baggage items, sorted by name.\n","sig":null,"attributes":[{"value":"/ Gets an iterator over the baggage items, sorted by name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":234071,"byte_end":234131,"line_start":206,"line_end":206,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":2701},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236473,"byte_end":236477,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"Iter","qualname":"::baggage::Iter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the entries of a [`Baggage`].\n","sig":null,"attributes":[{"value":"/ An iterator over the entries of a [`Baggage`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236394,"byte_end":236444,"line_start":266,"line_end":266,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236633,"byte_end":236637,"line_start":273,"line_end":273,"column_start":8,"column_end":12},"name":"next","qualname":"<Iter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236839,"byte_end":236848,"line_start":282,"line_end":282,"column_start":8,"column_end":17},"name":"into_iter","qualname":"<&'a Baggage as std::iter::IntoIterator>::into_iter","value":"fn into_iter(Self) -> Self::IntoIter","parent":{"krate":2,"index":8279},"children":[],"decl_id":{"krate":2,"index":8282},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236988,"byte_end":236997,"line_start":288,"line_end":288,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<Baggage as std::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item =\n(Key, (Value, BaggageMetadata))>","parent":{"krate":2,"index":8275},"children":[],"decl_id":{"krate":2,"index":8277},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237327,"byte_end":237336,"line_start":298,"line_end":298,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<Baggage as std::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item = KeyValue>","parent":{"krate":2,"index":8275},"children":[],"decl_id":{"krate":2,"index":8277},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237611,"byte_end":237620,"line_start":308,"line_end":308,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<Baggage as std::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item = KeyValueMetadata>","parent":{"krate":2,"index":8275},"children":[],"decl_id":{"krate":2,"index":8277},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1406},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237953,"byte_end":237963,"line_start":318,"line_end":318,"column_start":11,"column_end":21},"name":"BaggageExt","qualname":"::baggage::BaggageExt","value":"BaggageExt","parent":null,"children":[{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1414}],"decl_id":null,"docs":" Methods for sorting and retrieving baggage data in a context.\n","sig":null,"attributes":[{"value":"/ Methods for sorting and retrieving baggage data in a context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237877,"byte_end":237942,"line_start":317,"line_end":317,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238455,"byte_end":238467,"line_start":334,"line_end":334,"column_start":8,"column_end":20},"name":"with_baggage","qualname":"::baggage::BaggageExt::with_baggage","value":"fn with_baggage<T, I>(&Self, T) -> Self where T: IntoIterator<Item = I>,\nI: Into<KeyValueMetadata>","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Returns a clone of the given context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the given context with the included name-value pairs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237970,"byte_end":238046,"line_start":319,"line_end":319,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238051,"byte_end":238054,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238059,"byte_end":238073,"line_start":321,"line_end":321,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238078,"byte_end":238081,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238086,"byte_end":238093,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238098,"byte_end":238169,"line_start":324,"line_end":324,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238174,"byte_end":238177,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ let some_context = Context::current();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238182,"byte_end":238224,"line_start":326,"line_end":326,"column_start":5,"column_end":47}},{"value":"/ let cx = some_context.with_baggage(vec![KeyValue::new(\"my-name\", \"my-value\")]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238229,"byte_end":238312,"line_start":327,"line_end":327,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238317,"byte_end":238320,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238325,"byte_end":238340,"line_start":329,"line_end":329,"column_start":5,"column_end":20}},{"value":"/     cx.baggage().get(\"my-name\"),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238345,"byte_end":238381,"line_start":330,"line_end":330,"column_start":5,"column_end":41}},{"value":"/     Some(&Value::from(\"my-value\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238386,"byte_end":238425,"line_start":331,"line_end":331,"column_start":5,"column_end":44}},{"value":"/ )","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238430,"byte_end":238435,"line_start":332,"line_end":332,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238440,"byte_end":238447,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1410},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239022,"byte_end":239042,"line_start":353,"line_end":353,"column_start":8,"column_end":28},"name":"current_with_baggage","qualname":"::baggage::BaggageExt::current_with_baggage","value":"fn current_with_baggage<T, I>(T) -> Self where T: IntoIterator<Item = I>,\nI: Into<KeyValueMetadata>","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Returns a clone of the current context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the current context with the included name-value pairs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238578,"byte_end":238656,"line_start":339,"line_end":339,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238661,"byte_end":238664,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238669,"byte_end":238683,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238688,"byte_end":238691,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238696,"byte_end":238703,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238708,"byte_end":238779,"line_start":344,"line_end":344,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238784,"byte_end":238787,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::current_with_baggage(vec![KeyValue::new(\"my-name\", \"my-value\")]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238792,"byte_end":238879,"line_start":346,"line_end":346,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238884,"byte_end":238887,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238892,"byte_end":238907,"line_start":348,"line_end":348,"column_start":5,"column_end":20}},{"value":"/     cx.baggage().get(\"my-name\"),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238912,"byte_end":238948,"line_start":349,"line_end":349,"column_start":5,"column_end":41}},{"value":"/     Some(&Value::from(\"my-value\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238953,"byte_end":238992,"line_start":350,"line_end":350,"column_start":5,"column_end":44}},{"value":"/ )","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":238997,"byte_end":239002,"line_start":351,"line_end":351,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239007,"byte_end":239014,"line_start":352,"line_end":352,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1413},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239476,"byte_end":239496,"line_start":368,"line_end":368,"column_start":8,"column_end":28},"name":"with_cleared_baggage","qualname":"::baggage::BaggageExt::with_cleared_baggage","value":"fn with_cleared_baggage(&Self) -> Self","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Returns a clone of the given context with the included name-value pairs.","sig":null,"attributes":[{"value":"/ Returns a clone of the given context with the included name-value pairs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239138,"byte_end":239214,"line_start":357,"line_end":357,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239219,"byte_end":239222,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239227,"byte_end":239241,"line_start":359,"line_end":359,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239246,"byte_end":239249,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239254,"byte_end":239261,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{baggage::BaggageExt, Context, KeyValue, Value};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239266,"byte_end":239337,"line_start":362,"line_end":362,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239342,"byte_end":239345,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::current().with_cleared_baggage();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239350,"byte_end":239405,"line_start":364,"line_end":364,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239410,"byte_end":239413,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(cx.baggage().len(), 0);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239418,"byte_end":239456,"line_start":366,"line_end":366,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239461,"byte_end":239468,"line_start":367,"line_end":367,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239635,"byte_end":239642,"line_start":372,"line_end":372,"column_start":8,"column_end":15},"name":"baggage","qualname":"::baggage::BaggageExt::baggage","value":"fn baggage(&Self) -> &Baggage","parent":{"krate":0,"index":1406},"children":[],"decl_id":null,"docs":" Returns a reference to this context's baggage, or the default\n empty baggage if none has been set.\n","sig":null,"attributes":[{"value":"/ Returns a reference to this context's baggage, or the default","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239518,"byte_end":239583,"line_start":370,"line_end":370,"column_start":5,"column_end":70}},{"value":"/ empty baggage if none has been set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239588,"byte_end":239627,"line_start":371,"line_end":371,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239703,"byte_end":239715,"line_start":376,"line_end":376,"column_start":8,"column_end":20},"name":"with_baggage","qualname":"<Context as baggage::BaggageExt>::with_baggage","value":"fn with_baggage<T, I>(&Self, T) -> Self where T: IntoIterator<Item = I>,\nI: Into<KeyValueMetadata>","parent":{"krate":0,"index":1406},"children":[],"decl_id":{"krate":0,"index":1407},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240266,"byte_end":240286,"line_start":394,"line_end":394,"column_start":8,"column_end":28},"name":"current_with_baggage","qualname":"<Context as baggage::BaggageExt>::current_with_baggage","value":"fn current_with_baggage<T, I>(T) -> Self where T: IntoIterator<Item = I>,\nI: Into<KeyValueMetadata>","parent":{"krate":0,"index":1406},"children":[],"decl_id":{"krate":0,"index":1410},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1424},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240418,"byte_end":240438,"line_start":398,"line_end":398,"column_start":8,"column_end":28},"name":"with_cleared_baggage","qualname":"<Context as baggage::BaggageExt>::with_cleared_baggage","value":"fn with_cleared_baggage(&Self) -> Self","parent":{"krate":0,"index":1406},"children":[],"decl_id":{"krate":0,"index":1413},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240510,"byte_end":240517,"line_start":402,"line_end":402,"column_start":8,"column_end":15},"name":"baggage","qualname":"<Context as baggage::BaggageExt>::baggage","value":"fn baggage(&Self) -> &Baggage","parent":{"krate":0,"index":1406},"children":[],"decl_id":{"krate":0,"index":1414},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2708},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241001,"byte_end":241016,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"BaggageMetadata","qualname":"::baggage::BaggageMetadata","value":"","parent":null,"children":[],"decl_id":null,"docs":" An optional property set that can be added to [`Baggage`] values.","sig":null,"attributes":[{"value":"/ An optional property set that can be added to [`Baggage`] values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240606,"byte_end":240675,"line_start":407,"line_end":407,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240676,"byte_end":240679,"line_start":408,"line_end":408,"column_start":1,"column_end":4}},{"value":"/ `BaggageMetadata` can be added to values in the form of a property set,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240680,"byte_end":240755,"line_start":409,"line_end":409,"column_start":1,"column_end":76}},{"value":"/ represented as semi-colon `;` delimited list of names and/or name-value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240756,"byte_end":240831,"line_start":410,"line_end":410,"column_start":1,"column_end":76}},{"value":"/ pairs, e.g. `;k1=v1;k2;k3=v3`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":240832,"byte_end":240866,"line_start":411,"line_end":411,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1427},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241094,"byte_end":241100,"line_start":418,"line_end":418,"column_start":12,"column_end":18},"name":"as_str","qualname":"<BaggageMetadata>::as_str","value":"fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return underlying string\n","sig":null,"attributes":[{"value":"/ Return underlying string","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241054,"byte_end":241082,"line_start":417,"line_end":417,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241198,"byte_end":241202,"line_start":424,"line_end":424,"column_start":8,"column_end":12},"name":"from","qualname":"<BaggageMetadata as std::convert::From>::from","value":"fn from(String) -> BaggageMetadata","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241335,"byte_end":241339,"line_start":430,"line_end":430,"column_start":8,"column_end":12},"name":"from","qualname":"<BaggageMetadata as std::convert::From>::from","value":"fn from(&str) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2723},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241592,"byte_end":241608,"line_start":438,"line_end":438,"column_start":12,"column_end":28},"name":"KeyValueMetadata","qualname":"::baggage::KeyValueMetadata","value":"KeyValueMetadata { key, value, metadata }","parent":null,"children":[{"krate":0,"index":2724},{"krate":0,"index":2725},{"krate":0,"index":2726}],"decl_id":null,"docs":" [`Baggage`] name-value pairs with their associated metadata.\n","sig":null,"attributes":[{"value":"/ [`Baggage`] name-value pairs with their associated metadata.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241414,"byte_end":241478,"line_start":435,"line_end":435,"column_start":1,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2724},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241650,"byte_end":241653,"line_start":440,"line_end":440,"column_start":9,"column_end":12},"name":"key","qualname":"::baggage::KeyValueMetadata::key","value":"common::Key","parent":{"krate":0,"index":2723},"children":[],"decl_id":null,"docs":" Dimension or event key\n","sig":null,"attributes":[{"value":"/ Dimension or event key","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241615,"byte_end":241641,"line_start":439,"line_end":439,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2725},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241701,"byte_end":241706,"line_start":442,"line_end":442,"column_start":9,"column_end":14},"name":"value","qualname":"::baggage::KeyValueMetadata::value","value":"common::Value","parent":{"krate":0,"index":2723},"children":[],"decl_id":null,"docs":" Dimension or event value\n","sig":null,"attributes":[{"value":"/ Dimension or event value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241664,"byte_end":241692,"line_start":441,"line_end":441,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":2726},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241775,"byte_end":241783,"line_start":444,"line_end":444,"column_start":9,"column_end":17},"name":"metadata","qualname":"::baggage::KeyValueMetadata::metadata","value":"baggage::BaggageMetadata","parent":{"krate":0,"index":2723},"children":[],"decl_id":null,"docs":" Metadata associate with this key value pair\n","sig":null,"attributes":[{"value":"/ Metadata associate with this key value pair","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241719,"byte_end":241766,"line_start":443,"line_end":443,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241891,"byte_end":241894,"line_start":449,"line_end":449,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyValueMetadata>::new","value":"fn new<K, V, S>(K, V, S) -> Self where K: Into<Key>, V: Into<Value>,\nS: Into<BaggageMetadata>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `KeyValue` pair with metadata\n","sig":null,"attributes":[{"value":"/ Create a new `KeyValue` pair with metadata","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241833,"byte_end":241879,"line_start":448,"line_end":448,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1438},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":242236,"byte_end":242240,"line_start":464,"line_end":464,"column_start":8,"column_end":12},"name":"from","qualname":"<KeyValueMetadata as std::convert::From>::from","value":"fn from(KeyValue) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2745},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247130,"byte_end":247137,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"Context","qualname":"::context::Context","value":"Context {  }","parent":null,"children":[{"krate":0,"index":2746}],"decl_id":null,"docs":" An execution-scoped collection of values.","sig":null,"attributes":[{"value":"/ An execution-scoped collection of values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244648,"byte_end":244693,"line_start":14,"line_end":14,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244694,"byte_end":244697,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A [`Context`] is a propagation mechanism which carries execution-scoped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244698,"byte_end":244773,"line_start":16,"line_end":16,"column_start":1,"column_end":76}},{"value":"/ values across API boundaries and between logically associated execution","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244774,"byte_end":244849,"line_start":17,"line_end":17,"column_start":1,"column_end":76}},{"value":"/ units. Cross-cutting concerns access their data in-process using the same","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244850,"byte_end":244927,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ shared context object.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244928,"byte_end":244954,"line_start":19,"line_end":19,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244955,"byte_end":244958,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ [`Context`]s are immutable, and their write operations result in the creation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":244959,"byte_end":245040,"line_start":21,"line_end":21,"column_start":1,"column_end":82}},{"value":"/ of a new context containing the original values and the new specified values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245041,"byte_end":245122,"line_start":22,"line_end":22,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245123,"byte_end":245126,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Context state","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245127,"byte_end":245147,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245148,"byte_end":245151,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Concerns can create and retrieve their local state in the current execution","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245152,"byte_end":245231,"line_start":26,"line_end":26,"column_start":1,"column_end":80}},{"value":"/ state represented by a context through the [`get`] and [`with_value`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245232,"byte_end":245305,"line_start":27,"line_end":27,"column_start":1,"column_end":74}},{"value":"/ methods. It is recommended to use application-specific types when storing new","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245306,"byte_end":245387,"line_start":28,"line_end":28,"column_start":1,"column_end":82}},{"value":"/ context values to avoid unintentionally overwriting existing state.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245388,"byte_end":245459,"line_start":29,"line_end":29,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245460,"byte_end":245463,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Managing the current context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245464,"byte_end":245499,"line_start":31,"line_end":31,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245500,"byte_end":245503,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Contexts can be associated with the caller's current execution unit on a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245504,"byte_end":245580,"line_start":33,"line_end":33,"column_start":1,"column_end":77}},{"value":"/ given thread via the [`attach`] method, and previous contexts can be restored","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245581,"byte_end":245662,"line_start":34,"line_end":34,"column_start":1,"column_end":82}},{"value":"/ by dropping the returned [`ContextGuard`]. Context can be nested, and will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245663,"byte_end":245741,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ restore their parent outer context when detached on drop. To access the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245742,"byte_end":245817,"line_start":36,"line_end":36,"column_start":1,"column_end":76}},{"value":"/ values of the context, a snapshot can be created via the [`Context::current`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245818,"byte_end":245899,"line_start":37,"line_end":37,"column_start":1,"column_end":82}},{"value":"/ method.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245900,"byte_end":245911,"line_start":38,"line_end":38,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245912,"byte_end":245915,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`Context::current`]: Context::current()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245916,"byte_end":245960,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/ [`get`]: Context::get()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245961,"byte_end":245988,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/ [`with_value`]: Context::with_value()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":245989,"byte_end":246030,"line_start":42,"line_end":42,"column_start":1,"column_end":42}},{"value":"/ [`attach`]: Context::attach()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246031,"byte_end":246064,"line_start":43,"line_end":43,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246065,"byte_end":246068,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246069,"byte_end":246083,"line_start":45,"line_end":45,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246084,"byte_end":246087,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246088,"byte_end":246095,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246096,"byte_end":246127,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246128,"byte_end":246131,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ // Application-specific `a` and `b` values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246132,"byte_end":246178,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246179,"byte_end":246210,"line_start":51,"line_end":51,"column_start":1,"column_end":32}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246211,"byte_end":246243,"line_start":52,"line_end":52,"column_start":1,"column_end":33}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246244,"byte_end":246275,"line_start":53,"line_end":53,"column_start":1,"column_end":32}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246276,"byte_end":246299,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246300,"byte_end":246303,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ let _outer_guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246304,"byte_end":246375,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246376,"byte_end":246379,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ // Only value a has been set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246380,"byte_end":246412,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/ let current = Context::current();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246413,"byte_end":246450,"line_start":59,"line_end":59,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246451,"byte_end":246511,"line_start":60,"line_end":60,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(current.get::<ValueB>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246512,"byte_end":246558,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246559,"byte_end":246562,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246563,"byte_end":246568,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/     let _inner_guard = Context::current_with_value(ValueB(42)).attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246569,"byte_end":246645,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/     // Both values are set in inner context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246646,"byte_end":246693,"line_start":65,"line_end":65,"column_start":1,"column_end":48}},{"value":"/     let current = Context::current();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246694,"byte_end":246735,"line_start":66,"line_end":66,"column_start":1,"column_end":42}},{"value":"/     assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246736,"byte_end":246800,"line_start":67,"line_end":67,"column_start":1,"column_end":65}},{"value":"/     assert_eq!(current.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246801,"byte_end":246864,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246865,"byte_end":246870,"line_start":69,"line_end":69,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246871,"byte_end":246874,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Resets to only the `a` value when inner guard is dropped","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246875,"byte_end":246938,"line_start":71,"line_end":71,"column_start":1,"column_end":64}},{"value":"/ let current = Context::current();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246939,"byte_end":246976,"line_start":72,"line_end":72,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(current.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":246977,"byte_end":247037,"line_start":73,"line_end":73,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(current.get::<ValueB>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247038,"byte_end":247084,"line_start":74,"line_end":74,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247085,"byte_end":247092,"line_start":75,"line_end":75,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1470},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247512,"byte_end":247515,"line_start":88,"line_end":88,"column_start":12,"column_end":15},"name":"new","qualname":"<Context>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `Context`.","sig":null,"attributes":[{"value":"/ Creates an empty `Context`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247250,"byte_end":247281,"line_start":82,"line_end":82,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247286,"byte_end":247289,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ The context is initially created with a capacity of 0, so it will not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247294,"byte_end":247367,"line_start":84,"line_end":84,"column_start":5,"column_end":78}},{"value":"/ allocate. Use [`with_value`] to create a new context that has entries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247372,"byte_end":247446,"line_start":85,"line_end":85,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247451,"byte_end":247454,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ [`with_value`]: Context::with_value()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247459,"byte_end":247500,"line_start":87,"line_end":87,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248027,"byte_end":248034,"line_start":109,"line_end":109,"column_start":12,"column_end":19},"name":"current","qualname":"<Context>::current","value":"fn current() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable snapshot of the current thread's context.","sig":null,"attributes":[{"value":"/ Returns an immutable snapshot of the current thread's context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247566,"byte_end":247632,"line_start":92,"line_end":92,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247637,"byte_end":247640,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247645,"byte_end":247659,"line_start":94,"line_end":94,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247664,"byte_end":247667,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247672,"byte_end":247679,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247684,"byte_end":247715,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247720,"byte_end":247723,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247728,"byte_end":247759,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247764,"byte_end":247796,"line_start":100,"line_end":100,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247801,"byte_end":247804,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ fn do_work() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247809,"byte_end":247827,"line_start":102,"line_end":102,"column_start":5,"column_end":23}},{"value":"/     assert_eq!(Context::current().get(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247832,"byte_end":247897,"line_start":103,"line_end":103,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247902,"byte_end":247907,"line_start":104,"line_end":104,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247912,"byte_end":247915,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ let _guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247920,"byte_end":247985,"line_start":106,"line_end":106,"column_start":5,"column_end":70}},{"value":"/ do_work()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247990,"byte_end":248003,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248008,"byte_end":248015,"line_start":108,"line_end":108,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249172,"byte_end":249190,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"current_with_value","qualname":"<Context>::current_with_value","value":"fn current_with_value<T>(T) -> Self where T: 'static + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" Returns a clone of the current thread's context with the given value.","sig":null,"attributes":[{"value":"/ Returns a clone of the current thread's context with the given value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248095,"byte_end":248168,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248173,"byte_end":248176,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is a more efficient form of `Context::current().with_value(value)`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248181,"byte_end":248256,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ as it avoids the intermediate context clone.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248261,"byte_end":248309,"line_start":116,"line_end":116,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248314,"byte_end":248317,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248322,"byte_end":248336,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248341,"byte_end":248344,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248349,"byte_end":248356,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248361,"byte_end":248392,"line_start":121,"line_end":121,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248397,"byte_end":248400,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248405,"byte_end":248462,"line_start":123,"line_end":123,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248467,"byte_end":248498,"line_start":124,"line_end":124,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248503,"byte_end":248535,"line_start":125,"line_end":125,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248540,"byte_end":248571,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248576,"byte_end":248599,"line_start":127,"line_end":127,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248604,"byte_end":248607,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ // You can create and attach context with the first value set to \"a\"","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248612,"byte_end":248684,"line_start":129,"line_end":129,"column_start":5,"column_end":77}},{"value":"/ let _guard = Context::new().with_value(ValueA(\"a\")).attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248689,"byte_end":248754,"line_start":130,"line_end":130,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248759,"byte_end":248762,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ // And create another context based on the fist with a new value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248767,"byte_end":248835,"line_start":132,"line_end":132,"column_start":5,"column_end":73}},{"value":"/ let all_current_and_b = Context::current_with_value(ValueB(42));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248840,"byte_end":248908,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248913,"byte_end":248916,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ // The second context now contains all the current values and the addition","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":248921,"byte_end":248999,"line_start":135,"line_end":135,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(all_current_and_b.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249004,"byte_end":249074,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(all_current_and_b.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249079,"byte_end":249148,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249153,"byte_end":249160,"line_start":138,"line_end":138,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1475},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250068,"byte_end":250071,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"get","qualname":"<Context>::get","value":"fn get<T>(&Self) -> Option<&T> where T: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the entry for the corresponding value type.","sig":null,"attributes":[{"value":"/ Returns a reference to the entry for the corresponding value type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249417,"byte_end":249487,"line_start":148,"line_end":148,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249492,"byte_end":249495,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249500,"byte_end":249514,"line_start":150,"line_end":150,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249519,"byte_end":249522,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249527,"byte_end":249534,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249539,"byte_end":249570,"line_start":153,"line_end":153,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249575,"byte_end":249578,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249583,"byte_end":249640,"line_start":155,"line_end":155,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249645,"byte_end":249676,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249681,"byte_end":249713,"line_start":157,"line_end":157,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249718,"byte_end":249749,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/ struct MyUser();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249754,"byte_end":249774,"line_start":159,"line_end":159,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249779,"byte_end":249782,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ let cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249787,"byte_end":249839,"line_start":161,"line_end":161,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249844,"byte_end":249847,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ // Values can be queried by type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249852,"byte_end":249888,"line_start":163,"line_end":163,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(cx.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249893,"byte_end":249948,"line_start":164,"line_end":164,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249953,"byte_end":249956,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ // And return none if not yet set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":249961,"byte_end":249998,"line_start":166,"line_end":166,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(cx.get::<MyUser>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250003,"byte_end":250044,"line_start":167,"line_end":167,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250049,"byte_end":250056,"line_start":168,"line_end":168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1478},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251286,"byte_end":251296,"line_start":202,"line_end":202,"column_start":12,"column_end":22},"name":"with_value","qualname":"<Context>::with_value","value":"fn with_value<T>(&Self, T) -> Self where T: 'static + Send + Sync","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of the context with the new value included.","sig":null,"attributes":[{"value":"/ Returns a copy of the context with the new value included.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250226,"byte_end":250288,"line_start":175,"line_end":175,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250293,"byte_end":250296,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250301,"byte_end":250315,"line_start":177,"line_end":177,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250320,"byte_end":250323,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250328,"byte_end":250335,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250340,"byte_end":250371,"line_start":180,"line_end":180,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250376,"byte_end":250379,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ // Given some value types defined in your application","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250384,"byte_end":250441,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250446,"byte_end":250477,"line_start":183,"line_end":183,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250482,"byte_end":250514,"line_start":184,"line_end":184,"column_start":5,"column_end":37}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250519,"byte_end":250550,"line_start":185,"line_end":185,"column_start":5,"column_end":36}},{"value":"/ struct ValueB(u64);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250555,"byte_end":250578,"line_start":186,"line_end":186,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250583,"byte_end":250586,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ // You can create a context with the first value set to \"a\"","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250591,"byte_end":250654,"line_start":188,"line_end":188,"column_start":5,"column_end":68}},{"value":"/ let cx_with_a = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250659,"byte_end":250718,"line_start":189,"line_end":189,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250723,"byte_end":250726,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ // And create another context based on the fist with a new value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250731,"byte_end":250799,"line_start":191,"line_end":191,"column_start":5,"column_end":73}},{"value":"/ let cx_with_a_and_b = cx_with_a.with_value(ValueB(42));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250804,"byte_end":250863,"line_start":192,"line_end":192,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250868,"byte_end":250871,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ // The first context is still available and unmodified","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250876,"byte_end":250934,"line_start":194,"line_end":194,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(cx_with_a.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":250939,"byte_end":251001,"line_start":195,"line_end":195,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(cx_with_a.get::<ValueB>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251006,"byte_end":251054,"line_start":196,"line_end":196,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251059,"byte_end":251062,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ // The second context now contains both values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251067,"byte_end":251117,"line_start":198,"line_end":198,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(cx_with_a_and_b.get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251122,"byte_end":251190,"line_start":199,"line_end":199,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(cx_with_a_and_b.get::<ValueB>(), Some(&ValueB(42)));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251195,"byte_end":251262,"line_start":200,"line_end":200,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251267,"byte_end":251274,"line_start":201,"line_end":201,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1480},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253940,"byte_end":253946,"line_start":285,"line_end":285,"column_start":12,"column_end":18},"name":"attach","qualname":"<Context>::attach","value":"fn attach(Self) -> ContextGuard","parent":null,"children":[],"decl_id":null,"docs":" Replaces the current context on this thread with this context.","sig":null,"attributes":[{"value":"/ Replaces the current context on this thread with this context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251524,"byte_end":251590,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251595,"byte_end":251598,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Dropping the returned [`ContextGuard`] will reset the current context to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251603,"byte_end":251683,"line_start":213,"line_end":213,"column_start":5,"column_end":85}},{"value":"/ previous value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251688,"byte_end":251707,"line_start":214,"line_end":214,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251712,"byte_end":251715,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251720,"byte_end":251723,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251728,"byte_end":251742,"line_start":217,"line_end":217,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251747,"byte_end":251750,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251755,"byte_end":251762,"line_start":219,"line_end":219,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251767,"byte_end":251798,"line_start":220,"line_end":220,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251803,"byte_end":251806,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251811,"byte_end":251842,"line_start":222,"line_end":222,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251847,"byte_end":251879,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251884,"byte_end":251887,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251892,"byte_end":251947,"line_start":225,"line_end":225,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251952,"byte_end":251955,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ // Set the current thread context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":251960,"byte_end":251997,"line_start":227,"line_end":227,"column_start":5,"column_end":42}},{"value":"/ let cx_guard = my_cx.attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252002,"byte_end":252036,"line_start":228,"line_end":228,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252041,"byte_end":252112,"line_start":229,"line_end":229,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252117,"byte_end":252120,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ // Drop the guard to restore the previous context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252125,"byte_end":252178,"line_start":231,"line_end":231,"column_start":5,"column_end":58}},{"value":"/ drop(cx_guard);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252183,"byte_end":252202,"line_start":232,"line_end":232,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252207,"byte_end":252264,"line_start":233,"line_end":233,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252269,"byte_end":252276,"line_start":234,"line_end":234,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252281,"byte_end":252284,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ Guards do not need to be explicitly dropped:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252289,"byte_end":252337,"line_start":236,"line_end":236,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252342,"byte_end":252345,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252350,"byte_end":252357,"line_start":238,"line_end":238,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252362,"byte_end":252393,"line_start":239,"line_end":239,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252398,"byte_end":252401,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252406,"byte_end":252437,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252442,"byte_end":252474,"line_start":242,"line_end":242,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252479,"byte_end":252482,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ fn my_function() -> String {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252487,"byte_end":252519,"line_start":244,"line_end":244,"column_start":5,"column_end":37}},{"value":"/     // attach a context the duration of this function.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252524,"byte_end":252582,"line_start":245,"line_end":245,"column_start":5,"column_end":63}},{"value":"/     let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252587,"byte_end":252646,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"/     // NOTE: a variable name after the underscore is **required** or rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252651,"byte_end":252728,"line_start":247,"line_end":247,"column_start":5,"column_end":82}},{"value":"/     // will drop the guard, restoring the previous context _immediately_.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252733,"byte_end":252810,"line_start":248,"line_end":248,"column_start":5,"column_end":82}},{"value":"/     let _guard = my_cx.attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252815,"byte_end":252851,"line_start":249,"line_end":249,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252856,"byte_end":252859,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/     // anything happening in functions we call can still access my_cx...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252864,"byte_end":252940,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/     my_other_function();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252945,"byte_end":252973,"line_start":252,"line_end":252,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252978,"byte_end":252981,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/     // returning from the function drops the guard, exiting the span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":252986,"byte_end":253059,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/     return \"Hello world\".to_owned();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253064,"byte_end":253104,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253109,"byte_end":253114,"line_start":256,"line_end":256,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253119,"byte_end":253122,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253127,"byte_end":253155,"line_start":258,"line_end":258,"column_start":5,"column_end":33}},{"value":"/     // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253160,"byte_end":253174,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253179,"byte_end":253184,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253189,"byte_end":253196,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ Sub-scopes may be created to limit the duration for which the span is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253201,"byte_end":253274,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ entered:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253279,"byte_end":253291,"line_start":263,"line_end":263,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253296,"byte_end":253299,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253304,"byte_end":253311,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::Context;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253316,"byte_end":253347,"line_start":266,"line_end":266,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253352,"byte_end":253355,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253360,"byte_end":253391,"line_start":268,"line_end":268,"column_start":5,"column_end":36}},{"value":"/ struct ValueA(&'static str);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253396,"byte_end":253428,"line_start":269,"line_end":269,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253433,"byte_end":253436,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let my_cx = Context::new().with_value(ValueA(\"a\"));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253441,"byte_end":253496,"line_start":271,"line_end":271,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253501,"byte_end":253504,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253509,"byte_end":253514,"line_start":273,"line_end":273,"column_start":5,"column_end":10}},{"value":"/     let _guard = my_cx.attach();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253519,"byte_end":253555,"line_start":274,"line_end":274,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253560,"byte_end":253563,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/     // the current context can access variables in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253568,"byte_end":253622,"line_start":276,"line_end":276,"column_start":5,"column_end":59}},{"value":"/     assert_eq!(Context::current().get::<ValueA>(), Some(&ValueA(\"a\")));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253627,"byte_end":253702,"line_start":277,"line_end":277,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253707,"byte_end":253710,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/     // exiting the scope drops the guard, detaching the context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253715,"byte_end":253783,"line_start":279,"line_end":279,"column_start":5,"column_end":73}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253788,"byte_end":253793,"line_start":280,"line_end":280,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253798,"byte_end":253801,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ // this is back in the default empty context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253806,"byte_end":253854,"line_start":282,"line_end":282,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(Context::current().get::<ValueA>(), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253859,"byte_end":253916,"line_start":283,"line_end":283,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":253921,"byte_end":253928,"line_start":284,"line_end":284,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1483},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254226,"byte_end":254229,"line_start":298,"line_end":298,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Context as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254528,"byte_end":254540,"line_start":307,"line_end":307,"column_start":12,"column_end":24},"name":"ContextGuard","qualname":"::context::ContextGuard","value":"ContextGuard {  }","parent":null,"children":[{"krate":0,"index":1485},{"krate":0,"index":1486}],"decl_id":null,"docs":" A guard that resets the current context to the prior context when dropped.\n","sig":null,"attributes":[{"value":"/ A guard that resets the current context to the prior context when dropped.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254398,"byte_end":254476,"line_start":305,"line_end":305,"column_start":1,"column_end":79}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254477,"byte_end":254516,"line_start":306,"line_end":306,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1488},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254716,"byte_end":254720,"line_start":314,"line_end":314,"column_start":8,"column_end":12},"name":"drop","qualname":"<ContextGuard as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2760},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257160,"byte_end":257163,"line_start":9,"line_end":9,"column_start":12,"column_end":15},"name":"Key","qualname":"::common::Key","value":"","parent":null,"children":[],"decl_id":null,"docs":" Key used for metric `AttributeSet`s and trace `Span` attributes.\n","sig":null,"attributes":[{"value":"/ Key used for metric `AttributeSet`s and trace `Span` attributes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":256951,"byte_end":257019,"line_start":6,"line_end":6,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257235,"byte_end":257238,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<Key>::new","value":"fn new<S>(S) -> Self where S: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Key`.\n","sig":null,"attributes":[{"value":"/ Create a new `Key`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257200,"byte_end":257223,"line_start":12,"line_end":12,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257371,"byte_end":257386,"line_start":18,"line_end":18,"column_start":18,"column_end":33},"name":"from_static_str","qualname":"<Key>::from_static_str","value":"const fn from_static_str(&'static str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new const `Key`.\n","sig":null,"attributes":[{"value":"/ Create a new const `Key`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257324,"byte_end":257353,"line_start":17,"line_end":17,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257522,"byte_end":257526,"line_start":23,"line_end":23,"column_start":12,"column_end":16},"name":"bool","qualname":"<Key>::bool","value":"fn bool<T>(Self, T) -> KeyValue where T: Into<bool>","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `bool` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `bool` values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257463,"byte_end":257510,"line_start":22,"line_end":22,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257739,"byte_end":257742,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"i64","qualname":"<Key>::i64","value":"fn i64(Self, i64) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `i64` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `i64` values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257681,"byte_end":257727,"line_start":30,"line_end":30,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257934,"byte_end":257937,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"f64","qualname":"<Key>::f64","value":"fn f64(Self, f64) -> KeyValue","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `f64` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `f64` values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257876,"byte_end":257922,"line_start":38,"line_end":38,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258132,"byte_end":258138,"line_start":47,"line_end":47,"column_start":12,"column_end":18},"name":"string","qualname":"<Key>::string","value":"fn string<T>(Self, T) -> KeyValue where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for `String` values.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for `String` values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258071,"byte_end":258120,"line_start":46,"line_end":46,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258360,"byte_end":258365,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"array","qualname":"<Key>::array","value":"fn array<T>(Self, T) -> KeyValue where T: Into<Array>","parent":null,"children":[],"decl_id":null,"docs":" Create a `KeyValue` pair for arrays.\n","sig":null,"attributes":[{"value":"/ Create a `KeyValue` pair for arrays.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258308,"byte_end":258348,"line_start":54,"line_end":54,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258584,"byte_end":258590,"line_start":63,"line_end":63,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Key>::as_str","value":"fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying key name\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying key name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258522,"byte_end":258572,"line_start":62,"line_end":62,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258719,"byte_end":258723,"line_start":70,"line_end":70,"column_start":8,"column_end":12},"name":"from","qualname":"<Key as std::convert::From>::from","value":"fn from(&'static str) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":" Convert a `&str` to a `Key`.\n","sig":null,"attributes":[{"value":"/ Convert a `&str` to a `Key`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258679,"byte_end":258711,"line_start":69,"line_end":69,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1530},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258872,"byte_end":258876,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"from","qualname":"<Key as std::convert::From>::from","value":"fn from(String) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":" Convert a `String` to a `Key`.\n","sig":null,"attributes":[{"value":"/ Convert a `String` to a `Key`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258830,"byte_end":258864,"line_start":76,"line_end":76,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1532},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259026,"byte_end":259030,"line_start":84,"line_end":84,"column_start":8,"column_end":12},"name":"from","qualname":"<String as std::convert::From>::from","value":"fn from(Key) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":" Converts `Key` instances into `String`.\n","sig":null,"attributes":[{"value":"/ Converts `Key` instances into `String`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258975,"byte_end":259018,"line_start":83,"line_end":83,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1534},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259122,"byte_end":259125,"line_start":90,"line_end":90,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Key as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2782},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259391,"byte_end":259395,"line_start":100,"line_end":100,"column_start":5,"column_end":9},"name":"Bool","qualname":"::common::Array::Bool","value":"Array::Bool(Vec<bool>)","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" Array of bools\n","sig":null,"attributes":[{"value":"/ Array of bools","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259368,"byte_end":259386,"line_start":99,"line_end":99,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2784},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259396,"byte_end":259405,"line_start":100,"line_end":100,"column_start":10,"column_end":19},"name":"0","qualname":"::common::Array::Bool::0","value":"std::vec::Vec<bool>","parent":{"krate":0,"index":2782},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2785},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259438,"byte_end":259441,"line_start":102,"line_end":102,"column_start":5,"column_end":8},"name":"I64","qualname":"::common::Array::I64","value":"Array::I64(Vec<i64>)","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" Array of integers\n","sig":null,"attributes":[{"value":"/ Array of integers","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259412,"byte_end":259433,"line_start":101,"line_end":101,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":2787},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259442,"byte_end":259450,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"0","qualname":"::common::Array::I64::0","value":"std::vec::Vec<i64>","parent":{"krate":0,"index":2785},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2788},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259481,"byte_end":259484,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"F64","qualname":"::common::Array::F64","value":"Array::F64(Vec<f64>)","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" Array of floats\n","sig":null,"attributes":[{"value":"/ Array of floats","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259457,"byte_end":259476,"line_start":103,"line_end":103,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":2790},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259485,"byte_end":259493,"line_start":104,"line_end":104,"column_start":9,"column_end":17},"name":"0","qualname":"::common::Array::F64::0","value":"std::vec::Vec<f64>","parent":{"krate":0,"index":2788},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2791},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259525,"byte_end":259531,"line_start":106,"line_end":106,"column_start":5,"column_end":11},"name":"String","qualname":"::common::Array::String","value":"Array::String(Vec<Cow>)","parent":{"krate":0,"index":2781},"children":[],"decl_id":null,"docs":" Array of strings\n","sig":null,"attributes":[{"value":"/ Array of strings","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259500,"byte_end":259520,"line_start":105,"line_end":105,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2793},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259532,"byte_end":259554,"line_start":106,"line_end":106,"column_start":12,"column_end":34},"name":"0","qualname":"::common::Array::String::0","value":"std::vec::Vec<std::borrow::Cow<'static, str>>","parent":{"krate":0,"index":2791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2781},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259356,"byte_end":259361,"line_start":98,"line_end":98,"column_start":10,"column_end":15},"name":"Array","qualname":"::common::Array","value":"enum Array {\n    Bool(Vec<bool>),\n    I64(Vec<i64>),\n    F64(Vec<f64>),\n    String(Vec<Cow>),\n}","parent":null,"children":[{"krate":0,"index":2782},{"krate":0,"index":2785},{"krate":0,"index":2788},{"krate":0,"index":2791}],"decl_id":null,"docs":" Array of homogeneous values\n","sig":null,"attributes":[{"value":"/ Array of homogeneous values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259213,"byte_end":259244,"line_start":95,"line_end":95,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1536},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259597,"byte_end":259600,"line_start":110,"line_end":110,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Array as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2811},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261086,"byte_end":261090,"line_start":164,"line_end":164,"column_start":5,"column_end":9},"name":"Bool","qualname":"::common::Value::Bool","value":"Value::Bool(bool)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" bool values\n","sig":null,"attributes":[{"value":"/ bool values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261066,"byte_end":261081,"line_start":163,"line_end":163,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":2813},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261091,"byte_end":261095,"line_start":164,"line_end":164,"column_start":10,"column_end":14},"name":"0","qualname":"::common::Value::Bool::0","value":"bool","parent":{"krate":0,"index":2811},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2814},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261121,"byte_end":261124,"line_start":166,"line_end":166,"column_start":5,"column_end":8},"name":"I64","qualname":"::common::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" i64 values\n","sig":null,"attributes":[{"value":"/ i64 values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261102,"byte_end":261116,"line_start":165,"line_end":165,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2816},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261125,"byte_end":261128,"line_start":166,"line_end":166,"column_start":9,"column_end":12},"name":"0","qualname":"::common::Value::I64::0","value":"i64","parent":{"krate":0,"index":2814},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2817},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261154,"byte_end":261157,"line_start":168,"line_end":168,"column_start":5,"column_end":8},"name":"F64","qualname":"::common::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" f64 values\n","sig":null,"attributes":[{"value":"/ f64 values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261135,"byte_end":261149,"line_start":167,"line_end":167,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":2819},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261158,"byte_end":261161,"line_start":168,"line_end":168,"column_start":9,"column_end":12},"name":"0","qualname":"::common::Value::F64::0","value":"f64","parent":{"krate":0,"index":2817},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2820},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261190,"byte_end":261196,"line_start":170,"line_end":170,"column_start":5,"column_end":11},"name":"String","qualname":"::common::Value::String","value":"Value::String(Cow)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" String values\n","sig":null,"attributes":[{"value":"/ String values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261168,"byte_end":261185,"line_start":169,"line_end":169,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":2822},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261197,"byte_end":261214,"line_start":170,"line_end":170,"column_start":12,"column_end":29},"name":"0","qualname":"::common::Value::String::0","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":2820},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2823},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261257,"byte_end":261262,"line_start":172,"line_end":172,"column_start":5,"column_end":10},"name":"Array","qualname":"::common::Value::Array","value":"Value::Array(Array)","parent":{"krate":0,"index":2810},"children":[],"decl_id":null,"docs":" Array of homogeneous values\n","sig":null,"attributes":[{"value":"/ Array of homogeneous values","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261221,"byte_end":261252,"line_start":171,"line_end":171,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":2825},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261263,"byte_end":261268,"line_start":172,"line_end":172,"column_start":11,"column_end":16},"name":"0","qualname":"::common::Value::Array::0","value":"common::Array","parent":{"krate":0,"index":2823},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2810},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261054,"byte_end":261059,"line_start":162,"line_end":162,"column_start":10,"column_end":15},"name":"Value","qualname":"::common::Value","value":"enum Value { Bool(bool), I64(i64), F64(f64), String(Cow), Array(Array), }","parent":null,"children":[{"krate":0,"index":2811},{"krate":0,"index":2814},{"krate":0,"index":2817},{"krate":0,"index":2820},{"krate":0,"index":2823}],"decl_id":null,"docs":" Value types for use in `KeyValue` pairs.\n","sig":null,"attributes":[{"value":"/ Value types for use in `KeyValue` pairs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":260898,"byte_end":260942,"line_start":159,"line_end":159,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261422,"byte_end":261428,"line_start":179,"line_end":179,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Value>::as_str","value":"fn as_str(&Self) -> Cow<, str>","parent":null,"children":[],"decl_id":null,"docs":" String representation of the `Value`","sig":null,"attributes":[{"value":"/ String representation of the `Value`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261291,"byte_end":261331,"line_start":176,"line_end":176,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261336,"byte_end":261339,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ This will allocate iff the underlying value is not a `String`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261344,"byte_end":261410,"line_start":178,"line_end":178,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1544},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262284,"byte_end":262288,"line_start":215,"line_end":215,"column_start":8,"column_end":12},"name":"from","qualname":"<Value as std::convert::From>::from","value":"fn from(&'static str) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":" Convenience method for creating a `Value` from a `&'static str`.\n","sig":null,"attributes":[{"value":"/ Convenience method for creating a `Value` from a `&'static str`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262208,"byte_end":262276,"line_start":214,"line_end":214,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1546},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262461,"byte_end":262465,"line_start":222,"line_end":222,"column_start":8,"column_end":12},"name":"from","qualname":"<Value as std::convert::From>::from","value":"fn from(String) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":" Convenience method for creating a `Value` from a `String`.\n","sig":null,"attributes":[{"value":"/ Convenience method for creating a `Value` from a `String`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262391,"byte_end":262453,"line_start":221,"line_end":221,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1548},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262565,"byte_end":262568,"line_start":228,"line_end":228,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Value as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2842},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263189,"byte_end":263197,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"KeyValue","qualname":"::common::KeyValue","value":"KeyValue { key, value }","parent":null,"children":[{"krate":0,"index":2843},{"krate":0,"index":2844}],"decl_id":null,"docs":" `KeyValue` pairs are used by `AttributeSet`s and `Span` attributes.\n","sig":null,"attributes":[{"value":"/ `KeyValue` pairs are used by `AttributeSet`s and `Span` attributes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263004,"byte_end":263075,"line_start":239,"line_end":239,"column_start":1,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":2843},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263239,"byte_end":263242,"line_start":244,"line_end":244,"column_start":9,"column_end":12},"name":"key","qualname":"::common::KeyValue::key","value":"common::Key","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":" Dimension or event key\n","sig":null,"attributes":[{"value":"/ Dimension or event key","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263204,"byte_end":263230,"line_start":243,"line_end":243,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2844},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263290,"byte_end":263295,"line_start":246,"line_end":246,"column_start":9,"column_end":14},"name":"value","qualname":"::common::KeyValue::value","value":"common::Value","parent":{"krate":0,"index":2842},"children":[],"decl_id":null,"docs":" Dimension or event value\n","sig":null,"attributes":[{"value":"/ Dimension or event value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263253,"byte_end":263281,"line_start":245,"line_end":245,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263372,"byte_end":263375,"line_start":251,"line_end":251,"column_start":12,"column_end":15},"name":"new","qualname":"<KeyValue>::new","value":"fn new<K, V>(K, V) -> Self where K: Into<Key>, V: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `KeyValue` pair.\n","sig":null,"attributes":[{"value":"/ Create a new `KeyValue` pair.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263327,"byte_end":263360,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":1566},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"runtime","qualname":"::runtime","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1568},{"krate":0,"index":1571},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1578},{"krate":0,"index":1581}],"decl_id":null,"docs":" Provides an abstraction of several async runtimes","sig":null,"attributes":[{"value":"/ Provides an abstraction of several async runtimes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263570,"byte_end":263623,"line_start":1,"line_end":1,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263624,"byte_end":263627,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This  allows OpenTelemetry to work with any current or future runtime. There are currently","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263628,"byte_end":263722,"line_start":3,"line_end":3,"column_start":1,"column_end":95}},{"value":"/ builtin implementations for [Tokio] and [async-std].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263723,"byte_end":263779,"line_start":4,"line_end":4,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263780,"byte_end":263783,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [Tokio]: https://crates.io/crates/tokio","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263784,"byte_end":263827,"line_start":6,"line_end":6,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263828,"byte_end":263879,"line_start":7,"line_end":7,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1581},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264269,"byte_end":264276,"line_start":17,"line_end":17,"column_start":11,"column_end":18},"name":"Runtime","qualname":"::runtime::Runtime","value":"Runtime: Clone + Send + Sync + 'static","parent":null,"children":[{"krate":0,"index":1582},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1586}],"decl_id":null,"docs":" A runtime is an abstraction of an async runtime like [Tokio] or [async-std]. It allows\n OpenTelemetry to work with any current and hopefully future runtime implementation.","sig":null,"attributes":[{"value":"/ A runtime is an abstraction of an async runtime like [Tokio] or [async-std]. It allows","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":263980,"byte_end":264070,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/ OpenTelemetry to work with any current and hopefully future runtime implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264071,"byte_end":264158,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264159,"byte_end":264162,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [Tokio]: https://crates.io/crates/tokio","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264163,"byte_end":264206,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/ [async-std]: https://crates.io/crates/async-std","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264207,"byte_end":264258,"line_start":16,"line_end":16,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264440,"byte_end":264448,"line_start":20,"line_end":20,"column_start":10,"column_end":18},"name":"Interval","qualname":"::runtime::Runtime::Interval","value":"type Interval: Stream + Send;","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" A future stream, which returns items in a previously specified interval. The item type is\n not important.\n","sig":null,"attributes":[{"value":"/ A future stream, which returns items in a previously specified interval. The item type is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264314,"byte_end":264407,"line_start":18,"line_end":18,"column_start":5,"column_end":98}},{"value":"/ not important.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264412,"byte_end":264430,"line_start":19,"line_end":19,"column_start":5,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":1583},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264595,"byte_end":264600,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Delay","qualname":"::runtime::Runtime::Delay","value":"type Delay: Future + Send;","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" A future, which resolves after a previously specified amount of time. The output type is\n not important.\n","sig":null,"attributes":[{"value":"/ A future, which resolves after a previously specified amount of time. The output type is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264470,"byte_end":264562,"line_start":22,"line_end":22,"column_start":5,"column_end":97}},{"value":"/ not important.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264567,"byte_end":264585,"line_start":23,"line_end":23,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264754,"byte_end":264762,"line_start":28,"line_end":28,"column_start":8,"column_end":16},"name":"interval","qualname":"::runtime::Runtime::interval","value":"fn interval(&Self, Duration) -> Self::Interval","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" Create a [Stream][futures_util::stream::Stream], which returns a new item every\n [Duration][std::time::Duration].\n","sig":null,"attributes":[{"value":"/ Create a [Stream][futures_util::stream::Stream], which returns a new item every","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264622,"byte_end":264705,"line_start":26,"line_end":26,"column_start":5,"column_end":88}},{"value":"/ [Duration][std::time::Duration].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264710,"byte_end":264746,"line_start":27,"line_end":27,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1585},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265370,"byte_end":265375,"line_start":39,"line_end":39,"column_start":8,"column_end":13},"name":"spawn","qualname":"::runtime::Runtime::spawn","value":"fn spawn(&Self, BoxFuture)","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" Spawn a new task or thread, which executes the given future.","sig":null,"attributes":[{"value":"/ Spawn a new task or thread, which executes the given future.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264814,"byte_end":264878,"line_start":30,"line_end":30,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264883,"byte_end":264886,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264891,"byte_end":264901,"line_start":32,"line_end":32,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264906,"byte_end":264909,"line_start":33,"line_end":33,"column_start":5,"column_end":8}},{"value":"/ This is mainly used to run batch span processing in the background. Note, that the function","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264914,"byte_end":265009,"line_start":34,"line_end":34,"column_start":5,"column_end":100}},{"value":"/ does not return a handle. OpenTelemetry will use a different way to wait for the future to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265014,"byte_end":265108,"line_start":35,"line_end":35,"column_start":5,"column_end":99}},{"value":"/ finish when TracerProvider gets shutdown. At the moment this happens by blocking the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265113,"byte_end":265201,"line_start":36,"line_end":36,"column_start":5,"column_end":93}},{"value":"/ current thread. This means runtime implementations need to make sure they can still execute","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265206,"byte_end":265301,"line_start":37,"line_end":37,"column_start":5,"column_end":100}},{"value":"/ the given future even if the main thread is blocked.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265306,"byte_end":265362,"line_start":38,"line_end":38,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265521,"byte_end":265526,"line_start":42,"line_end":42,"column_start":8,"column_end":13},"name":"delay","qualname":"::runtime::Runtime::delay","value":"fn delay(&Self, Duration) -> Self::Delay","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" Return a new future, which resolves after the specified [Duration][std::time::Duration].\n","sig":null,"attributes":[{"value":"/ Return a new future, which resolves after the specified [Duration][std::time::Duration].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":265421,"byte_end":265513,"line_start":41,"line_end":41,"column_start":5,"column_end":97}}]},{"kind":"Mod","id":{"krate":0,"index":1587},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/util.rs","parent":null,"children":[],"decl_id":null,"docs":" Internal utilities\n","sig":null,"attributes":[{"value":"/ Internal utilities","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/util.rs","byte_start":268587,"byte_end":268609,"line_start":1,"line_end":1,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"propagation","qualname":"::propagation","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","parent":null,"children":[{"krate":0,"index":1589},{"krate":0,"index":1592},{"krate":0,"index":1624},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1632},{"krate":0,"index":1635}],"decl_id":null,"docs":" # OpenTelemetry Propagator interface","sig":null,"attributes":[{"value":"/ # OpenTelemetry Propagator interface","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":268949,"byte_end":268989,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":268990,"byte_end":268993,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Propagators API consists of two main formats:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":268994,"byte_end":269043,"line_start":3,"line_end":3,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269044,"byte_end":269047,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ - `BinaryFormat` is used to serialize and deserialize a value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269048,"byte_end":269113,"line_start":5,"line_end":5,"column_start":1,"column_end":66}},{"value":"/ into a binary representation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269114,"byte_end":269147,"line_start":6,"line_end":6,"column_start":1,"column_end":34}},{"value":"/ - `TextMapFormat` is used to inject and extract a value as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269148,"byte_end":269210,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/ text into injectors and extractors that travel in-band across process boundaries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269211,"byte_end":269296,"line_start":8,"line_end":8,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269297,"byte_end":269300,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Deserializing must set `is_remote` to true on the returned","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269301,"byte_end":269363,"line_start":10,"line_end":10,"column_start":1,"column_end":63}},{"value":"/ `SpanContext`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269364,"byte_end":269382,"line_start":11,"line_end":11,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269383,"byte_end":269386,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Binary Format","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269387,"byte_end":269407,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269408,"byte_end":269411,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ `BinaryFormat` is a formatter to serialize and deserialize a value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269412,"byte_end":269482,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ into a binary format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269483,"byte_end":269508,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269509,"byte_end":269512,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ `BinaryFormat` MUST expose the APIs that serializes values into bytes,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269513,"byte_end":269587,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ and deserializes values from bytes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269588,"byte_end":269627,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269628,"byte_end":269631,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### ToBytes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269632,"byte_end":269647,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269648,"byte_end":269651,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Serializes the given value into the on-the-wire representation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269652,"byte_end":269719,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269720,"byte_end":269723,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269724,"byte_end":269747,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269748,"byte_end":269751,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ - the value to serialize, can be `SpanContext` or `DistributedContext`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269752,"byte_end":269827,"line_start":27,"line_end":27,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269828,"byte_end":269831,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Returns the on-the-wire byte representation of the value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269832,"byte_end":269893,"line_start":29,"line_end":29,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269894,"byte_end":269897,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ### FromBytes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269898,"byte_end":269915,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269916,"byte_end":269919,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Creates a value from the given on-the-wire encoded representation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269920,"byte_end":269990,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269991,"byte_end":269994,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ If the value could not be parsed, the underlying implementation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":269995,"byte_end":270062,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/ SHOULD decide to return ether an empty value, an invalid value, or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270063,"byte_end":270133,"line_start":36,"line_end":36,"column_start":1,"column_end":71}},{"value":"/ a valid value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270134,"byte_end":270152,"line_start":37,"line_end":37,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270153,"byte_end":270156,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270157,"byte_end":270180,"line_start":39,"line_end":39,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270181,"byte_end":270184,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ - on-the-wire byte representation of the value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270185,"byte_end":270236,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270237,"byte_end":270240,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Returns a value deserialized from bytes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270241,"byte_end":270285,"line_start":43,"line_end":43,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270286,"byte_end":270289,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ ## TextMap Format","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270290,"byte_end":270311,"line_start":45,"line_end":45,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270312,"byte_end":270315,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ `TextMapFormat` is a formatter that injects and extracts a value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270316,"byte_end":270384,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/ as text into injectors and extractors that travel in-band across process boundaries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270385,"byte_end":270473,"line_start":48,"line_end":48,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270474,"byte_end":270477,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Encoding is expected to conform to the HTTP Header Field semantics.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270478,"byte_end":270549,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ Values are often encoded as RPC/HTTP request headers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270550,"byte_end":270607,"line_start":51,"line_end":51,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270608,"byte_end":270611,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ The carrier of propagated data on both the client (injector) and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270612,"byte_end":270680,"line_start":53,"line_end":53,"column_start":1,"column_end":69}},{"value":"/ server (extractor) side is usually a http request. Propagation is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270681,"byte_end":270750,"line_start":54,"line_end":54,"column_start":1,"column_end":70}},{"value":"/ usually implemented via library-specific request interceptors, where","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270751,"byte_end":270823,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ the client-side injects values and the server-side extracts them.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270824,"byte_end":270893,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270894,"byte_end":270897,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ `TextMapFormat` MUST expose the APIs that injects values into injectors,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270898,"byte_end":270974,"line_start":58,"line_end":58,"column_start":1,"column_end":77}},{"value":"/ and extracts values from extractors.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":270975,"byte_end":271015,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271016,"byte_end":271019,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ### Fields","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271020,"byte_end":271034,"line_start":61,"line_end":61,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271035,"byte_end":271038,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ The propagation fields defined. If your injector is reused, you should","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271039,"byte_end":271113,"line_start":63,"line_end":63,"column_start":1,"column_end":75}},{"value":"/ delete the fields here before calling `inject`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271114,"byte_end":271165,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271166,"byte_end":271169,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ For example, if the injector is a single-use or immutable request object,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271170,"byte_end":271247,"line_start":66,"line_end":66,"column_start":1,"column_end":78}},{"value":"/ you don't need to clear fields as they couldn't have been set before.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271248,"byte_end":271321,"line_start":67,"line_end":67,"column_start":1,"column_end":74}},{"value":"/ If it is a mutable, retryable object, successive calls should clear","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271322,"byte_end":271393,"line_start":68,"line_end":68,"column_start":1,"column_end":72}},{"value":"/ these fields first.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271394,"byte_end":271417,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271418,"byte_end":271421,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The use cases of this are:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271422,"byte_end":271452,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271453,"byte_end":271456,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - allow pre-allocation of fields, especially in systems like gRPC","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271457,"byte_end":271526,"line_start":73,"line_end":73,"column_start":1,"column_end":70}},{"value":"/ Metadata","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271527,"byte_end":271539,"line_start":74,"line_end":74,"column_start":1,"column_end":13}},{"value":"/ - allow a single-pass over an iterator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271540,"byte_end":271582,"line_start":75,"line_end":75,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271583,"byte_end":271586,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Returns list of fields that will be used by this formatter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271587,"byte_end":271650,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271651,"byte_end":271654,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ ### Inject","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271655,"byte_end":271669,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271670,"byte_end":271673,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ Injects the value downstream. For example, as http headers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271674,"byte_end":271737,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271738,"byte_end":271741,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271742,"byte_end":271765,"line_start":83,"line_end":83,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271766,"byte_end":271769,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ - the `SpanContext` to be injected.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271770,"byte_end":271809,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ - the injector that holds propagation fields. For example, an outgoing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271810,"byte_end":271884,"line_start":86,"line_end":86,"column_start":1,"column_end":75}},{"value":"/ message or http request.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271885,"byte_end":271913,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/ - the `Setter` invoked for each propagation key to add or remove.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271914,"byte_end":271983,"line_start":88,"line_end":88,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271984,"byte_end":271987,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ #### Setter argument","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":271988,"byte_end":272012,"line_start":90,"line_end":90,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272013,"byte_end":272016,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Setter is an argument in `Inject` that puts value into given field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272017,"byte_end":272088,"line_start":92,"line_end":92,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272089,"byte_end":272092,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ `Setter` allows a `TextMapFormat` to set propagated fields into a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272093,"byte_end":272162,"line_start":94,"line_end":94,"column_start":1,"column_end":70}},{"value":"/ injector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272163,"byte_end":272176,"line_start":95,"line_end":95,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272177,"byte_end":272180,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ `Setter` MUST be stateless and allowed to be saved as a constant to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272181,"byte_end":272252,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ avoid runtime allocations. One of the ways to implement it is `Setter`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272253,"byte_end":272327,"line_start":98,"line_end":98,"column_start":1,"column_end":75}},{"value":"/ class with `Put` method as described below.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272328,"byte_end":272375,"line_start":99,"line_end":99,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272376,"byte_end":272379,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ##### Put","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272380,"byte_end":272393,"line_start":101,"line_end":101,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272394,"byte_end":272397,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Replaces a propagated field with the given value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272398,"byte_end":272451,"line_start":103,"line_end":103,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272452,"byte_end":272455,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272456,"byte_end":272479,"line_start":105,"line_end":105,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272480,"byte_end":272483,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ - the injector holds propagation fields. For example, an outgoing message","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272484,"byte_end":272561,"line_start":107,"line_end":107,"column_start":1,"column_end":78}},{"value":"/ or http request.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272562,"byte_end":272582,"line_start":108,"line_end":108,"column_start":1,"column_end":21}},{"value":"/ - the key of the field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272583,"byte_end":272610,"line_start":109,"line_end":109,"column_start":1,"column_end":28}},{"value":"/ - the value of the field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272611,"byte_end":272640,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272641,"byte_end":272644,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ The implementation SHOULD preserve casing (e.g. it should not transform","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272645,"byte_end":272720,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ `Content-Type` to `content-type`) if the used protocol is case insensitive,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272721,"byte_end":272800,"line_start":113,"line_end":113,"column_start":1,"column_end":80}},{"value":"/ otherwise it MUST preserve casing.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272801,"byte_end":272839,"line_start":114,"line_end":114,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272840,"byte_end":272843,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ### Extract","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272844,"byte_end":272859,"line_start":116,"line_end":116,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272860,"byte_end":272863,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ Extracts the value from upstream. For example, as http headers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272864,"byte_end":272931,"line_start":118,"line_end":118,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272932,"byte_end":272935,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ If the value could not be parsed, the underlying implementation will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":272936,"byte_end":273008,"line_start":120,"line_end":120,"column_start":1,"column_end":73}},{"value":"/ decide to return an object representing either an empty value, an invalid","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273009,"byte_end":273086,"line_start":121,"line_end":121,"column_start":1,"column_end":78}},{"value":"/ value, or a valid value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273087,"byte_end":273115,"line_start":122,"line_end":122,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273116,"byte_end":273119,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273120,"byte_end":273143,"line_start":124,"line_end":124,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273144,"byte_end":273147,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ - the extractor holds propagation fields. For example, an outgoing message","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273148,"byte_end":273226,"line_start":126,"line_end":126,"column_start":1,"column_end":79}},{"value":"/ or http request.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273227,"byte_end":273247,"line_start":127,"line_end":127,"column_start":1,"column_end":21}},{"value":"/ - the instance of `Getter` invoked for each propagation key to get.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273248,"byte_end":273319,"line_start":128,"line_end":128,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273320,"byte_end":273323,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Returns the non-null extracted value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273324,"byte_end":273365,"line_start":130,"line_end":130,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273366,"byte_end":273369,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ #### Getter argument","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273370,"byte_end":273394,"line_start":132,"line_end":132,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273395,"byte_end":273398,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ Getter is an argument in `Extract` that get value from given field","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273399,"byte_end":273469,"line_start":134,"line_end":134,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273470,"byte_end":273473,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ `Getter` allows a `TextMapFormat` to read propagated fields from a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273474,"byte_end":273544,"line_start":136,"line_end":136,"column_start":1,"column_end":71}},{"value":"/ extractor.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273545,"byte_end":273559,"line_start":137,"line_end":137,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273560,"byte_end":273563,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ `Getter` MUST be stateless and allowed to be saved as a constant to avoid","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273564,"byte_end":273641,"line_start":139,"line_end":139,"column_start":1,"column_end":78}},{"value":"/ runtime allocations. One of the ways to implement it is `Getter` class","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273642,"byte_end":273716,"line_start":140,"line_end":140,"column_start":1,"column_end":75}},{"value":"/ with `Get` method as described below.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273717,"byte_end":273758,"line_start":141,"line_end":141,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273759,"byte_end":273762,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ##### Get","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273763,"byte_end":273776,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273777,"byte_end":273780,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The Get function MUST return the first value of the given propagation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273781,"byte_end":273854,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"/ key or return `None` if the key doesn't exist.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273855,"byte_end":273905,"line_start":146,"line_end":146,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273906,"byte_end":273909,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"/ Required arguments:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273910,"byte_end":273933,"line_start":148,"line_end":148,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273934,"byte_end":273937,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ - the extractor of propagation fields, such as an HTTP request.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":273938,"byte_end":274005,"line_start":150,"line_end":150,"column_start":1,"column_end":68}},{"value":"/ - the key of the field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274006,"byte_end":274033,"line_start":151,"line_end":151,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274034,"byte_end":274037,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ The `get` function is responsible for handling case sensitivity. If","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274038,"byte_end":274109,"line_start":153,"line_end":153,"column_start":1,"column_end":72}},{"value":"/ the getter is intended to work with an HTTP request object, the getter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274110,"byte_end":274184,"line_start":154,"line_end":154,"column_start":1,"column_end":75}},{"value":"/ MUST be case insensitive. To improve compatibility with other text-based","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274185,"byte_end":274261,"line_start":155,"line_end":155,"column_start":1,"column_end":77}},{"value":"/ protocols, text format implementations MUST ensure to always use the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274262,"byte_end":274334,"line_start":156,"line_end":156,"column_start":1,"column_end":73}},{"value":"/ canonical casing for their attributes. NOTE: Canonical casing for HTTP","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274335,"byte_end":274409,"line_start":157,"line_end":157,"column_start":1,"column_end":75}},{"value":"/ headers is usually title case (e.g. `Content-Type` instead of `content-type`).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274410,"byte_end":274492,"line_start":158,"line_end":158,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274493,"byte_end":274496,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ##### Keys","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274497,"byte_end":274511,"line_start":160,"line_end":160,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274512,"byte_end":274515,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The Keys function returns a vector of the propagation keys.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274516,"byte_end":274579,"line_start":162,"line_end":162,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274580,"byte_end":274583,"line_start":163,"line_end":163,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"text_map_propagator","qualname":"::propagation::text_map_propagator","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","parent":null,"children":[{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1598},{"krate":0,"index":1601},{"krate":0,"index":1604},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1610},{"krate":0,"index":2853},{"krate":0,"index":2857},{"krate":0,"index":1616},{"krate":0,"index":1619}],"decl_id":null,"docs":" # Text Propagator","sig":null,"attributes":[{"value":"/ # Text Propagator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276589,"byte_end":276610,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276611,"byte_end":276614,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ `TextMapPropagator` is a formatter to serialize and deserialize a value into a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276615,"byte_end":276697,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/ text format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276698,"byte_end":276714,"line_start":4,"line_end":4,"column_start":1,"column_end":17}}]},{"kind":"Trait","id":{"krate":0,"index":1610},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276963,"byte_end":276980,"line_start":14,"line_end":14,"column_start":11,"column_end":28},"name":"TextMapPropagator","qualname":"::propagation::text_map_propagator::TextMapPropagator","value":"TextMapPropagator: Debug","parent":null,"children":[{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614},{"krate":0,"index":1615}],"decl_id":null,"docs":" Methods to inject and extract a value as text into injectors and extractors that travel\n in-band across process boundaries.\n","sig":null,"attributes":[{"value":"/ Methods to inject and extract a value as text into injectors and extractors that travel","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276822,"byte_end":276913,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ in-band across process boundaries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276914,"byte_end":276952,"line_start":13,"line_end":13,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277203,"byte_end":277209,"line_start":20,"line_end":20,"column_start":8,"column_end":14},"name":"inject","qualname":"::propagation::text_map_propagator::TextMapPropagator::inject","value":"fn inject(&Self, &mut dyn Injector)","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" Properly encodes the values of the current [`Context`] and injects them into\n the [`Injector`].","sig":null,"attributes":[{"value":"/ Properly encodes the values of the current [`Context`] and injects them into","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276994,"byte_end":277074,"line_start":15,"line_end":15,"column_start":5,"column_end":85}},{"value":"/ the [`Injector`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277079,"byte_end":277100,"line_start":16,"line_end":16,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277105,"byte_end":277108,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277113,"byte_end":277144,"line_start":18,"line_end":18,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Injector","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277149,"byte_end":277195,"line_start":19,"line_end":19,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277519,"byte_end":277533,"line_start":29,"line_end":29,"column_start":8,"column_end":22},"name":"inject_context","qualname":"::propagation::text_map_propagator::TextMapPropagator::inject_context","value":"fn inject_context(&Self, &Context, &mut dyn Injector)","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" Properly encodes the values of the [`Context`] and injects them into the\n [`Injector`].","sig":null,"attributes":[{"value":"/ Properly encodes the values of the [`Context`] and injects them into the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277318,"byte_end":277394,"line_start":24,"line_end":24,"column_start":5,"column_end":81}},{"value":"/ [`Injector`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277399,"byte_end":277416,"line_start":25,"line_end":25,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277421,"byte_end":277424,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277429,"byte_end":277460,"line_start":27,"line_end":27,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Injector","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277465,"byte_end":277511,"line_start":28,"line_end":28,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277890,"byte_end":277897,"line_start":37,"line_end":37,"column_start":8,"column_end":15},"name":"extract","qualname":"::propagation::text_map_propagator::TextMapPropagator::extract","value":"fn extract(&Self, &dyn Extractor) -> Context","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" Retrieves encoded data using the provided [`Extractor`]. If no data for this\n format was retrieved OR if the retrieved data is invalid, then the current\n [`Context`] is returned.","sig":null,"attributes":[{"value":"/ Retrieves encoded data using the provided [`Extractor`]. If no data for this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277590,"byte_end":277670,"line_start":31,"line_end":31,"column_start":5,"column_end":85}},{"value":"/ format was retrieved OR if the retrieved data is invalid, then the current","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277675,"byte_end":277753,"line_start":32,"line_end":32,"column_start":5,"column_end":83}},{"value":"/ [`Context`] is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277758,"byte_end":277786,"line_start":33,"line_end":33,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277791,"byte_end":277794,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277799,"byte_end":277830,"line_start":35,"line_end":35,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Extractor","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":277835,"byte_end":277882,"line_start":36,"line_end":36,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278320,"byte_end":278340,"line_start":47,"line_end":47,"column_start":8,"column_end":28},"name":"extract_with_context","qualname":"::propagation::text_map_propagator::TextMapPropagator::extract_with_context","value":"fn extract_with_context(&Self, &Context, &dyn Extractor) -> Context","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" Retrieves encoded data using the provided [`Extractor`]. If no data for this\n format was retrieved OR if the retrieved data is invalid, then the given\n [`Context`] is returned.","sig":null,"attributes":[{"value":"/ Retrieves encoded data using the provided [`Extractor`]. If no data for this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278022,"byte_end":278102,"line_start":41,"line_end":41,"column_start":5,"column_end":85}},{"value":"/ format was retrieved OR if the retrieved data is invalid, then the given","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278107,"byte_end":278183,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ [`Context`] is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278188,"byte_end":278216,"line_start":43,"line_end":43,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278221,"byte_end":278224,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278229,"byte_end":278260,"line_start":45,"line_end":45,"column_start":5,"column_end":36}},{"value":"/ [`Injector`]: crate::propagation::Extractor","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278265,"byte_end":278312,"line_start":46,"line_end":46,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1615},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278478,"byte_end":278484,"line_start":51,"line_end":51,"column_start":8,"column_end":14},"name":"fields","qualname":"::propagation::text_map_propagator::TextMapPropagator::fields","value":"fn fields(&Self) -> FieldIter","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" Returns iter of fields used by [`TextMapPropagator`]","sig":null,"attributes":[{"value":"/ Returns iter of fields used by [`TextMapPropagator`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278406,"byte_end":278462,"line_start":49,"line_end":49,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278467,"byte_end":278470,"line_start":50,"line_end":50,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278600,"byte_end":278609,"line_start":57,"line_end":57,"column_start":12,"column_end":21},"name":"FieldIter","qualname":"::propagation::text_map_propagator::FieldIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over fields of a [`TextMapPropagator`]","sig":null,"attributes":[{"value":"/ An iterator over fields of a [`TextMapPropagator`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278513,"byte_end":278567,"line_start":54,"line_end":54,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278568,"byte_end":278571,"line_start":55,"line_end":55,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278744,"byte_end":278747,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<FieldIter>::new","value":"fn new(&'a [String]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FieldIter` from a slice of propagator fields\n","sig":null,"attributes":[{"value":"/ Create a new `FieldIter` from a slice of propagator fields","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278670,"byte_end":278732,"line_start":60,"line_end":60,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278892,"byte_end":278896,"line_start":68,"line_end":68,"column_start":8,"column_end":12},"name":"next","qualname":"<FieldIter as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<Self::Item>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1627},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274799,"byte_end":274807,"line_start":171,"line_end":171,"column_start":11,"column_end":19},"name":"Injector","qualname":"::propagation::Injector","value":"Injector","parent":null,"children":[{"krate":0,"index":1628}],"decl_id":null,"docs":" Injector provides an interface for adding fields from an underlying struct like `HashMap`\n","sig":null,"attributes":[{"value":"/ Injector provides an interface for adding fields from an underlying struct like `HashMap`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274695,"byte_end":274788,"line_start":170,"line_end":170,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274869,"byte_end":274872,"line_start":173,"line_end":173,"column_start":8,"column_end":11},"name":"set","qualname":"::propagation::Injector::set","value":"fn set(&mut Self, &str, String)","parent":{"krate":0,"index":1627},"children":[],"decl_id":null,"docs":" Add a key and value to the underlying data.\n","sig":null,"attributes":[{"value":"/ Add a key and value to the underlying data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274814,"byte_end":274861,"line_start":172,"line_end":172,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1629},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275021,"byte_end":275030,"line_start":177,"line_end":177,"column_start":11,"column_end":20},"name":"Extractor","qualname":"::propagation::Extractor","value":"Extractor","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631}],"decl_id":null,"docs":" Extractor provides an interface for removing fields from an underlying struct like `HashMap`\n","sig":null,"attributes":[{"value":"/ Extractor provides an interface for removing fields from an underlying struct like `HashMap`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274914,"byte_end":275010,"line_start":176,"line_end":176,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275097,"byte_end":275100,"line_start":179,"line_end":179,"column_start":8,"column_end":11},"name":"get","qualname":"::propagation::Extractor::get","value":"fn get(&Self, &str) -> Option<&str>","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" Get a value from a key from the underlying data.\n","sig":null,"attributes":[{"value":"/ Get a value from a key from the underlying data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275037,"byte_end":275089,"line_start":178,"line_end":178,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1631},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275199,"byte_end":275203,"line_start":182,"line_end":182,"column_start":8,"column_end":12},"name":"keys","qualname":"::propagation::Extractor::keys","value":"fn keys(&Self) -> Vec<&str>","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":" Collect all the keys from the underlying data.\n","sig":null,"attributes":[{"value":"/ Collect all the keys from the underlying data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275141,"byte_end":275191,"line_start":181,"line_end":181,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1634},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275353,"byte_end":275356,"line_start":187,"line_end":187,"column_start":8,"column_end":11},"name":"set","qualname":"<HashMap<String, String, S> as propagation::Injector>::set","value":"fn set(&mut Self, &str, String)","parent":{"krate":0,"index":1627},"children":[],"decl_id":{"krate":0,"index":1628},"docs":" Set a key and value in the HashMap.\n","sig":null,"attributes":[{"value":"/ Set a key and value in the HashMap.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275306,"byte_end":275345,"line_start":186,"line_end":186,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275583,"byte_end":275586,"line_start":194,"line_end":194,"column_start":8,"column_end":11},"name":"get","qualname":"<HashMap<String, String, S> as propagation::Extractor>::get","value":"fn get(&Self, &str) -> Option<&str>","parent":{"krate":0,"index":1629},"children":[],"decl_id":{"krate":0,"index":1630},"docs":" Get a value for a key from the HashMap.\n","sig":null,"attributes":[{"value":"/ Get a value for a key from the HashMap.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275532,"byte_end":275575,"line_start":193,"line_end":193,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1639},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275742,"byte_end":275746,"line_start":199,"line_end":199,"column_start":8,"column_end":12},"name":"keys","qualname":"<HashMap<String, String, S> as propagation::Extractor>::keys","value":"fn keys(&Self) -> Vec<&str>","parent":{"krate":0,"index":1629},"children":[],"decl_id":{"krate":0,"index":1631},"docs":" Collect all the keys from the HashMap.\n","sig":null,"attributes":[{"value":"/ Collect all the keys from the HashMap.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275692,"byte_end":275734,"line_start":198,"line_end":198,"column_start":5,"column_end":47}}]},{"kind":"Mod","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"trace","qualname":"::trace","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","parent":null,"children":[{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":1658},{"krate":0,"index":1661},{"krate":0,"index":1783},{"krate":0,"index":1863},{"krate":0,"index":1904},{"krate":0,"index":2020},{"krate":0,"index":2100},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2126},{"krate":0,"index":2129},{"krate":0,"index":2132},{"krate":0,"index":2135},{"krate":0,"index":2136},{"krate":0,"index":2139},{"krate":0,"index":2142},{"krate":0,"index":2145},{"krate":0,"index":2146},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2152},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2168},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2181},{"krate":0,"index":3130},{"krate":0,"index":3131},{"krate":0,"index":3136},{"krate":0,"index":3145},{"krate":0,"index":3147},{"krate":0,"index":2183},{"krate":0,"index":2186},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":3170},{"krate":0,"index":3158},{"krate":0,"index":3159},{"krate":0,"index":3168},{"krate":0,"index":2195},{"krate":0,"index":3173},{"krate":0,"index":3178},{"krate":0,"index":3180},{"krate":0,"index":3182},{"krate":0,"index":3183},{"krate":0,"index":2198},{"krate":0,"index":3186},{"krate":0,"index":3190},{"krate":0,"index":3192},{"krate":0,"index":3194},{"krate":0,"index":3195},{"krate":0,"index":2203}],"decl_id":null,"docs":" API for tracing applications and libraries.","sig":null,"attributes":[{"value":"cfg(feature = \"trace\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9497,"byte_end":9522,"line_start":253,"line_end":253,"column_start":1,"column_end":26}},{"value":"/ API for tracing applications and libraries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":278991,"byte_end":279038,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279039,"byte_end":279042,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The `trace` module includes types for tracking the progression of a single","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279043,"byte_end":279121,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ request while it is handled by services that make up an application. A trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279122,"byte_end":279202,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ is a tree of [`Span`]s which are objects that represent the work being done","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279203,"byte_end":279282,"line_start":5,"line_end":5,"column_start":1,"column_end":80}},{"value":"/ by individual services or components involved in a request as it flows","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279283,"byte_end":279357,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ through a system. This module implements the OpenTelemetry [trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279358,"byte_end":279427,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ specification].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279428,"byte_end":279447,"line_start":8,"line_end":8,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279448,"byte_end":279451,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ [trace specification]: https://github.com/open-telemetry/opentelemetry-specification/blob/v1.3.0/specification/trace/api.md","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279452,"byte_end":279579,"line_start":10,"line_end":10,"column_start":1,"column_end":128}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279580,"byte_end":279583,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ## Getting Started","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279584,"byte_end":279606,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279607,"byte_end":279610,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ In application code:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279611,"byte_end":279635,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279636,"byte_end":279639,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279640,"byte_end":279653,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279654,"byte_end":279685,"line_start":17,"line_end":17,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279686,"byte_end":279693,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, sdk::export::trace::stdout, trace::Tracer};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279694,"byte_end":279769,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279770,"byte_end":279773,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279774,"byte_end":279789,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/     // Create a new trace pipeline that prints to stdout","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279790,"byte_end":279850,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/     let tracer = stdout::new_pipeline().install_simple();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279851,"byte_end":279912,"line_start":23,"line_end":23,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279913,"byte_end":279916,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/     tracer.in_span(\"doing_work\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279917,"byte_end":279960,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/         // Traced app logic here...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":279961,"byte_end":280000,"line_start":26,"line_end":26,"column_start":1,"column_end":40}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280001,"byte_end":280012,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280013,"byte_end":280016,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     // Shutdown trace pipeline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280017,"byte_end":280051,"line_start":29,"line_end":29,"column_start":1,"column_end":35}},{"value":"/     global::shutdown_tracer_provider();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280052,"byte_end":280095,"line_start":30,"line_end":30,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280096,"byte_end":280101,"line_start":31,"line_end":31,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280102,"byte_end":280109,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280110,"byte_end":280117,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280118,"byte_end":280121,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ In library code:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280122,"byte_end":280142,"line_start":35,"line_end":35,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280143,"byte_end":280146,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280147,"byte_end":280154,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280155,"byte_end":280186,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280187,"byte_end":280194,"line_start":39,"line_end":39,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, TracerProvider}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280195,"byte_end":280266,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280267,"byte_end":280270,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ fn my_library_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280271,"byte_end":280301,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/     // Use the global tracer provider to get access to the user-specified","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280302,"byte_end":280379,"line_start":43,"line_end":43,"column_start":1,"column_end":78}},{"value":"/     // tracer configuration","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280380,"byte_end":280411,"line_start":44,"line_end":44,"column_start":1,"column_end":32}},{"value":"/     let tracer_provider = global::tracer_provider();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280412,"byte_end":280468,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280469,"byte_end":280472,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     // Get a tracer for this library","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280473,"byte_end":280513,"line_start":47,"line_end":47,"column_start":1,"column_end":41}},{"value":"/     let tracer = tracer_provider.versioned_tracer(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280514,"byte_end":280568,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/         \"my_name\",","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280569,"byte_end":280591,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/         Some(env!(\"CARGO_PKG_VERSION\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280592,"byte_end":280636,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/         None","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280637,"byte_end":280653,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/     );","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280654,"byte_end":280664,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280665,"byte_end":280668,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/     // Create spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280669,"byte_end":280692,"line_start":54,"line_end":54,"column_start":1,"column_end":24}},{"value":"/     let mut span = tracer.start(\"doing_work\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280693,"byte_end":280743,"line_start":55,"line_end":55,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280744,"byte_end":280747,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     // Do work...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280748,"byte_end":280769,"line_start":57,"line_end":57,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280770,"byte_end":280773,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/     // End the span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280774,"byte_end":280797,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/     span.end();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280798,"byte_end":280817,"line_start":60,"line_end":60,"column_start":1,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280818,"byte_end":280823,"line_start":61,"line_end":61,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280824,"byte_end":280831,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280832,"byte_end":280839,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280840,"byte_end":280843,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280844,"byte_end":280859,"line_start":65,"line_end":65,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280860,"byte_end":280863,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The tracing API consists of a three main traits:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280864,"byte_end":280916,"line_start":67,"line_end":67,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280917,"byte_end":280920,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ * [`TracerProvider`]s are the entry point of the API. They provide access to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":280921,"byte_end":281001,"line_start":69,"line_end":69,"column_start":1,"column_end":81}},{"value":"/   `Tracer`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281002,"byte_end":281018,"line_start":70,"line_end":70,"column_start":1,"column_end":17}},{"value":"/ * [`Tracer`]s are types responsible for creating `Span`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281019,"byte_end":281080,"line_start":71,"line_end":71,"column_start":1,"column_end":62}},{"value":"/ * [`Span`]s provide the API to trace an operation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281081,"byte_end":281135,"line_start":72,"line_end":72,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281136,"byte_end":281139,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ## Working with Async Runtimes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281140,"byte_end":281174,"line_start":74,"line_end":74,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281175,"byte_end":281178,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Exporting spans often involves sending data over a network or performing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281179,"byte_end":281255,"line_start":76,"line_end":76,"column_start":1,"column_end":77}},{"value":"/ other I/O tasks. OpenTelemetry allows you to schedule these tasks using","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281256,"byte_end":281331,"line_start":77,"line_end":77,"column_start":1,"column_end":76}},{"value":"/ whichever runtime you area already using such as [Tokio] or [async-std].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281332,"byte_end":281408,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/ When using an async runtime it's best to use the [`BatchSpanProcessor`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281409,"byte_end":281484,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ where the spans will be sent in batches as opposed to being sent once ended,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281485,"byte_end":281565,"line_start":80,"line_end":80,"column_start":1,"column_end":81}},{"value":"/ which often ends up being more efficient.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281566,"byte_end":281611,"line_start":81,"line_end":81,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281612,"byte_end":281615,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ [`BatchSpanProcessor`]: crate::sdk::trace::BatchSpanProcessor","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281616,"byte_end":281681,"line_start":83,"line_end":83,"column_start":1,"column_end":66}},{"value":"/ [Tokio]: https://tokio.rs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281682,"byte_end":281711,"line_start":84,"line_end":84,"column_start":1,"column_end":30}},{"value":"/ [async-std]: https://async.rs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281712,"byte_end":281745,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281746,"byte_end":281749,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ ## Managing Active Spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281750,"byte_end":281778,"line_start":87,"line_end":87,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281779,"byte_end":281782,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ Spans can be marked as \"active\" for a given [`Context`], and all newly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281783,"byte_end":281857,"line_start":89,"line_end":89,"column_start":1,"column_end":75}},{"value":"/ created spans will automatically be children of the currently active span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281858,"byte_end":281936,"line_start":90,"line_end":90,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281937,"byte_end":281940,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ The active span for a given thread can be managed via [`get_active_span`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":281941,"byte_end":282018,"line_start":92,"line_end":92,"column_start":1,"column_end":78}},{"value":"/ and [`mark_span_as_active`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282019,"byte_end":282051,"line_start":93,"line_end":93,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282052,"byte_end":282055,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282056,"byte_end":282087,"line_start":95,"line_end":95,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282088,"byte_end":282091,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282092,"byte_end":282099,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282100,"byte_end":282131,"line_start":98,"line_end":98,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282132,"byte_end":282139,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{self, Span, StatusCode, Tracer, TracerProvider}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282140,"byte_end":282229,"line_start":100,"line_end":100,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282230,"byte_end":282233,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ fn may_error(rand: f32) {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282234,"byte_end":282263,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/     if rand < 0.5 {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282264,"byte_end":282287,"line_start":103,"line_end":103,"column_start":1,"column_end":24}},{"value":"/         // Get the currently active span to record additional attributes,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282288,"byte_end":282365,"line_start":104,"line_end":104,"column_start":1,"column_end":78}},{"value":"/         // status, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282366,"byte_end":282393,"line_start":105,"line_end":105,"column_start":1,"column_end":28}},{"value":"/         trace::get_active_span(|span| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282394,"byte_end":282437,"line_start":106,"line_end":106,"column_start":1,"column_end":44}},{"value":"/             span.set_status(StatusCode::Error, \"value too small\".into());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282438,"byte_end":282515,"line_start":107,"line_end":107,"column_start":1,"column_end":78}},{"value":"/         });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282516,"byte_end":282531,"line_start":108,"line_end":108,"column_start":1,"column_end":16}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282532,"byte_end":282541,"line_start":109,"line_end":109,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282542,"byte_end":282547,"line_start":110,"line_end":110,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282548,"byte_end":282551,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ // Get a tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282552,"byte_end":282571,"line_start":112,"line_end":112,"column_start":1,"column_end":20}},{"value":"/ let tracer = global::tracer(\"my_tracer\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282572,"byte_end":282617,"line_start":113,"line_end":113,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282618,"byte_end":282621,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ // Create a span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282622,"byte_end":282642,"line_start":115,"line_end":115,"column_start":1,"column_end":21}},{"value":"/ let span = tracer.start(\"parent_span\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282643,"byte_end":282686,"line_start":116,"line_end":116,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282687,"byte_end":282690,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ // Mark the span as active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282691,"byte_end":282721,"line_start":118,"line_end":118,"column_start":1,"column_end":31}},{"value":"/ let active = trace::mark_span_as_active(span);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282722,"byte_end":282772,"line_start":119,"line_end":119,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282773,"byte_end":282776,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ // Any span created here will be a child of `parent_span`...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282777,"byte_end":282841,"line_start":121,"line_end":121,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282842,"byte_end":282845,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ // Drop the guard and the span will no longer be active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282846,"byte_end":282905,"line_start":123,"line_end":123,"column_start":1,"column_end":60}},{"value":"/ drop(active)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282906,"byte_end":282922,"line_start":124,"line_end":124,"column_start":1,"column_end":17}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282923,"byte_end":282930,"line_start":125,"line_end":125,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282931,"byte_end":282938,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282939,"byte_end":282942,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Additionally [`Tracer::with_span`] and [`Tracer::in_span`] can be used as shorthand to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":282943,"byte_end":283033,"line_start":128,"line_end":128,"column_start":1,"column_end":91}},{"value":"/ simplify managing the parent context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283034,"byte_end":283075,"line_start":129,"line_end":129,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283076,"byte_end":283079,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283080,"byte_end":283087,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283088,"byte_end":283119,"line_start":132,"line_end":132,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283120,"byte_end":283127,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::Tracer};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283128,"byte_end":283175,"line_start":134,"line_end":134,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283176,"byte_end":283179,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ // Get a tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283180,"byte_end":283199,"line_start":136,"line_end":136,"column_start":1,"column_end":20}},{"value":"/ let tracer = global::tracer(\"my_tracer\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283200,"byte_end":283245,"line_start":137,"line_end":137,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283246,"byte_end":283249,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ // Use `in_span` to create a new span and mark it as the parent, dropping it","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283250,"byte_end":283330,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ // at the end of the block.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283331,"byte_end":283362,"line_start":140,"line_end":140,"column_start":1,"column_end":32}},{"value":"/ tracer.in_span(\"parent_span\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283363,"byte_end":283403,"line_start":141,"line_end":141,"column_start":1,"column_end":41}},{"value":"/     // spans created here will be children of `parent_span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283404,"byte_end":283467,"line_start":142,"line_end":142,"column_start":1,"column_end":64}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283468,"byte_end":283475,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283476,"byte_end":283479,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ // Use `with_span` to mark a span as active for a given period.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283480,"byte_end":283547,"line_start":145,"line_end":145,"column_start":1,"column_end":68}},{"value":"/ let span = tracer.start(\"parent_span\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283548,"byte_end":283591,"line_start":146,"line_end":146,"column_start":1,"column_end":44}},{"value":"/ tracer.with_span(span, |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283592,"byte_end":283625,"line_start":147,"line_end":147,"column_start":1,"column_end":34}},{"value":"/     // spans created here will be children of `parent_span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283626,"byte_end":283689,"line_start":148,"line_end":148,"column_start":1,"column_end":64}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283690,"byte_end":283697,"line_start":149,"line_end":149,"column_start":1,"column_end":8}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283698,"byte_end":283705,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283706,"byte_end":283713,"line_start":151,"line_end":151,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283714,"byte_end":283717,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ #### Async active spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283718,"byte_end":283745,"line_start":153,"line_end":153,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283746,"byte_end":283749,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Async spans can be propagated with [`TraceContextExt`] and [`FutureExt`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283750,"byte_end":283827,"line_start":155,"line_end":155,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283828,"byte_end":283831,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283832,"byte_end":283839,"line_start":157,"line_end":157,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"trace\")]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283840,"byte_end":283871,"line_start":158,"line_end":158,"column_start":1,"column_end":32}},{"value":"/ # {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283872,"byte_end":283879,"line_start":159,"line_end":159,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{Context, global, trace::{FutureExt, TraceContextExt, Tracer}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283880,"byte_end":283966,"line_start":160,"line_end":160,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283967,"byte_end":283970,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ async fn some_work() { }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":283971,"byte_end":283999,"line_start":162,"line_end":162,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284000,"byte_end":284003,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ // Get a tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284004,"byte_end":284023,"line_start":164,"line_end":164,"column_start":1,"column_end":20}},{"value":"/ let tracer = global::tracer(\"my_tracer\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284024,"byte_end":284069,"line_start":165,"line_end":165,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284070,"byte_end":284073,"line_start":166,"line_end":166,"column_start":1,"column_end":4}},{"value":"/ // Start a span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284074,"byte_end":284093,"line_start":167,"line_end":167,"column_start":1,"column_end":20}},{"value":"/ let span = tracer.start(\"my_span\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284094,"byte_end":284133,"line_start":168,"line_end":168,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284134,"byte_end":284137,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ // Perform some async work with this span as the currently active parent.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284138,"byte_end":284215,"line_start":170,"line_end":170,"column_start":1,"column_end":78}},{"value":"/ some_work().with_context(Context::current_with_span(span));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284216,"byte_end":284279,"line_start":171,"line_end":171,"column_start":1,"column_end":64}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284280,"byte_end":284287,"line_start":172,"line_end":172,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284288,"byte_end":284295,"line_start":173,"line_end":173,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":289549,"byte_end":289556,"line_start":26,"line_end":26,"column_start":12,"column_end":19},"name":"SpanRef","qualname":"::trace::context::SpanRef","value":"","parent":null,"children":[],"decl_id":null,"docs":" A reference to the currently active span in this context.\n","sig":null,"attributes":[{"value":"/ A reference to the currently active span in this context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":289459,"byte_end":289520,"line_start":24,"line_end":24,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290202,"byte_end":290211,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"add_event","qualname":"<SpanRef>::add_event","value":"fn add_event<T>(&Self, T, Vec<KeyValue>) where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" An API to record events in the context of a given `Span`.\n","sig":null,"attributes":[{"value":"/ An API to record events in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290129,"byte_end":290190,"line_start":48,"line_end":48,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1719},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290469,"byte_end":290485,"line_start":57,"line_end":57,"column_start":12,"column_end":28},"name":"record_exception","qualname":"<SpanRef>::record_exception","value":"fn record_exception(&Self, &dyn Error)","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to record an exception/error as an `Event`\n","sig":null,"attributes":[{"value":"/ Convenience method to record an exception/error as an `Event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290392,"byte_end":290457,"line_start":56,"line_end":56,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290687,"byte_end":290719,"line_start":62,"line_end":62,"column_start":12,"column_end":44},"name":"record_exception_with_stacktrace","qualname":"<SpanRef>::record_exception_with_stacktrace","value":"fn record_exception_with_stacktrace<T>(&Self, &dyn Error, T) where\nT: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Convenience method to record a exception/error as an `Event` with custom stacktrace\n","sig":null,"attributes":[{"value":"/ Convenience method to record a exception/error as an `Event` with custom stacktrace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290588,"byte_end":290675,"line_start":61,"line_end":61,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291010,"byte_end":291034,"line_start":70,"line_end":70,"column_start":12,"column_end":36},"name":"add_event_with_timestamp","qualname":"<SpanRef>::add_event_with_timestamp","value":"fn add_event_with_timestamp<T>(&Self, T, std::time::SystemTime,\nVec<crate::KeyValue>) where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" An API to record events at a specific time in the context of a given `Span`.\n","sig":null,"attributes":[{"value":"/ An API to record events at a specific time in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290918,"byte_end":290998,"line_start":69,"line_end":69,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291409,"byte_end":291421,"line_start":84,"line_end":84,"column_start":12,"column_end":24},"name":"span_context","qualname":"<SpanRef>::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":null,"children":[],"decl_id":null,"docs":" Returns the `SpanContext` for the given `Span`.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291346,"byte_end":291397,"line_start":83,"line_end":83,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291673,"byte_end":291685,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"is_recording","qualname":"<SpanRef>::is_recording","value":"fn is_recording(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.\n","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291487,"byte_end":291576,"line_start":88,"line_end":88,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291581,"byte_end":291661,"line_start":89,"line_end":89,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292118,"byte_end":292131,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"set_attribute","qualname":"<SpanRef>::set_attribute","value":"fn set_attribute(&Self, crate::KeyValue)","parent":null,"children":[],"decl_id":null,"docs":" An API to set a single `Attribute` where the attribute properties are passed\n as arguments. To avoid extra allocations some implementations may offer a separate API for\n each of the possible value types.\n","sig":null,"attributes":[{"value":"/ An API to set a single `Attribute` where the attribute properties are passed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291885,"byte_end":291965,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ as arguments. To avoid extra allocations some implementations may offer a separate API for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":291970,"byte_end":292064,"line_start":99,"line_end":99,"column_start":5,"column_end":99}},{"value":"/ each of the possible value types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292069,"byte_end":292106,"line_start":100,"line_end":100,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1733},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292441,"byte_end":292451,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"set_status","qualname":"<SpanRef>::set_status","value":"fn set_status(&Self, super::StatusCode, String)","parent":null,"children":[],"decl_id":null,"docs":" Sets the status of the `Span`. If used, this will override the default `Span`\n status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`\n","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. If used, this will override the default `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292253,"byte_end":292334,"line_start":105,"line_end":105,"column_start":5,"column_end":86}},{"value":"/ status, which is `Unset`. `message` MUST be ignored when the status is `OK` or `Unset`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292339,"byte_end":292429,"line_start":106,"line_end":106,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292732,"byte_end":292743,"line_start":113,"line_end":113,"column_start":12,"column_end":23},"name":"update_name","qualname":"<SpanRef>::update_name","value":"fn update_name<T>(&Self, String) where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Updates the `Span`'s name. After this update, any sampling behavior based on the\n name will depend on the implementation.\n","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name. After this update, any sampling behavior based on the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292588,"byte_end":292672,"line_start":111,"line_end":111,"column_start":5,"column_end":89}},{"value":"/ name will depend on the implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292677,"byte_end":292720,"line_start":112,"line_end":112,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292941,"byte_end":292944,"line_start":121,"line_end":121,"column_start":12,"column_end":15},"name":"end","qualname":"<SpanRef>::end","value":"fn end(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Finishes the `Span`.\n","sig":null,"attributes":[{"value":"/ Finishes the `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":292905,"byte_end":292929,"line_start":120,"line_end":120,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293074,"byte_end":293092,"line_start":126,"line_end":126,"column_start":12,"column_end":30},"name":"end_with_timestamp","qualname":"<SpanRef>::end_with_timestamp","value":"fn end_with_timestamp(&Self, std::time::SystemTime)","parent":null,"children":[],"decl_id":null,"docs":" Finishes the `Span` with given timestamp\n","sig":null,"attributes":[{"value":"/ Finishes the `Span` with given timestamp","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293018,"byte_end":293062,"line_start":125,"line_end":125,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293297,"byte_end":293312,"line_start":132,"line_end":132,"column_start":11,"column_end":26},"name":"TraceContextExt","qualname":"::trace::context::TraceContextExt","value":"TraceContextExt","parent":null,"children":[{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1748}],"decl_id":null,"docs":" Methods for storing and retrieving trace data in a context.\n","sig":null,"attributes":[{"value":"/ Methods for storing and retrieving trace data in a context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293223,"byte_end":293286,"line_start":131,"line_end":131,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293446,"byte_end":293463,"line_start":136,"line_end":136,"column_start":8,"column_end":25},"name":"current_with_span","qualname":"::trace::context::TraceContextExt::current_with_span","value":"fn current_with_span<T>(T) -> Self where T: crate::trace::Span + Send + Sync +\n'static","parent":{"krate":0,"index":1741},"children":[],"decl_id":null,"docs":" Returns a clone of the current context with the included span.","sig":null,"attributes":[{"value":"/ Returns a clone of the current context with the included span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293319,"byte_end":293385,"line_start":133,"line_end":133,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293390,"byte_end":293393,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293398,"byte_end":293438,"line_start":135,"line_end":135,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1744},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293654,"byte_end":293663,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"with_span","qualname":"::trace::context::TraceContextExt::with_span","value":"fn with_span<T>(&Self, T) -> Self where T: crate::trace::Span + Send + Sync +\n'static","parent":{"krate":0,"index":1741},"children":[],"decl_id":null,"docs":" Returns a clone of this context with the included span.","sig":null,"attributes":[{"value":"/ Returns a clone of this context with the included span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293534,"byte_end":293593,"line_start":138,"line_end":138,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293598,"byte_end":293601,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293606,"byte_end":293646,"line_start":140,"line_end":140,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294515,"byte_end":294519,"line_start":164,"line_end":164,"column_start":8,"column_end":12},"name":"span","qualname":"::trace::context::TraceContextExt::span","value":"fn span(&Self) -> SpanRef","parent":{"krate":0,"index":1741},"children":[],"decl_id":null,"docs":" Returns a reference to this context's span, or the default no-op span if\n none has been set.","sig":null,"attributes":[{"value":"/ Returns a reference to this context's span, or the default no-op span if","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293741,"byte_end":293817,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ none has been set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293822,"byte_end":293844,"line_start":144,"line_end":144,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293849,"byte_end":293852,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293857,"byte_end":293871,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293876,"byte_end":293879,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293884,"byte_end":293891,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293896,"byte_end":293920,"line_start":149,"line_end":149,"column_start":5,"column_end":29}},{"value":"/     sdk,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293925,"byte_end":293937,"line_start":150,"line_end":150,"column_start":5,"column_end":17}},{"value":"/     trace::{SpanContext, TraceContextExt, Tracer, TracerProvider},","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":293942,"byte_end":294012,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/     Context,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294017,"byte_end":294033,"line_start":152,"line_end":152,"column_start":5,"column_end":21}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294038,"byte_end":294044,"line_start":153,"line_end":153,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294049,"byte_end":294052,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ // returns a reference to an empty span by default","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294057,"byte_end":294111,"line_start":155,"line_end":155,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(Context::current().span().span_context(), &SpanContext::empty_context());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294116,"byte_end":294204,"line_start":156,"line_end":156,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294209,"byte_end":294212,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ let provider = sdk::trace::TracerProvider::default();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294217,"byte_end":294274,"line_start":158,"line_end":158,"column_start":5,"column_end":62}},{"value":"/ provider.tracer(\"my-component\").in_span(\"my-span\", |cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294279,"byte_end":294340,"line_start":159,"line_end":159,"column_start":5,"column_end":66}},{"value":"/     // Returns a reference to the current span if set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294345,"byte_end":294402,"line_start":160,"line_end":160,"column_start":5,"column_end":62}},{"value":"/     assert_ne!(cx.span().span_context(), &SpanContext::empty_context());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294407,"byte_end":294483,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294488,"byte_end":294495,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294500,"byte_end":294507,"line_start":163,"line_end":163,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1747},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294660,"byte_end":294675,"line_start":169,"line_end":169,"column_start":8,"column_end":23},"name":"has_active_span","qualname":"::trace::context::TraceContextExt::has_active_span","value":"fn has_active_span(&Self) -> bool","parent":{"krate":0,"index":1741},"children":[],"decl_id":null,"docs":" Used to see if a span has been marked as active","sig":null,"attributes":[{"value":"/ Used to see if a span has been marked as active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294548,"byte_end":294599,"line_start":166,"line_end":166,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294604,"byte_end":294607,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ This is useful for building tracers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294612,"byte_end":294652,"line_start":168,"line_end":168,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294828,"byte_end":294852,"line_start":174,"line_end":174,"column_start":8,"column_end":32},"name":"with_remote_span_context","qualname":"::trace::context::TraceContextExt::with_remote_span_context","value":"fn with_remote_span_context(&Self, crate::trace::SpanContext) -> Self","parent":{"krate":0,"index":1741},"children":[],"decl_id":null,"docs":" Returns a copy of this context with the span context included.","sig":null,"attributes":[{"value":"/ Returns a copy of this context with the span context included.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294697,"byte_end":294763,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294768,"byte_end":294771,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This is useful for building propagators.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294776,"byte_end":294820,"line_start":173,"line_end":173,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1750},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294955,"byte_end":294972,"line_start":178,"line_end":178,"column_start":8,"column_end":25},"name":"current_with_span","qualname":"<Context as trace::context::TraceContextExt>::current_with_span","value":"fn current_with_span<T>(T) -> Self where T: crate::trace::Span + Send + Sync +\n'static","parent":{"krate":0,"index":1741},"children":[],"decl_id":{"krate":0,"index":1742},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":295241,"byte_end":295250,"line_start":185,"line_end":185,"column_start":8,"column_end":17},"name":"with_span","qualname":"<Context as trace::context::TraceContextExt>::with_span","value":"fn with_span<T>(&Self, T) -> Self where T: crate::trace::Span + Send + Sync +\n'static","parent":{"krate":0,"index":1741},"children":[],"decl_id":{"krate":0,"index":1744},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":295514,"byte_end":295518,"line_start":192,"line_end":192,"column_start":8,"column_end":12},"name":"span","qualname":"<Context as trace::context::TraceContextExt>::span","value":"fn span(&Self) -> SpanRef","parent":{"krate":0,"index":1741},"children":[],"decl_id":{"krate":0,"index":1746},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":295704,"byte_end":295719,"line_start":200,"line_end":200,"column_start":8,"column_end":23},"name":"has_active_span","qualname":"<Context as trace::context::TraceContextExt>::has_active_span","value":"fn has_active_span(&Self) -> bool","parent":{"krate":0,"index":1741},"children":[],"decl_id":{"krate":0,"index":1747},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":295800,"byte_end":295824,"line_start":204,"line_end":204,"column_start":8,"column_end":32},"name":"with_remote_span_context","qualname":"<Context as trace::context::TraceContextExt>::with_remote_span_context","value":"fn with_remote_span_context(&Self, crate::trace::SpanContext) -> Self","parent":{"krate":0,"index":1741},"children":[],"decl_id":{"krate":0,"index":1748},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1757},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297286,"byte_end":297305,"line_start":243,"line_end":243,"column_start":8,"column_end":27},"name":"mark_span_as_active","qualname":"::trace::context::mark_span_as_active","value":"fn mark_span_as_active<T>(T) -> ContextGuard where T: crate::trace::Span +\nSend + Sync + 'static","parent":null,"children":[],"decl_id":null,"docs":" Mark a given `Span` as active.","sig":null,"attributes":[{"value":"/ Mark a given `Span` as active.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":295997,"byte_end":296031,"line_start":212,"line_end":212,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296032,"byte_end":296035,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` MUST provide a way to update its active `Span`, and MAY provide convenience","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296036,"byte_end":296128,"line_start":214,"line_end":214,"column_start":1,"column_end":93}},{"value":"/ methods to manage a `Span`'s lifetime and the scope in which a `Span` is active. When an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296129,"byte_end":296221,"line_start":215,"line_end":215,"column_start":1,"column_end":93}},{"value":"/ active `Span` is made inactive, the previously-active `Span` SHOULD be made active. A `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296222,"byte_end":296318,"line_start":216,"line_end":216,"column_start":1,"column_end":97}},{"value":"/ maybe finished (i.e. have a non-null end time) but still be active. A `Span` may be active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296319,"byte_end":296413,"line_start":217,"line_end":217,"column_start":1,"column_end":95}},{"value":"/ on one thread after it has been made inactive on another.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296414,"byte_end":296475,"line_start":218,"line_end":218,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296476,"byte_end":296479,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296480,"byte_end":296494,"line_start":220,"line_end":220,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296495,"byte_end":296498,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296499,"byte_end":296506,"line_start":222,"line_end":222,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer}, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296507,"byte_end":296572,"line_start":223,"line_end":223,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::trace::{get_active_span, mark_span_as_active};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296573,"byte_end":296642,"line_start":224,"line_end":224,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296643,"byte_end":296646,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ fn my_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296647,"byte_end":296669,"line_start":226,"line_end":226,"column_start":1,"column_end":23}},{"value":"/     let tracer = global::tracer(\"my-component-a\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296670,"byte_end":296724,"line_start":227,"line_end":227,"column_start":1,"column_end":55}},{"value":"/     // start an active span in one function","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296725,"byte_end":296772,"line_start":228,"line_end":228,"column_start":1,"column_end":48}},{"value":"/     let span = tracer.start(\"span-name\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296773,"byte_end":296818,"line_start":229,"line_end":229,"column_start":1,"column_end":46}},{"value":"/     let _guard = mark_span_as_active(span);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296819,"byte_end":296866,"line_start":230,"line_end":230,"column_start":1,"column_end":48}},{"value":"/     // anything happening in functions we call can still access the active span...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296867,"byte_end":296953,"line_start":231,"line_end":231,"column_start":1,"column_end":87}},{"value":"/     my_other_function();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296954,"byte_end":296982,"line_start":232,"line_end":232,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296983,"byte_end":296988,"line_start":233,"line_end":233,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296989,"byte_end":296992,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ fn my_other_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":296993,"byte_end":297021,"line_start":235,"line_end":235,"column_start":1,"column_end":29}},{"value":"/     // call methods on the current span from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297022,"byte_end":297070,"line_start":236,"line_end":236,"column_start":1,"column_end":49}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297071,"byte_end":297103,"line_start":237,"line_end":237,"column_start":1,"column_end":33}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297104,"byte_end":297195,"line_start":238,"line_end":238,"column_start":1,"column_end":92}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297196,"byte_end":297207,"line_start":239,"line_end":239,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297208,"byte_end":297213,"line_start":240,"line_end":240,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297214,"byte_end":297221,"line_start":241,"line_end":241,"column_start":1,"column_end":8}},{"value":"must_use = \"Dropping the guard detaches the context.\"","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297222,"byte_end":297278,"line_start":242,"line_end":242,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":1759},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298184,"byte_end":298199,"line_start":271,"line_end":271,"column_start":8,"column_end":23},"name":"get_active_span","qualname":"::trace::context::get_active_span","value":"fn get_active_span<F, T>(F) -> T where F: for<'_> FnOnce(SpanRef) -> T","parent":null,"children":[],"decl_id":null,"docs":" Executes a closure with a reference to this thread's current span.","sig":null,"attributes":[{"value":"/ Executes a closure with a reference to this thread's current span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297446,"byte_end":297516,"line_start":248,"line_end":248,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297517,"byte_end":297520,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297521,"byte_end":297535,"line_start":250,"line_end":250,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297536,"byte_end":297539,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297540,"byte_end":297547,"line_start":252,"line_end":252,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer}, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297548,"byte_end":297613,"line_start":253,"line_end":253,"column_start":1,"column_end":66}},{"value":"/ use opentelemetry::trace::get_active_span;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297614,"byte_end":297660,"line_start":254,"line_end":254,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297661,"byte_end":297664,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ fn my_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297665,"byte_end":297687,"line_start":256,"line_end":256,"column_start":1,"column_end":23}},{"value":"/     // start an active span in one function","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297688,"byte_end":297735,"line_start":257,"line_end":257,"column_start":1,"column_end":48}},{"value":"/     global::tracer(\"my-component\").in_span(\"span-name\", |_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297736,"byte_end":297803,"line_start":258,"line_end":258,"column_start":1,"column_end":68}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297804,"byte_end":297894,"line_start":259,"line_end":259,"column_start":1,"column_end":91}},{"value":"/         my_other_function();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297895,"byte_end":297927,"line_start":260,"line_end":260,"column_start":1,"column_end":33}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297928,"byte_end":297938,"line_start":261,"line_end":261,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297939,"byte_end":297944,"line_start":262,"line_end":262,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297945,"byte_end":297948,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ fn my_other_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297949,"byte_end":297977,"line_start":264,"line_end":264,"column_start":1,"column_end":29}},{"value":"/     // call methods on the current span from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":297978,"byte_end":298026,"line_start":265,"line_end":265,"column_start":1,"column_end":49}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298027,"byte_end":298059,"line_start":266,"line_end":266,"column_start":1,"column_end":33}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298060,"byte_end":298151,"line_start":267,"line_end":267,"column_start":1,"column_end":92}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298152,"byte_end":298162,"line_start":268,"line_end":268,"column_start":1,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298163,"byte_end":298168,"line_start":269,"line_end":269,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298169,"byte_end":298176,"line_start":270,"line_end":270,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2928},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298406,"byte_end":298417,"line_start":281,"line_end":281,"column_start":12,"column_end":23},"name":"WithContext","qualname":"::trace::context::WithContext","value":"WithContext {  }","parent":null,"children":[{"krate":0,"index":2931},{"krate":0,"index":2930}],"decl_id":null,"docs":" A future, stream, or sink that has an associated context.\n","sig":null,"attributes":[{"value":"pin(__private())","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298356,"byte_end":298370,"line_start":279,"line_end":279,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":2909},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298406,"byte_end":298417,"line_start":281,"line_end":281,"column_start":12,"column_end":23},"name":"__WithContext","qualname":"::trace::context::_::__WithContext","value":"__WithContext {  }","parent":null,"children":[{"krate":0,"index":2912},{"krate":0,"index":2913}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298356,"byte_end":298370,"line_start":279,"line_end":279,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298615,"byte_end":298619,"line_start":292,"line_end":292,"column_start":8,"column_end":12},"name":"poll","qualname":"<WithContext<T> as futures_util::Future>::poll","value":"fn poll(Pin<&mut Self>, &mut TaskContext) -> Poll<Self::Output>","parent":{"krate":2,"index":13541},"children":[],"decl_id":{"krate":2,"index":13543},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1771},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298904,"byte_end":298913,"line_start":303,"line_end":303,"column_start":8,"column_end":17},"name":"poll_next","qualname":"<WithContext<T> as futures_util::Stream>::poll_next","value":"fn poll_next(Pin<&mut Self>, &mut TaskContext) -> Poll<Option<Self::Item>>","parent":{"krate":30,"index":96},"children":[],"decl_id":{"krate":30,"index":98},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299241,"byte_end":299251,"line_start":316,"line_end":316,"column_start":8,"column_end":18},"name":"poll_ready","qualname":"<WithContext<T> as futures_util::Sink>::poll_ready","value":"fn poll_ready(Pin<&mut Self>, &mut TaskContext)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":34,"index":17},"children":[],"decl_id":{"krate":34,"index":20},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299507,"byte_end":299517,"line_start":325,"line_end":325,"column_start":8,"column_end":18},"name":"start_send","qualname":"<WithContext<T> as futures_util::Sink>::start_send","value":"fn start_send(Pin<&mut Self>, I) -> Result<(), Self::Error>","parent":{"krate":34,"index":17},"children":[],"decl_id":{"krate":34,"index":21},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299719,"byte_end":299729,"line_start":331,"line_end":331,"column_start":8,"column_end":18},"name":"poll_flush","qualname":"<WithContext<T> as futures_util::Sink>::poll_flush","value":"fn poll_flush(Pin<&mut Self>, &mut TaskContext)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":34,"index":17},"children":[],"decl_id":{"krate":34,"index":22},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299985,"byte_end":299995,"line_start":340,"line_end":340,"column_start":8,"column_end":18},"name":"poll_close","qualname":"<WithContext<T> as futures_util::Sink>::poll_close","value":"fn poll_close(Pin<&mut Self>, &mut TaskContext)\n-> Poll<Result<(), Self::Error>>","parent":{"krate":34,"index":17},"children":[],"decl_id":{"krate":34,"index":23},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1780},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300339,"byte_end":300348,"line_start":351,"line_end":351,"column_start":11,"column_end":20},"name":"FutureExt","qualname":"::trace::context::FutureExt","value":"FutureExt: Sized","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1782}],"decl_id":null,"docs":" Extension trait allowing futures, streams, and sinks to be traced with a span.\n","sig":null,"attributes":[{"value":"/ Extension trait allowing futures, streams, and sinks to be traced with a span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300246,"byte_end":300328,"line_start":350,"line_end":350,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300654,"byte_end":300666,"line_start":359,"line_end":359,"column_start":8,"column_end":20},"name":"with_context","qualname":"::trace::context::FutureExt::with_context","value":"fn with_context(Self, Context) -> WithContext<Self>","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" Attaches the provided [`Context`] to this type, returning a `WithContext`\n wrapper.","sig":null,"attributes":[{"value":"/ Attaches the provided [`Context`] to this type, returning a `WithContext`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300362,"byte_end":300439,"line_start":352,"line_end":352,"column_start":5,"column_end":82}},{"value":"/ wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300444,"byte_end":300456,"line_start":353,"line_end":353,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300461,"byte_end":300464,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ When the wrapped type is a future, stream, or sink, the attached context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300469,"byte_end":300545,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/ will be set as current while it is being polled.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300550,"byte_end":300602,"line_start":356,"line_end":356,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300607,"byte_end":300610,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300615,"byte_end":300646,"line_start":358,"line_end":358,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1782},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":301098,"byte_end":301118,"line_start":373,"line_end":373,"column_start":8,"column_end":28},"name":"with_current_context","qualname":"::trace::context::FutureExt::with_current_context","value":"fn with_current_context(Self) -> WithContext<Self>","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" Attaches the current [`Context`] to this type, returning a `WithContext`\n wrapper.","sig":null,"attributes":[{"value":"/ Attaches the current [`Context`] to this type, returning a `WithContext`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300803,"byte_end":300879,"line_start":366,"line_end":366,"column_start":5,"column_end":81}},{"value":"/ wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300884,"byte_end":300896,"line_start":367,"line_end":367,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300901,"byte_end":300904,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ When the wrapped type is a future, stream, or sink, the attached context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300909,"byte_end":300985,"line_start":369,"line_end":369,"column_start":5,"column_end":81}},{"value":"/ will be set as the default while it is being polled.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300990,"byte_end":301046,"line_start":370,"line_end":370,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":301051,"byte_end":301054,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":301059,"byte_end":301090,"line_start":372,"line_end":372,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":1783},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"noop","qualname":"::trace::noop","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","parent":null,"children":[{"krate":0,"index":1784},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1792},{"krate":0,"index":1795},{"krate":0,"index":1798},{"krate":0,"index":1801},{"krate":0,"index":1802},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1820},{"krate":0,"index":1823},{"krate":0,"index":1826},{"krate":0,"index":2932},{"krate":0,"index":2934},{"krate":0,"index":2936},{"krate":0,"index":2938},{"krate":0,"index":1829},{"krate":0,"index":1831},{"krate":0,"index":2940},{"krate":0,"index":2942},{"krate":0,"index":2944},{"krate":0,"index":1836},{"krate":0,"index":1838},{"krate":0,"index":1840},{"krate":0,"index":2946},{"krate":0,"index":2948},{"krate":0,"index":2950},{"krate":0,"index":2952},{"krate":0,"index":1852},{"krate":0,"index":1854},{"krate":0,"index":2954},{"krate":0,"index":2956},{"krate":0,"index":2958},{"krate":0,"index":1861},{"krate":0,"index":2960}],"decl_id":null,"docs":" No-op trace impls","sig":null,"attributes":[{"value":"/ No-op trace impls","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301234,"byte_end":301255,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301256,"byte_end":301259,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This implementation is returned as the global tracer if no `Tracer`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301260,"byte_end":301331,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ has been set. It is also useful for testing purposes as it is intended","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301332,"byte_end":301406,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ to have minimal resource utilization and runtime impact.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301407,"byte_end":301467,"line_start":5,"line_end":5,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2932},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301848,"byte_end":301866,"line_start":19,"line_end":19,"column_start":12,"column_end":30},"name":"NoopTracerProvider","qualname":"::trace::noop::NoopTracerProvider","value":"NoopTracerProvider {  }","parent":null,"children":[{"krate":0,"index":2933}],"decl_id":null,"docs":" A no-op instance of a `TracerProvider`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `TracerProvider`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301760,"byte_end":301803,"line_start":17,"line_end":17,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301970,"byte_end":301973,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopTracerProvider>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new no-op tracer provider\n","sig":null,"attributes":[{"value":"/ Create a new no-op tracer provider","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301920,"byte_end":301958,"line_start":24,"line_end":24,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302174,"byte_end":302190,"line_start":34,"line_end":34,"column_start":8,"column_end":24},"name":"versioned_tracer","qualname":"<NoopTracerProvider as trace::tracer_provider::TracerProvider>::versioned_tracer","value":"fn versioned_tracer<impl Into<Cow<'static, str>>>(&Self,\nimpl Into<Cow<'static, str>>, Option<&'static str>, Option<&'static str>)\n-> Self::Tracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2115},"docs":" Returns a new `NoopTracer` instance.\n","sig":null,"attributes":[{"value":"/ Returns a new `NoopTracer` instance.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302126,"byte_end":302166,"line_start":33,"line_end":33,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302488,"byte_end":302499,"line_start":44,"line_end":44,"column_start":8,"column_end":19},"name":"force_flush","qualname":"<NoopTracerProvider as trace::tracer_provider::TracerProvider>::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":2111},"children":[],"decl_id":{"krate":0,"index":2117},"docs":" Return an empty `Vec` as there isn't any span processors in `NoopTracerProvider`\n","sig":null,"attributes":[{"value":"/ Return an empty `Vec` as there isn't any span processors in `NoopTracerProvider`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302396,"byte_end":302480,"line_start":43,"line_end":43,"column_start":5,"column_end":89}}]},{"kind":"Struct","id":{"krate":0,"index":2940},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302630,"byte_end":302638,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"NoopSpan","qualname":"::trace::noop::NoopSpan","value":"NoopSpan {  }","parent":null,"children":[{"krate":0,"index":2941}],"decl_id":null,"docs":" A no-op instance of a `Span`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302561,"byte_end":302594,"line_start":49,"line_end":49,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302717,"byte_end":302724,"line_start":56,"line_end":56,"column_start":8,"column_end":15},"name":"default","qualname":"<NoopSpan as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3157},"children":[],"decl_id":{"krate":2,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302840,"byte_end":302843,"line_start":63,"line_end":63,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopSpan>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `NoopSpan` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `NoopSpan` instance.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302790,"byte_end":302828,"line_start":62,"line_end":62,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303208,"byte_end":303217,"line_start":78,"line_end":78,"column_start":8,"column_end":17},"name":"add_event","qualname":"<NoopSpan as trace::span::Span>::add_event","value":"fn add_event<T>(&mut Self, T, Vec<KeyValue>) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1884},"docs":" Ignores all events\n","sig":null,"attributes":[{"value":"/ Ignores all events","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303178,"byte_end":303200,"line_start":77,"line_end":77,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303397,"byte_end":303421,"line_start":86,"line_end":86,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"<NoopSpan as trace::span::Span>::add_event_with_timestamp","value":"fn add_event_with_timestamp<T>(&mut Self, T, SystemTime, Vec<KeyValue>) where\nT: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1889},"docs":" Ignores all events with timestamps\n","sig":null,"attributes":[{"value":"/ Ignores all events with timestamps","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303351,"byte_end":303389,"line_start":85,"line_end":85,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303660,"byte_end":303672,"line_start":98,"line_end":98,"column_start":8,"column_end":20},"name":"span_context","qualname":"<NoopSpan as trace::span::Span>::span_context","value":"fn span_context(&Self) -> &trace::SpanContext","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1891},"docs":" Returns an invalid `SpanContext`.\n","sig":null,"attributes":[{"value":"/ Returns an invalid `SpanContext`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303615,"byte_end":303652,"line_start":97,"line_end":97,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303815,"byte_end":303827,"line_start":103,"line_end":103,"column_start":8,"column_end":20},"name":"is_recording","qualname":"<NoopSpan as trace::span::Span>::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1892},"docs":" Returns false, signifying that this span is never recording.\n","sig":null,"attributes":[{"value":"/ Returns false, signifying that this span is never recording.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303743,"byte_end":303807,"line_start":102,"line_end":102,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303904,"byte_end":303917,"line_start":108,"line_end":108,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"<NoopSpan as trace::span::Span>::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1893},"docs":" Ignores all attributes\n","sig":null,"attributes":[{"value":"/ Ignores all attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303870,"byte_end":303896,"line_start":107,"line_end":107,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304009,"byte_end":304019,"line_start":113,"line_end":113,"column_start":8,"column_end":18},"name":"set_status","qualname":"<NoopSpan as trace::span::Span>::set_status","value":"fn set_status(&mut Self, trace::StatusCode, String)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1894},"docs":" Ignores status\n","sig":null,"attributes":[{"value":"/ Ignores status","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303983,"byte_end":304001,"line_start":112,"line_end":112,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304139,"byte_end":304150,"line_start":118,"line_end":118,"column_start":8,"column_end":19},"name":"update_name","qualname":"<NoopSpan as trace::span::Span>::update_name","value":"fn update_name<T>(&mut Self, T) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1895},"docs":" Ignores name updates\n","sig":null,"attributes":[{"value":"/ Ignores name updates","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304107,"byte_end":304131,"line_start":117,"line_end":117,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1851},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304295,"byte_end":304313,"line_start":126,"line_end":126,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"<NoopSpan as trace::span::Span>::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":1883},"children":[],"decl_id":{"krate":0,"index":1898},"docs":" Ignores `Span` endings\n","sig":null,"attributes":[{"value":"/ Ignores `Span` endings","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304261,"byte_end":304287,"line_start":125,"line_end":125,"column_start":5,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":2946},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304459,"byte_end":304469,"line_start":133,"line_end":133,"column_start":12,"column_end":22},"name":"NoopTracer","qualname":"::trace::noop::NoopTracer","value":"NoopTracer {  }","parent":null,"children":[{"krate":0,"index":2947}],"decl_id":null,"docs":" A no-op instance of a `Tracer`.\n","sig":null,"attributes":[{"value":"/ A no-op instance of a `Tracer`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304379,"byte_end":304414,"line_start":131,"line_end":131,"column_start":1,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304556,"byte_end":304559,"line_start":139,"line_end":139,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopTracer>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new no-op tracer\n","sig":null,"attributes":[{"value":"/ Create a new no-op tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304515,"byte_end":304544,"line_start":138,"line_end":138,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304828,"byte_end":304846,"line_start":150,"line_end":150,"column_start":8,"column_end":26},"name":"start_with_context","qualname":"<NoopTracer as trace::tracer::Tracer>::start_with_context","value":"fn start_with_context<T>(&Self, T, &Context) -> Self::Span where\nT: Into<std::borrow::Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2066},"docs":" Starts a new `NoopSpan` with a given context.","sig":null,"attributes":[{"value":"/ Starts a new `NoopSpan` with a given context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304684,"byte_end":304733,"line_start":147,"line_end":147,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304738,"byte_end":304741,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ If the context contains a valid span, it's span context is propagated.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304746,"byte_end":304820,"line_start":149,"line_end":149,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1858},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305085,"byte_end":305097,"line_start":158,"line_end":158,"column_start":8,"column_end":20},"name":"span_builder","qualname":"<NoopTracer as trace::tracer::Tracer>::span_builder","value":"fn span_builder<T>(&Self, T) -> trace::SpanBuilder where\nT: Into<std::borrow::Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2068},"docs":" Starts a `SpanBuilder`.\n","sig":null,"attributes":[{"value":"/ Starts a `SpanBuilder`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305050,"byte_end":305077,"line_start":157,"line_end":157,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305435,"byte_end":305453,"line_start":169,"line_end":169,"column_start":8,"column_end":26},"name":"build_with_context","qualname":"<NoopTracer as trace::tracer::Tracer>::build_with_context","value":"fn build_with_context(&Self, trace::SpanBuilder, &Context) -> Self::Span","parent":{"krate":0,"index":2062},"children":[],"decl_id":{"krate":0,"index":2071},"docs":" Builds a `NoopSpan` from a `SpanBuilder`.","sig":null,"attributes":[{"value":"/ Builds a `NoopSpan` from a `SpanBuilder`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305259,"byte_end":305304,"line_start":165,"line_end":165,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305309,"byte_end":305312,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ If the span builder or the context's current span contains a valid span context, it is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305317,"byte_end":305407,"line_start":167,"line_end":167,"column_start":5,"column_end":95}},{"value":"/ propagated.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305412,"byte_end":305427,"line_start":168,"line_end":168,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":2954},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305889,"byte_end":305905,"line_start":184,"line_end":184,"column_start":12,"column_end":28},"name":"NoopSpanExporter","qualname":"::trace::noop::NoopSpanExporter","value":"NoopSpanExporter {  }","parent":null,"children":[{"krate":0,"index":2955}],"decl_id":null,"docs":" A no-op instance of an [`SpanExporter`].","sig":null,"attributes":[{"value":"/ A no-op instance of an [`SpanExporter`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305741,"byte_end":305785,"line_start":180,"line_end":180,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305786,"byte_end":305789,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ [`SpanExporter`]: crate::sdk::export::trace::SpanExporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305790,"byte_end":305851,"line_start":182,"line_end":182,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":306004,"byte_end":306007,"line_start":190,"line_end":190,"column_start":12,"column_end":15},"name":"new","qualname":"<NoopSpanExporter>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new noop span exporter\n","sig":null,"attributes":[{"value":"/ Create a new noop span exporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305957,"byte_end":305992,"line_start":189,"line_end":189,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2961},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":306140,"byte_end":306146,"line_start":197,"line_end":197,"column_start":14,"column_end":20},"name":"export","qualname":"<NoopSpanExporter as sdk::export::trace::SpanExporter>::export","value":"fn export<'life0, 'async_trait>(&'life0 mut Self, Vec<SpanData>)\n->\n    ::core::pin::Pin<Box<dyn ::core::future::Future<Output = ExportResult> +\n    ::core::marker::Send + 'async_trait>> where 'life0:'async_trait,\nSelf: 'async_trait","parent":{"krate":0,"index":2321},"children":[],"decl_id":{"krate":0,"index":2322},"docs":"","sig":null,"attributes":[{"value":"allow(clippy :: let_unit_value, clippy :: no_effect_underscore_binding,\nclippy :: shadow_same, clippy :: type_complexity, clippy ::\ntype_repetition_in_bounds, clippy :: used_underscore_binding)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":306071,"byte_end":306085,"line_start":195,"line_end":195,"column_start":1,"column_end":15}}]},{"kind":"Trait","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309317,"byte_end":309321,"line_start":27,"line_end":27,"column_start":11,"column_end":15},"name":"Span","qualname":"::trace::span::Span","value":"Span","parent":null,"children":[{"krate":0,"index":1884},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1895},{"krate":0,"index":1897},{"krate":0,"index":1898}],"decl_id":null,"docs":" Interface for a single operation within a trace.\n","sig":null,"attributes":[{"value":"/ Interface for a single operation within a trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309254,"byte_end":309306,"line_start":26,"line_end":26,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309934,"byte_end":309943,"line_start":39,"line_end":39,"column_start":8,"column_end":17},"name":"add_event","qualname":"::trace::span::Span::add_event","value":"fn add_event<T>(&mut Self, T, Vec<KeyValue>) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" An API to record events in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ An API to record events in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309328,"byte_end":309389,"line_start":28,"line_end":28,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309394,"byte_end":309397,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Events have a time associated with the moment when they are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309402,"byte_end":309465,"line_start":30,"line_end":30,"column_start":5,"column_end":68}},{"value":"/ added to the `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309470,"byte_end":309494,"line_start":31,"line_end":31,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309499,"byte_end":309502,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ Events SHOULD preserve the order in which they're set. This will typically match","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309507,"byte_end":309591,"line_start":33,"line_end":33,"column_start":5,"column_end":89}},{"value":"/ the ordering of the events' timestamps.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309596,"byte_end":309639,"line_start":34,"line_end":34,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309644,"byte_end":309647,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309652,"byte_end":309736,"line_start":36,"line_end":36,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309741,"byte_end":309877,"line_start":37,"line_end":37,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":309882,"byte_end":309926,"line_start":38,"line_end":38,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310959,"byte_end":310975,"line_start":59,"line_end":59,"column_start":8,"column_end":24},"name":"record_exception","qualname":"::trace::span::Span::record_exception","value":"fn record_exception(&mut Self, &dyn Error)","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Convenience method to record an exception/error as an `Event`","sig":null,"attributes":[{"value":"/ Convenience method to record an exception/error as an `Event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310133,"byte_end":310198,"line_start":46,"line_end":46,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310203,"byte_end":310206,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ An exception SHOULD be recorded as an Event on the span during which it occurred.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310211,"byte_end":310296,"line_start":48,"line_end":48,"column_start":5,"column_end":90}},{"value":"/ The name of the event MUST be \"exception\".","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310301,"byte_end":310347,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310352,"byte_end":310355,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The semantic conventions for Errors are described in [\"Semantic Conventions for Exceptions\"](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/exceptions.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310360,"byte_end":310586,"line_start":51,"line_end":51,"column_start":5,"column_end":231}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310591,"byte_end":310594,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ For now we will not set `exception.stacktrace` attribute since the `Error::backtrace`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310599,"byte_end":310688,"line_start":53,"line_end":53,"column_start":5,"column_end":94}},{"value":"/ method is still in nightly. Users can provide a stacktrace by using the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310693,"byte_end":310768,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ `record_exception_with_stacktrace` method.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310773,"byte_end":310819,"line_start":55,"line_end":55,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310824,"byte_end":310827,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Users can custom the exception message by overriding the `fmt::Display` trait's `fmt` method","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310832,"byte_end":310928,"line_start":57,"line_end":57,"column_start":5,"column_end":101}},{"value":"/ for the error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":310933,"byte_end":310951,"line_start":58,"line_end":58,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311327,"byte_end":311359,"line_start":68,"line_end":68,"column_start":8,"column_end":40},"name":"record_exception_with_stacktrace","qualname":"::trace::span::Span::record_exception_with_stacktrace","value":"fn record_exception_with_stacktrace<T>(&mut Self, &dyn Error, T) where\nT: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Convenience method to record a exception/error as an `Event` with custom stacktrace","sig":null,"attributes":[{"value":"/ Convenience method to record a exception/error as an `Event` with custom stacktrace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311163,"byte_end":311250,"line_start":65,"line_end":65,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311255,"byte_end":311258,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ See `Span:record_exception` method for more details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311263,"byte_end":311319,"line_start":67,"line_end":67,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312228,"byte_end":312252,"line_start":88,"line_end":88,"column_start":8,"column_end":32},"name":"add_event_with_timestamp","qualname":"::trace::span::Span::add_event_with_timestamp","value":"fn add_event_with_timestamp<T>(&mut Self, T, SystemTime, Vec<KeyValue>) where\nT: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" An API to record events at a specific time in the context of a given `Span`.","sig":null,"attributes":[{"value":"/ An API to record events at a specific time in the context of a given `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311708,"byte_end":311788,"line_start":80,"line_end":80,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311793,"byte_end":311796,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Events SHOULD preserve the order in which they're set. This will typically match","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311801,"byte_end":311885,"line_start":82,"line_end":82,"column_start":5,"column_end":89}},{"value":"/ the ordering of the events' timestamps.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311890,"byte_end":311933,"line_start":83,"line_end":83,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311938,"byte_end":311941,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard event names and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":311946,"byte_end":312030,"line_start":85,"line_end":85,"column_start":5,"column_end":89}},{"value":"/ keys\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312035,"byte_end":312171,"line_start":86,"line_end":86,"column_start":5,"column_end":141}},{"value":"/ which have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312176,"byte_end":312220,"line_start":87,"line_end":87,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1891},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312612,"byte_end":312624,"line_start":98,"line_end":98,"column_start":8,"column_end":20},"name":"span_context","qualname":"::trace::span::Span::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Returns the `SpanContext` for the given `Span`. The returned value may be used even after\n the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.\n","sig":null,"attributes":[{"value":"/ Returns the `SpanContext` for the given `Span`. The returned value may be used even after","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312412,"byte_end":312505,"line_start":96,"line_end":96,"column_start":5,"column_end":98}},{"value":"/ the `Span is finished. The returned value MUST be the same for the entire `Span` lifetime.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312510,"byte_end":312604,"line_start":97,"line_end":97,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1892},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313832,"byte_end":313844,"line_start":116,"line_end":116,"column_start":8,"column_end":20},"name":"is_recording","qualname":"::trace::span::Span::is_recording","value":"fn is_recording(&Self) -> bool","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Returns true if this `Span` is recording information like events with the `add_event`\n operation, attributes using `set_attributes`, status with `set_status`, etc.","sig":null,"attributes":[{"value":"/ Returns true if this `Span` is recording information like events with the `add_event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312654,"byte_end":312743,"line_start":100,"line_end":100,"column_start":5,"column_end":94}},{"value":"/ operation, attributes using `set_attributes`, status with `set_status`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312748,"byte_end":312828,"line_start":101,"line_end":101,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312833,"byte_end":312836,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This flag SHOULD be used to avoid expensive computations of a `Span` attributes or events in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312841,"byte_end":312937,"line_start":103,"line_end":103,"column_start":5,"column_end":101}},{"value":"/ case when a `Span` is definitely not recorded. Note that any child span's recording is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":312942,"byte_end":313032,"line_start":104,"line_end":104,"column_start":5,"column_end":95}},{"value":"/ determined independently from the value of this flag (typically based on the sampled flag of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313037,"byte_end":313133,"line_start":105,"line_end":105,"column_start":5,"column_end":101}},{"value":"/ a `TraceFlag` on `SpanContext`).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313138,"byte_end":313174,"line_start":106,"line_end":106,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313179,"byte_end":313182,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This flag may be true despite the entire trace being sampled out. This allows to record and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313187,"byte_end":313282,"line_start":108,"line_end":108,"column_start":5,"column_end":100}},{"value":"/ process information about the individual Span without sending it to the backend. An example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313287,"byte_end":313382,"line_start":109,"line_end":109,"column_start":5,"column_end":100}},{"value":"/ of this scenario may be recording and processing of all incoming requests for the processing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313387,"byte_end":313483,"line_start":110,"line_end":110,"column_start":5,"column_end":101}},{"value":"/ and building of SLA/SLO latency charts while sending only a subset - sampled spans - to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313488,"byte_end":313583,"line_start":111,"line_end":111,"column_start":5,"column_end":100}},{"value":"/ backend. See also the sampling section of SDK design.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313588,"byte_end":313645,"line_start":112,"line_end":112,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313650,"byte_end":313653,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Users of the API should only access the `is_recording` property when instrumenting code and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313658,"byte_end":313753,"line_start":114,"line_end":114,"column_start":5,"column_end":100}},{"value":"/ never access `SampledFlag` unless used in context propagators.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313758,"byte_end":313824,"line_start":115,"line_end":115,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314639,"byte_end":314652,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"set_attribute","qualname":"::trace::span::Span::set_attribute","value":"fn set_attribute(&mut Self, KeyValue)","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" An API to set a single `Attribute` where the attribute properties are passed\n as arguments. To avoid extra allocations some implementations may offer a separate API for\n each of the possible value types.","sig":null,"attributes":[{"value":"/ An API to set a single `Attribute` where the attribute properties are passed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313866,"byte_end":313946,"line_start":118,"line_end":118,"column_start":5,"column_end":85}},{"value":"/ as arguments. To avoid extra allocations some implementations may offer a separate API for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":313951,"byte_end":314045,"line_start":119,"line_end":119,"column_start":5,"column_end":99}},{"value":"/ each of the possible value types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314050,"byte_end":314087,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314092,"byte_end":314095,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ An `Attribute` is defined as a `KeyValue` pair.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314100,"byte_end":314151,"line_start":122,"line_end":122,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314156,"byte_end":314159,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Attributes SHOULD preserve the order in which they're set. Setting an attribute","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314164,"byte_end":314247,"line_start":124,"line_end":124,"column_start":5,"column_end":88}},{"value":"/ with the same key as an existing attribute SHOULD overwrite the existing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314252,"byte_end":314328,"line_start":125,"line_end":125,"column_start":5,"column_end":81}},{"value":"/ attribute's value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314333,"byte_end":314355,"line_start":126,"line_end":126,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314360,"byte_end":314363,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Note that the OpenTelemetry project documents certain [\"standard","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314368,"byte_end":314436,"line_start":128,"line_end":128,"column_start":5,"column_end":73}},{"value":"/ attributes\"](https://github.com/open-telemetry/opentelemetry-specification/tree/v0.5.0/specification/trace/semantic_conventions/README.md)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314441,"byte_end":314583,"line_start":129,"line_end":129,"column_start":5,"column_end":147}},{"value":"/ that have prescribed semantic meanings.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314588,"byte_end":314631,"line_start":130,"line_end":130,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1894},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315123,"byte_end":315133,"line_start":140,"line_end":140,"column_start":8,"column_end":18},"name":"set_status","qualname":"::trace::span::Span::set_status","value":"fn set_status(&mut Self, StatusCode, String)","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Sets the status of the `Span`. `message` MUST be ignored when the status is `OK` or\n `Unset`.","sig":null,"attributes":[{"value":"/ Sets the status of the `Span`. `message` MUST be ignored when the status is `OK` or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314691,"byte_end":314778,"line_start":133,"line_end":133,"column_start":5,"column_end":92}},{"value":"/ `Unset`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314783,"byte_end":314795,"line_start":134,"line_end":134,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314800,"byte_end":314803,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ The order of status is `Ok` > `Error` > `Unset`. That's means set the status","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314808,"byte_end":314888,"line_start":136,"line_end":136,"column_start":5,"column_end":85}},{"value":"/ to `Unset` will always be ignore, set the status to `Error` only works when current","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314893,"byte_end":314980,"line_start":137,"line_end":137,"column_start":5,"column_end":92}},{"value":"/ status is `Unset`, set the status to `Ok` will be consider final and any further call","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":314985,"byte_end":315074,"line_start":138,"line_end":138,"column_start":5,"column_end":94}},{"value":"/ to this function will be ignore.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315079,"byte_end":315115,"line_start":139,"line_end":139,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315996,"byte_end":316007,"line_start":154,"line_end":154,"column_start":8,"column_end":19},"name":"update_name","qualname":"::trace::span::Span::update_name","value":"fn update_name<T>(&mut Self, T) where T: Into<Cow>","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Updates the `Span`'s name. After this update, any sampling behavior based on the\n name will depend on the implementation.","sig":null,"attributes":[{"value":"/ Updates the `Span`'s name. After this update, any sampling behavior based on the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315186,"byte_end":315270,"line_start":142,"line_end":142,"column_start":5,"column_end":89}},{"value":"/ name will depend on the implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315275,"byte_end":315318,"line_start":143,"line_end":143,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315323,"byte_end":315326,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ It is highly discouraged to update the name of a `Span` after its creation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315331,"byte_end":315410,"line_start":145,"line_end":145,"column_start":5,"column_end":84}},{"value":"/ `Span` name is often used to group, filter and identify the logical groups of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315415,"byte_end":315496,"line_start":146,"line_end":146,"column_start":5,"column_end":86}},{"value":"/ spans. Often, filtering logic will be implemented before the `Span` creation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315501,"byte_end":315581,"line_start":147,"line_end":147,"column_start":5,"column_end":85}},{"value":"/ for performance reasons, and the name update may interfere with this logic.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315586,"byte_end":315665,"line_start":148,"line_end":148,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315670,"byte_end":315673,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ The method name is called `update_name` to differentiate this method from the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315678,"byte_end":315759,"line_start":150,"line_end":150,"column_start":5,"column_end":86}},{"value":"/ regular property. It emphasizes that this operation signifies a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315764,"byte_end":315831,"line_start":151,"line_end":151,"column_start":5,"column_end":72}},{"value":"/ major change for a `Span` and may lead to re-calculation of sampling or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315836,"byte_end":315911,"line_start":152,"line_end":152,"column_start":5,"column_end":80}},{"value":"/ filtering decisions made previously depending on the implementation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":315916,"byte_end":315988,"line_start":153,"line_end":153,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1897},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316512,"byte_end":316515,"line_start":168,"line_end":168,"column_start":8,"column_end":11},"name":"end","qualname":"::trace::span::Span::end","value":"fn end(&mut Self)","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Finishes the `Span`.","sig":null,"attributes":[{"value":"/ Finishes the `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316086,"byte_end":316110,"line_start":158,"line_end":158,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316115,"byte_end":316118,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Implementations MUST ignore all subsequent calls to `end` (there might be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316123,"byte_end":316200,"line_start":160,"line_end":160,"column_start":5,"column_end":82}},{"value":"/ exceptions when the tracer is streaming events and has no mutable state","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316205,"byte_end":316280,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/ associated with the Span).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316285,"byte_end":316315,"line_start":162,"line_end":162,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316320,"byte_end":316323,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Calls to `end` a Span MUST not have any effects on child `Span`s as they may","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316328,"byte_end":316408,"line_start":164,"line_end":164,"column_start":5,"column_end":85}},{"value":"/ still be running and can be ended later.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316413,"byte_end":316457,"line_start":165,"line_end":165,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316462,"byte_end":316465,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ This API MUST be non-blocking.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316470,"byte_end":316504,"line_start":167,"line_end":167,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1898},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316745,"byte_end":316763,"line_start":177,"line_end":177,"column_start":8,"column_end":26},"name":"end_with_timestamp","qualname":"::trace::span::Span::end_with_timestamp","value":"fn end_with_timestamp(&mut Self, SystemTime)","parent":{"krate":0,"index":1883},"children":[],"decl_id":null,"docs":" Finishes the `Span` with given timestamp","sig":null,"attributes":[{"value":"/ Finishes the `Span` with given timestamp","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316593,"byte_end":316637,"line_start":172,"line_end":172,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316642,"byte_end":316645,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ For more details, refer to [`Span::end`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316650,"byte_end":316694,"line_start":174,"line_end":174,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316699,"byte_end":316702,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [`Span::end`]: Span::end()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316707,"byte_end":316737,"line_start":176,"line_end":176,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2966},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318846,"byte_end":318852,"line_start":219,"line_end":219,"column_start":5,"column_end":11},"name":"Client","qualname":"::trace::span::SpanKind::Client","value":"SpanKind::Client","parent":{"krate":0,"index":2965},"children":[],"decl_id":null,"docs":" Indicates that the span describes a synchronous request to\n some remote service.  This span is the parent of a remote `Server`\n span and waits for its response.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes a synchronous request to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318663,"byte_end":318725,"line_start":216,"line_end":216,"column_start":5,"column_end":67}},{"value":"/ some remote service.  This span is the parent of a remote `Server`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318730,"byte_end":318800,"line_start":217,"line_end":217,"column_start":5,"column_end":75}},{"value":"/ span and waits for its response.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318805,"byte_end":318841,"line_start":218,"line_end":218,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2968},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319072,"byte_end":319078,"line_start":223,"line_end":223,"column_start":5,"column_end":11},"name":"Server","qualname":"::trace::span::SpanKind::Server","value":"SpanKind::Server","parent":{"krate":0,"index":2965},"children":[],"decl_id":null,"docs":" Indicates that the span covers server-side handling of a\n synchronous RPC or other remote request.  This span is the child of\n a remote `Client` span that was expected to wait for a response.\n","sig":null,"attributes":[{"value":"/ Indicates that the span covers server-side handling of a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318858,"byte_end":318918,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/ synchronous RPC or other remote request.  This span is the child of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318923,"byte_end":318994,"line_start":221,"line_end":221,"column_start":5,"column_end":76}},{"value":"/ a remote `Client` span that was expected to wait for a response.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318999,"byte_end":319067,"line_start":222,"line_end":222,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2970},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319458,"byte_end":319466,"line_start":230,"line_end":230,"column_start":5,"column_end":13},"name":"Producer","qualname":"::trace::span::SpanKind::Producer","value":"SpanKind::Producer","parent":{"krate":0,"index":2965},"children":[],"decl_id":null,"docs":" Indicates that the span describes the parent of an\n asynchronous request.  This parent span is expected to end before\n the corresponding child `Consumer` span, possibly even before the\n child span starts. In messaging scenarios with batching, tracing\n individual messages requires a new `Producer` span per message to\n be created.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes the parent of an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319084,"byte_end":319138,"line_start":224,"line_end":224,"column_start":5,"column_end":59}},{"value":"/ asynchronous request.  This parent span is expected to end before","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319143,"byte_end":319212,"line_start":225,"line_end":225,"column_start":5,"column_end":74}},{"value":"/ the corresponding child `Consumer` span, possibly even before the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319217,"byte_end":319286,"line_start":226,"line_end":226,"column_start":5,"column_end":74}},{"value":"/ child span starts. In messaging scenarios with batching, tracing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319291,"byte_end":319359,"line_start":227,"line_end":227,"column_start":5,"column_end":73}},{"value":"/ individual messages requires a new `Producer` span per message to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319364,"byte_end":319433,"line_start":228,"line_end":228,"column_start":5,"column_end":74}},{"value":"/ be created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319438,"byte_end":319453,"line_start":229,"line_end":229,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2972},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319571,"byte_end":319579,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Consumer","qualname":"::trace::span::SpanKind::Consumer","value":"SpanKind::Consumer","parent":{"krate":0,"index":2965},"children":[],"decl_id":null,"docs":" Indicates that the span describes the child of an\n asynchronous `Producer` request.\n","sig":null,"attributes":[{"value":"/ Indicates that the span describes the child of an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319472,"byte_end":319525,"line_start":231,"line_end":231,"column_start":5,"column_end":58}},{"value":"/ asynchronous `Producer` request.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319530,"byte_end":319566,"line_start":232,"line_end":232,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2974},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319765,"byte_end":319773,"line_start":237,"line_end":237,"column_start":5,"column_end":13},"name":"Internal","qualname":"::trace::span::SpanKind::Internal","value":"SpanKind::Internal","parent":{"krate":0,"index":2965},"children":[],"decl_id":null,"docs":" Default value. Indicates that the span represents an\n internal operation within an application, as opposed to an\n operations with remote parents or children.\n","sig":null,"attributes":[{"value":"/ Default value. Indicates that the span represents an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319585,"byte_end":319641,"line_start":234,"line_end":234,"column_start":5,"column_end":61}},{"value":"/ internal operation within an application, as opposed to an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319646,"byte_end":319708,"line_start":235,"line_end":235,"column_start":5,"column_end":67}},{"value":"/ operations with remote parents or children.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319713,"byte_end":319760,"line_start":236,"line_end":236,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":2965},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318648,"byte_end":318656,"line_start":215,"line_end":215,"column_start":10,"column_end":18},"name":"SpanKind","qualname":"::trace::span::SpanKind","value":"enum SpanKind { Client, Server, Producer, Consumer, Internal, }","parent":null,"children":[{"krate":0,"index":2966},{"krate":0,"index":2968},{"krate":0,"index":2970},{"krate":0,"index":2972},{"krate":0,"index":2974}],"decl_id":null,"docs":" `SpanKind` describes the relationship between the Span, its parents,\n and its children in a `Trace`. `SpanKind` describes two independent\n properties that benefit tracing systems during analysis.","sig":null,"attributes":[{"value":"/ `SpanKind` describes the relationship between the Span, its parents,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316802,"byte_end":316874,"line_start":180,"line_end":180,"column_start":1,"column_end":73}},{"value":"/ and its children in a `Trace`. `SpanKind` describes two independent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316875,"byte_end":316946,"line_start":181,"line_end":181,"column_start":1,"column_end":72}},{"value":"/ properties that benefit tracing systems during analysis.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":316947,"byte_end":317007,"line_start":182,"line_end":182,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317008,"byte_end":317011,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ The first property described by `SpanKind` reflects whether the `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317012,"byte_end":317086,"line_start":184,"line_end":184,"column_start":1,"column_end":75}},{"value":"/ is a remote child or parent. `Span`s with a remote parent are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317087,"byte_end":317152,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/ interesting because they are sources of external load. `Span`s with a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317153,"byte_end":317226,"line_start":186,"line_end":186,"column_start":1,"column_end":74}},{"value":"/ remote child are interesting because they reflect a non-local system","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317227,"byte_end":317299,"line_start":187,"line_end":187,"column_start":1,"column_end":73}},{"value":"/ dependency.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317300,"byte_end":317315,"line_start":188,"line_end":188,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317316,"byte_end":317319,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The second property described by `SpanKind` reflects whether a child","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317320,"byte_end":317392,"line_start":190,"line_end":190,"column_start":1,"column_end":73}},{"value":"/ `Span` represents a synchronous call.  When a child span is synchronous,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317393,"byte_end":317469,"line_start":191,"line_end":191,"column_start":1,"column_end":77}},{"value":"/ the parent is expected to wait for it to complete under ordinary","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317470,"byte_end":317538,"line_start":192,"line_end":192,"column_start":1,"column_end":69}},{"value":"/ circumstances.  It can be useful for tracing systems to know this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317539,"byte_end":317608,"line_start":193,"line_end":193,"column_start":1,"column_end":70}},{"value":"/ property, since synchronous `Span`s may contribute to the overall trace","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317609,"byte_end":317684,"line_start":194,"line_end":194,"column_start":1,"column_end":76}},{"value":"/ latency. Asynchronous scenarios can be remote or local.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317685,"byte_end":317744,"line_start":195,"line_end":195,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317745,"byte_end":317748,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ In order for `SpanKind` to be meaningful, callers should arrange that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317749,"byte_end":317822,"line_start":197,"line_end":197,"column_start":1,"column_end":74}},{"value":"/ a single `Span` does not serve more than one purpose.  For example, a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317823,"byte_end":317896,"line_start":198,"line_end":198,"column_start":1,"column_end":74}},{"value":"/ server-side span should not be used directly as the parent of another","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317897,"byte_end":317970,"line_start":199,"line_end":199,"column_start":1,"column_end":74}},{"value":"/ remote span.  As a simple guideline, instrumentation should create a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":317971,"byte_end":318043,"line_start":200,"line_end":200,"column_start":1,"column_end":73}},{"value":"/ new `Span` prior to extracting and serializing the span context for a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318044,"byte_end":318117,"line_start":201,"line_end":201,"column_start":1,"column_end":74}},{"value":"/ remote call.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318118,"byte_end":318134,"line_start":202,"line_end":202,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318135,"byte_end":318138,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ To summarize the interpretation of these kinds:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318139,"byte_end":318190,"line_start":204,"line_end":204,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318191,"byte_end":318194,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ | `SpanKind` | Synchronous | Asynchronous | Remote Incoming | Remote Outgoing |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318195,"byte_end":318278,"line_start":206,"line_end":206,"column_start":1,"column_end":84}},{"value":"/ |------------|-----|-----|-----|-----|","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318279,"byte_end":318321,"line_start":207,"line_end":207,"column_start":1,"column_end":43}},{"value":"/ | `Client`   | yes |     |     | yes |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318322,"byte_end":318364,"line_start":208,"line_end":208,"column_start":1,"column_end":43}},{"value":"/ | `Server`   | yes |     | yes |     |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318365,"byte_end":318407,"line_start":209,"line_end":209,"column_start":1,"column_end":43}},{"value":"/ | `Producer` |     | yes |     | yes |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318408,"byte_end":318450,"line_start":210,"line_end":210,"column_start":1,"column_end":43}},{"value":"/ | `Consumer` |     | yes | yes |     |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318451,"byte_end":318493,"line_start":211,"line_end":211,"column_start":1,"column_end":43}},{"value":"/ | `Internal` |     |     |     |     |","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":318494,"byte_end":318536,"line_start":212,"line_end":212,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1900},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319818,"byte_end":319821,"line_start":241,"line_end":241,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SpanKind as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":2984},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320523,"byte_end":320528,"line_start":259,"line_end":259,"column_start":5,"column_end":10},"name":"Unset","qualname":"::trace::span::StatusCode::Unset","value":"StatusCode::Unset","parent":{"krate":0,"index":2983},"children":[],"decl_id":null,"docs":" The default status.\n","sig":null,"attributes":[{"value":"/ The default status.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320495,"byte_end":320518,"line_start":258,"line_end":258,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2986},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320569,"byte_end":320571,"line_start":261,"line_end":261,"column_start":5,"column_end":7},"name":"Ok","qualname":"::trace::span::StatusCode::Ok","value":"StatusCode::Ok","parent":{"krate":0,"index":2983},"children":[],"decl_id":null,"docs":" OK is returned on success.\n","sig":null,"attributes":[{"value":"/ OK is returned on success.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320534,"byte_end":320564,"line_start":260,"line_end":260,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2988},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320618,"byte_end":320623,"line_start":263,"line_end":263,"column_start":5,"column_end":10},"name":"Error","qualname":"::trace::span::StatusCode::Error","value":"StatusCode::Error","parent":{"krate":0,"index":2983},"children":[],"decl_id":null,"docs":" The operation contains an error.\n","sig":null,"attributes":[{"value":"/ The operation contains an error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320577,"byte_end":320613,"line_start":262,"line_end":262,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":2983},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320478,"byte_end":320488,"line_start":257,"line_end":257,"column_start":10,"column_end":20},"name":"StatusCode","qualname":"::trace::span::StatusCode","value":"enum StatusCode { Unset, Ok, Error, }","parent":null,"children":[{"krate":0,"index":2984},{"krate":0,"index":2986},{"krate":0,"index":2988}],"decl_id":null,"docs":" The `StatusCode` interface represents the status of a finished `Span`.\n It's composed of a canonical code in conjunction with an optional\n descriptive message.\n","sig":null,"attributes":[{"value":"/ The `StatusCode` interface represents the status of a finished `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320191,"byte_end":320265,"line_start":252,"line_end":252,"column_start":1,"column_end":75}},{"value":"/ It's composed of a canonical code in conjunction with an optional","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320266,"byte_end":320335,"line_start":253,"line_end":253,"column_start":1,"column_end":70}},{"value":"/ descriptive message.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320336,"byte_end":320360,"line_start":254,"line_end":254,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1902},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320716,"byte_end":320722,"line_start":268,"line_end":268,"column_start":12,"column_end":18},"name":"as_str","qualname":"<StatusCode>::as_str","value":"fn as_str(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Return a static str that represent the status code\n","sig":null,"attributes":[{"value":"/ Return a static str that represent the status code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320650,"byte_end":320704,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":2998},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322598,"byte_end":322608,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"TraceFlags","qualname":"::trace::span_context::TraceFlags","value":"","parent":null,"children":[],"decl_id":null,"docs":" Flags that can be set on a [`SpanContext`].","sig":null,"attributes":[{"value":"/ Flags that can be set on a [`SpanContext`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322156,"byte_end":322203,"line_start":23,"line_end":23,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322204,"byte_end":322207,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ The current version of the specification only supports a single flag called `sampled`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322208,"byte_end":322298,"line_start":25,"line_end":25,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322299,"byte_end":322302,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ See the W3C TraceContext specification's [trace-flags] section for more details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322303,"byte_end":322387,"line_start":27,"line_end":27,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322388,"byte_end":322391,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ [trace-flags]: https://www.w3.org/TR/trace-context/#trace-flags","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322392,"byte_end":322459,"line_start":29,"line_end":29,"column_start":1,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":1934},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322972,"byte_end":322979,"line_start":41,"line_end":41,"column_start":15,"column_end":22},"name":"SAMPLED","qualname":"::trace::span_context::TraceFlags::SAMPLED","value":"TraceFlags","parent":{"krate":0,"index":1933},"children":[],"decl_id":null,"docs":" Trace flags with the `sampled` flag set to `1`.","sig":null,"attributes":[{"value":"/ Trace flags with the `sampled` flag set to `1`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322637,"byte_end":322688,"line_start":35,"line_end":35,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322693,"byte_end":322696,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Spans that are not sampled will be ignored by most tracing tools.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322701,"byte_end":322770,"line_start":37,"line_end":37,"column_start":5,"column_end":74}},{"value":"/ See the `sampled` section of the [W3C TraceContext specification] for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322775,"byte_end":322857,"line_start":38,"line_end":38,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322862,"byte_end":322865,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ [W3C TraceContext specification]: https://www.w3.org/TR/trace-context/#sampled-flag","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322870,"byte_end":322957,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1935},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323064,"byte_end":323067,"line_start":44,"line_end":44,"column_start":18,"column_end":21},"name":"new","qualname":"<TraceFlags>::new","value":"const fn new(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct new trace flags\n","sig":null,"attributes":[{"value":"/ Construct new trace flags","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323017,"byte_end":323046,"line_start":43,"line_end":43,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323185,"byte_end":323195,"line_start":49,"line_end":49,"column_start":12,"column_end":22},"name":"is_sampled","qualname":"<TraceFlags>::is_sampled","value":"fn is_sampled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `sampled` flag is set\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `sampled` flag is set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323126,"byte_end":323173,"line_start":48,"line_end":48,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323363,"byte_end":323375,"line_start":54,"line_end":54,"column_start":12,"column_end":24},"name":"with_sampled","qualname":"<TraceFlags>::with_sampled","value":"fn with_sampled(&Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns copy of the current flags with the `sampled` flag set.\n","sig":null,"attributes":[{"value":"/ Returns copy of the current flags with the `sampled` flag set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323285,"byte_end":323351,"line_start":53,"line_end":53,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323591,"byte_end":323596,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"to_u8","qualname":"<TraceFlags>::to_u8","value":"fn to_u8(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the flags as a `u8`\n","sig":null,"attributes":[{"value":"/ Returns the flags as a `u8`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323548,"byte_end":323579,"line_start":62,"line_end":62,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1941},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323696,"byte_end":323702,"line_start":71,"line_end":71,"column_start":8,"column_end":14},"name":"bitand","qualname":"<TraceFlags as std::ops::BitAnd>::bitand","value":"fn bitand(Self, Self) -> Self::Output","parent":{"krate":2,"index":3306},"children":[],"decl_id":{"krate":2,"index":3309},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1944},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323836,"byte_end":323841,"line_start":79,"line_end":79,"column_start":8,"column_end":13},"name":"bitor","qualname":"<TraceFlags as std::ops::BitOr>::bitor","value":"fn bitor(Self, Self) -> Self::Output","parent":{"krate":2,"index":3311},"children":[],"decl_id":{"krate":2,"index":3314},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1947},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323973,"byte_end":323976,"line_start":87,"line_end":87,"column_start":8,"column_end":11},"name":"not","qualname":"<TraceFlags as std::ops::Not>::not","value":"fn not(Self) -> Self::Output","parent":{"krate":2,"index":3299},"children":[],"decl_id":{"krate":2,"index":3301},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1949},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324075,"byte_end":324078,"line_start":93,"line_end":93,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TraceFlags as std::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10123},"children":[],"decl_id":{"krate":2,"index":10124},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3018},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324420,"byte_end":324427,"line_start":103,"line_end":103,"column_start":12,"column_end":19},"name":"TraceId","qualname":"::trace::span_context::TraceId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A 16-byte value which identifies a given trace.","sig":null,"attributes":[{"value":"/ A 16-byte value which identifies a given trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324179,"byte_end":324230,"line_start":98,"line_end":98,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324231,"byte_end":324234,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ The id is valid if it contains at least one non-zero byte.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324235,"byte_end":324297,"line_start":100,"line_end":100,"column_start":1,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":1951},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324501,"byte_end":324508,"line_start":107,"line_end":107,"column_start":15,"column_end":22},"name":"INVALID","qualname":"::trace::span_context::TraceId::INVALID","value":"TraceId","parent":{"krate":0,"index":1950},"children":[],"decl_id":null,"docs":" Invalid trace id\n","sig":null,"attributes":[{"value":"/ Invalid trace id","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324466,"byte_end":324486,"line_start":106,"line_end":106,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1952},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324617,"byte_end":324627,"line_start":110,"line_end":110,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<TraceId>::from_bytes","value":"const fn from_bytes([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a trace id from its representation as a byte array.\n","sig":null,"attributes":[{"value":"/ Create a trace id from its representation as a byte array.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324537,"byte_end":324599,"line_start":109,"line_end":109,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324791,"byte_end":324799,"line_start":115,"line_end":115,"column_start":18,"column_end":26},"name":"to_bytes","qualname":"<TraceId>::to_bytes","value":"const fn to_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the representation of this trace id as a byte array.\n","sig":null,"attributes":[{"value":"/ Return the representation of this trace id as a byte array.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324710,"byte_end":324773,"line_start":114,"line_end":114,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325223,"byte_end":325231,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"from_hex","qualname":"<TraceId>::from_hex","value":"fn from_hex(&str) -> Result<Self, ParseIntError>","parent":null,"children":[],"decl_id":null,"docs":" Converts a string in base 16 to a trace id.","sig":null,"attributes":[{"value":"/ Converts a string in base 16 to a trace id.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324860,"byte_end":324907,"line_start":119,"line_end":119,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324912,"byte_end":324915,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324920,"byte_end":324934,"line_start":121,"line_end":121,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324939,"byte_end":324942,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324947,"byte_end":324954,"line_start":123,"line_end":123,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::trace::TraceId;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324959,"byte_end":324997,"line_start":124,"line_end":124,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325002,"byte_end":325005,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ assert!(TraceId::from_hex(\"42\").is_ok());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325010,"byte_end":325055,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ assert!(TraceId::from_hex(\"58406520a006649127e371903a2de979\").is_ok());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325060,"byte_end":325135,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325140,"byte_end":325143,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ assert!(TraceId::from_hex(\"not_hex\").is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325148,"byte_end":325199,"line_start":129,"line_end":129,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325204,"byte_end":325211,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325377,"byte_end":325381,"line_start":137,"line_end":137,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceId as std::convert::From>::from","value":"fn from([u8; ]) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325490,"byte_end":325493,"line_start":143,"line_end":143,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TraceId as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325647,"byte_end":325650,"line_start":149,"line_end":149,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TraceId as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1966},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325805,"byte_end":325808,"line_start":155,"line_end":155,"column_start":8,"column_end":11},"name":"fmt","qualname":"<TraceId as std::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10123},"children":[],"decl_id":{"krate":2,"index":10124},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3034},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326149,"byte_end":326155,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"SpanId","qualname":"::trace::span_context::SpanId","value":"","parent":null,"children":[],"decl_id":null,"docs":" An 8-byte value which identifies a given span.","sig":null,"attributes":[{"value":"/ An 8-byte value which identifies a given span.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325909,"byte_end":325959,"line_start":160,"line_end":160,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325960,"byte_end":325963,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ The id is valid if it contains at least one non-zero byte.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325964,"byte_end":326026,"line_start":162,"line_end":162,"column_start":1,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":1968},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326226,"byte_end":326233,"line_start":169,"line_end":169,"column_start":15,"column_end":22},"name":"INVALID","qualname":"::trace::span_context::SpanId::INVALID","value":"SpanId","parent":{"krate":0,"index":1967},"children":[],"decl_id":null,"docs":" Invalid span id\n","sig":null,"attributes":[{"value":"/ Invalid span id","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326192,"byte_end":326211,"line_start":168,"line_end":168,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326339,"byte_end":326349,"line_start":172,"line_end":172,"column_start":18,"column_end":28},"name":"from_bytes","qualname":"<SpanId>::from_bytes","value":"const fn from_bytes([u8; ]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a span id from its representation as a byte array.\n","sig":null,"attributes":[{"value":"/ Create a span id from its representation as a byte array.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326260,"byte_end":326321,"line_start":171,"line_end":171,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326509,"byte_end":326517,"line_start":177,"line_end":177,"column_start":18,"column_end":26},"name":"to_bytes","qualname":"<SpanId>::to_bytes","value":"const fn to_bytes(Self) -> [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Return the representation of this span id as a byte array.\n","sig":null,"attributes":[{"value":"/ Return the representation of this span id as a byte array.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326429,"byte_end":326491,"line_start":176,"line_end":176,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326919,"byte_end":326927,"line_start":193,"line_end":193,"column_start":12,"column_end":20},"name":"from_hex","qualname":"<SpanId>::from_hex","value":"fn from_hex(&str) -> Result<Self, ParseIntError>","parent":null,"children":[],"decl_id":null,"docs":" Converts a string in base 16 to a span id.","sig":null,"attributes":[{"value":"/ Converts a string in base 16 to a span id.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326577,"byte_end":326623,"line_start":181,"line_end":181,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326628,"byte_end":326631,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326636,"byte_end":326650,"line_start":183,"line_end":183,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326655,"byte_end":326658,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326663,"byte_end":326670,"line_start":185,"line_end":185,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::trace::SpanId;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326675,"byte_end":326712,"line_start":186,"line_end":186,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326717,"byte_end":326720,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(SpanId::from_hex(\"42\").is_ok());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326725,"byte_end":326769,"line_start":188,"line_end":188,"column_start":5,"column_end":49}},{"value":"/ assert!(SpanId::from_hex(\"58406520a0066491\").is_ok());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326774,"byte_end":326832,"line_start":189,"line_end":189,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326837,"byte_end":326840,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ assert!(SpanId::from_hex(\"not_hex\").is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326845,"byte_end":326895,"line_start":191,"line_end":191,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326900,"byte_end":326907,"line_start":192,"line_end":192,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327069,"byte_end":327073,"line_start":199,"line_end":199,"column_start":8,"column_end":12},"name":"from","qualname":"<SpanId as std::convert::From>::from","value":"fn from([u8; ]) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327179,"byte_end":327182,"line_start":205,"line_end":205,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SpanId as std::fmt::Debug>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10110},"children":[],"decl_id":{"krate":2,"index":10111},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327335,"byte_end":327338,"line_start":211,"line_end":211,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SpanId as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327492,"byte_end":327495,"line_start":217,"line_end":217,"column_start":8,"column_end":11},"name":"fmt","qualname":"<SpanId as std::fmt::LowerHex>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10123},"children":[],"decl_id":{"krate":2,"index":10124},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3050},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":328071,"byte_end":328081,"line_start":231,"line_end":231,"column_start":12,"column_end":22},"name":"TraceState","qualname":"::trace::span_context::TraceState","value":"","parent":null,"children":[],"decl_id":null,"docs":" TraceState carries system-specific configuration data, represented as a list\n of key-value pairs. TraceState allows multiple tracing systems to\n participate in the same trace.","sig":null,"attributes":[{"value":"/ TraceState carries system-specific configuration data, represented as a list","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327596,"byte_end":327676,"line_start":222,"line_end":222,"column_start":1,"column_end":81}},{"value":"/ of key-value pairs. TraceState allows multiple tracing systems to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327677,"byte_end":327746,"line_start":223,"line_end":223,"column_start":1,"column_end":70}},{"value":"/ participate in the same trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327747,"byte_end":327781,"line_start":224,"line_end":224,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327782,"byte_end":327785,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Please review the [W3C specification] for details on this field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327786,"byte_end":327854,"line_start":226,"line_end":226,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327855,"byte_end":327858,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ [W3C specification]: https://www.w3.org/TR/trace-context/#tracestate-header","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327859,"byte_end":327938,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":330107,"byte_end":330121,"line_start":290,"line_end":290,"column_start":12,"column_end":26},"name":"from_key_value","qualname":"<TraceState>::from_key_value","value":"fn from_key_value<T, K, V>(T) -> Result<Self, TraceStateError> where\nT: IntoIterator<Item = (K, V)>, K: ToString, V: ToString","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` from the given key-value collection.","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` from the given key-value collection.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329605,"byte_end":329672,"line_start":277,"line_end":277,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329677,"byte_end":329680,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329685,"byte_end":329699,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329704,"byte_end":329707,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329712,"byte_end":329719,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::trace::{TraceState, TraceStateError};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329724,"byte_end":329784,"line_start":282,"line_end":282,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329789,"byte_end":329792,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let kvs = vec![(\"foo\", \"bar\"), (\"apple\", \"banana\")];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329797,"byte_end":329853,"line_start":284,"line_end":284,"column_start":5,"column_end":61}},{"value":"/ let trace_state: Result<TraceState, TraceStateError> = TraceState::from_key_value(kvs);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329858,"byte_end":329949,"line_start":285,"line_end":285,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329954,"byte_end":329957,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ assert!(trace_state.is_ok());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":329962,"byte_end":329995,"line_start":287,"line_end":287,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(trace_state.unwrap().header(), String::from(\"foo=bar,apple=banana\"))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":330000,"byte_end":330083,"line_start":288,"line_end":288,"column_start":5,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":330088,"byte_end":330095,"line_start":289,"line_end":289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331096,"byte_end":331099,"line_start":319,"line_end":319,"column_start":12,"column_end":15},"name":"get","qualname":"<TraceState>::get","value":"fn get(&Self, &str) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a value for a given key from the `TraceState` if it exists.\n","sig":null,"attributes":[{"value":"/ Retrieves a value for a given key from the `TraceState` if it exists.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331011,"byte_end":331084,"line_start":318,"line_end":318,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331836,"byte_end":331842,"line_start":337,"line_end":337,"column_start":12,"column_end":18},"name":"insert","qualname":"<TraceState>::insert","value":"fn insert<K, V>(&Self, K, V) -> Result<TraceState, TraceStateError> where\nK: Into<String>, V: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Inserts the given key-value pair into the `TraceState`. If a value already exists for the\n given key, this updates the value and updates the value's position. If the key or value are\n invalid per the [W3 Spec] an `Err` is returned, else a new `TraceState` with the\n updated key/value is returned.","sig":null,"attributes":[{"value":"/ Inserts the given key-value pair into the `TraceState`. If a value already exists for the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331409,"byte_end":331502,"line_start":331,"line_end":331,"column_start":5,"column_end":98}},{"value":"/ given key, this updates the value and updates the value's position. If the key or value are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331507,"byte_end":331602,"line_start":332,"line_end":332,"column_start":5,"column_end":100}},{"value":"/ invalid per the [W3 Spec] an `Err` is returned, else a new `TraceState` with the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331607,"byte_end":331691,"line_start":333,"line_end":333,"column_start":5,"column_end":89}},{"value":"/ updated key/value is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331696,"byte_end":331730,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331735,"byte_end":331738,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ [W3 Spec]: https://www.w3.org/TR/trace-context/#mutating-the-tracestate-field","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":331743,"byte_end":331824,"line_start":336,"line_end":336,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332906,"byte_end":332912,"line_start":365,"line_end":365,"column_start":12,"column_end":18},"name":"delete","qualname":"<TraceState>::delete","value":"fn delete<K>(&Self, K) -> Result<TraceState, TraceStateError> where\nK: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Removes the given key-value pair from the `TraceState`. If the key is invalid per the\n [W3 Spec] an `Err` is returned. Else, a new `TraceState`\n with the removed entry is returned.","sig":null,"attributes":[{"value":"/ Removes the given key-value pair from the `TraceState`. If the key is invalid per the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332496,"byte_end":332585,"line_start":358,"line_end":358,"column_start":5,"column_end":94}},{"value":"/ [W3 Spec] an `Err` is returned. Else, a new `TraceState`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332590,"byte_end":332650,"line_start":359,"line_end":359,"column_start":5,"column_end":65}},{"value":"/ with the removed entry is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332655,"byte_end":332694,"line_start":360,"line_end":360,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332699,"byte_end":332702,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ If the key is not in `TraceState`. The original `TraceState` will be cloned and returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332707,"byte_end":332800,"line_start":362,"line_end":362,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332805,"byte_end":332808,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ [W3 Spec]: https://www.w3.org/TR/trace-context/#mutating-the-tracestate-field","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":332813,"byte_end":332894,"line_start":364,"line_end":364,"column_start":5,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":333684,"byte_end":333690,"line_start":387,"line_end":387,"column_start":12,"column_end":18},"name":"header","qualname":"<TraceState>::header","value":"fn header(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` header string, delimiting each key and value with a `=` and each\n entry with a `,`.\n","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` header string, delimiting each key and value with a `=` and each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":333551,"byte_end":333646,"line_start":385,"line_end":385,"column_start":5,"column_end":100}},{"value":"/ entry with a `,`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":333651,"byte_end":333672,"line_start":386,"line_end":386,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":333874,"byte_end":333890,"line_start":392,"line_end":392,"column_start":12,"column_end":28},"name":"header_delimited","qualname":"<TraceState>::header_delimited","value":"fn header_delimited(&Self, &str, &str) -> String","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `TraceState` header string, with the given key/value delimiter and entry delimiter.\n","sig":null,"attributes":[{"value":"/ Creates a new `TraceState` header string, with the given key/value delimiter and entry delimiter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":333761,"byte_end":333862,"line_start":391,"line_end":391,"column_start":5,"column_end":106}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":334347,"byte_end":334355,"line_start":408,"line_end":408,"column_start":8,"column_end":16},"name":"from_str","qualname":"<TraceState as std::str::FromStr>::from_str","value":"fn from_str(&str) -> Result<Self, Self::Err>","parent":{"krate":2,"index":12767},"children":[],"decl_id":{"krate":2,"index":12769},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3082},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335431,"byte_end":335441,"line_start":433,"line_end":433,"column_start":5,"column_end":15},"name":"InvalidKey","qualname":"::trace::span_context::TraceStateError::InvalidKey","value":"TraceStateError::InvalidKey(String)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":" The key is invalid. See <https://www.w3.org/TR/trace-context/#key> for requirement for keys.\n","sig":null,"attributes":[{"value":"/ The key is invalid. See <https://www.w3.org/TR/trace-context/#key> for requirement for keys.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335214,"byte_end":335310,"line_start":431,"line_end":431,"column_start":5,"column_end":101}},{"value":"error(\"{0} is not a valid key in TraceState, see https://www.w3.org/TR/trace-context/#key for more details\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335315,"byte_end":335426,"line_start":432,"line_end":432,"column_start":5,"column_end":116}}]},{"kind":"Field","id":{"krate":0,"index":3084},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335442,"byte_end":335448,"line_start":433,"line_end":433,"column_start":16,"column_end":22},"name":"0","qualname":"::trace::span_context::TraceStateError::InvalidKey::0","value":"std::string::String","parent":{"krate":0,"index":3082},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3085},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335683,"byte_end":335695,"line_start":437,"line_end":437,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::trace::span_context::TraceStateError::InvalidValue","value":"TraceStateError::InvalidValue(String)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":" The value is invalid. See <https://www.w3.org/TR/trace-context/#value> for requirement for values.\n","sig":null,"attributes":[{"value":"/ The value is invalid. See <https://www.w3.org/TR/trace-context/#value> for requirement for values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335456,"byte_end":335558,"line_start":435,"line_end":435,"column_start":5,"column_end":107}},{"value":"error(\"{0} is not a valid value in TraceState, see https://www.w3.org/TR/trace-context/#value for more details\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335563,"byte_end":335678,"line_start":436,"line_end":436,"column_start":5,"column_end":120}}]},{"kind":"Field","id":{"krate":0,"index":3087},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335696,"byte_end":335702,"line_start":437,"line_end":437,"column_start":18,"column_end":24},"name":"0","qualname":"::trace::span_context::TraceStateError::InvalidValue::0","value":"std::string::String","parent":{"krate":0,"index":3085},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3088},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335947,"byte_end":335958,"line_start":441,"line_end":441,"column_start":5,"column_end":16},"name":"InvalidList","qualname":"::trace::span_context::TraceStateError::InvalidList","value":"TraceStateError::InvalidList(String)","parent":{"krate":0,"index":3069},"children":[],"decl_id":null,"docs":" The value is invalid. See <https://www.w3.org/TR/trace-context/#list> for requirement for list members.\n","sig":null,"attributes":[{"value":"/ The value is invalid. See <https://www.w3.org/TR/trace-context/#list> for requirement for list members.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335710,"byte_end":335817,"line_start":439,"line_end":439,"column_start":5,"column_end":112}},{"value":"error(\"{0} is not a valid list member in TraceState, see https://www.w3.org/TR/trace-context/#list for more details\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335822,"byte_end":335942,"line_start":440,"line_end":440,"column_start":5,"column_end":125}}]},{"kind":"Field","id":{"krate":0,"index":3090},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335959,"byte_end":335965,"line_start":441,"line_end":441,"column_start":17,"column_end":23},"name":"0","qualname":"::trace::span_context::TraceStateError::InvalidList::0","value":"std::string::String","parent":{"krate":0,"index":3088},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3069},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335192,"byte_end":335207,"line_start":430,"line_end":430,"column_start":10,"column_end":25},"name":"TraceStateError","qualname":"::trace::span_context::TraceStateError","value":"enum TraceStateError {\n    InvalidKey(String),\n    InvalidValue(String),\n    InvalidList(String),\n}","parent":null,"children":[{"krate":0,"index":3082},{"krate":0,"index":3085},{"krate":0,"index":3088}],"decl_id":null,"docs":" Error returned by `TraceState` operations.\n","sig":null,"attributes":[{"value":"/ Error returned by `TraceState` operations.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335094,"byte_end":335140,"line_start":427,"line_end":427,"column_start":1,"column_end":47}},{"value":"non_exhaustive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335165,"byte_end":335182,"line_start":429,"line_end":429,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":3091},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336289,"byte_end":336300,"line_start":450,"line_end":450,"column_start":12,"column_end":23},"name":"SpanContext","qualname":"::trace::span_context::SpanContext","value":"SpanContext {  }","parent":null,"children":[{"krate":0,"index":3092},{"krate":0,"index":3093},{"krate":0,"index":3094},{"krate":0,"index":3095},{"krate":0,"index":3096}],"decl_id":null,"docs":" Immutable portion of a `Span` which can be serialized and propagated.","sig":null,"attributes":[{"value":"/ Immutable portion of a `Span` which can be serialized and propagated.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":335971,"byte_end":336044,"line_start":444,"line_end":444,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336045,"byte_end":336048,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ Spans that do not have the `sampled` flag set in their [`TraceFlags`] will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336049,"byte_end":336127,"line_start":446,"line_end":446,"column_start":1,"column_end":79}},{"value":"/ be ignored by most tracing tools.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336128,"byte_end":336165,"line_start":447,"line_end":447,"column_start":1,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336504,"byte_end":336517,"line_start":460,"line_end":460,"column_start":12,"column_end":25},"name":"empty_context","qualname":"<SpanContext>::empty_context","value":"fn empty_context() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an invalid empty span context\n","sig":null,"attributes":[{"value":"/ Create an invalid empty span context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336452,"byte_end":336492,"line_start":459,"line_end":459,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336770,"byte_end":336773,"line_start":471,"line_end":471,"column_start":12,"column_end":15},"name":"new","qualname":"<SpanContext>::new","value":"fn new(TraceId, SpanId, TraceFlags, bool, TraceState) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `SpanContext`\n","sig":null,"attributes":[{"value":"/ Construct a new `SpanContext`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336725,"byte_end":336758,"line_start":470,"line_end":470,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2013},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337155,"byte_end":337163,"line_start":488,"line_end":488,"column_start":12,"column_end":20},"name":"trace_id","qualname":"<SpanContext>::trace_id","value":"fn trace_id(&Self) -> TraceId","parent":null,"children":[],"decl_id":null,"docs":" A valid trace identifier is a non-zero `u128`.\n","sig":null,"attributes":[{"value":"/ A valid trace identifier is a non-zero `u128`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337093,"byte_end":337143,"line_start":487,"line_end":487,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337277,"byte_end":337284,"line_start":493,"line_end":493,"column_start":12,"column_end":19},"name":"span_id","qualname":"<SpanContext>::span_id","value":"fn span_id(&Self) -> SpanId","parent":null,"children":[],"decl_id":null,"docs":" A valid span identifier is a non-zero `u64`.\n","sig":null,"attributes":[{"value":"/ A valid span identifier is a non-zero `u64`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337217,"byte_end":337265,"line_start":492,"line_end":492,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337507,"byte_end":337518,"line_start":499,"line_end":499,"column_start":12,"column_end":23},"name":"trace_flags","qualname":"<SpanContext>::trace_flags","value":"fn trace_flags(&Self) -> TraceFlags","parent":null,"children":[],"decl_id":null,"docs":" Returns details about the trace. Unlike `TraceState` values, these are\n present in all traces. Currently, the only option is a boolean sampled flag.\n","sig":null,"attributes":[{"value":"/ Returns details about the trace. Unlike `TraceState` values, these are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337336,"byte_end":337410,"line_start":497,"line_end":497,"column_start":5,"column_end":79}},{"value":"/ present in all traces. Currently, the only option is a boolean sampled flag.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337415,"byte_end":337495,"line_start":498,"line_end":498,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337724,"byte_end":337732,"line_start":505,"line_end":505,"column_start":12,"column_end":20},"name":"is_valid","qualname":"<SpanContext>::is_valid","value":"fn is_valid(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns a bool flag which is true if the `SpanContext` has a valid (non-zero) `trace_id`\n and a valid (non-zero) `span_id`.\n","sig":null,"attributes":[{"value":"/ Returns a bool flag which is true if the `SpanContext` has a valid (non-zero) `trace_id`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337578,"byte_end":337670,"line_start":503,"line_end":503,"column_start":5,"column_end":97}},{"value":"/ and a valid (non-zero) `span_id`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337675,"byte_end":337712,"line_start":504,"line_end":504,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337899,"byte_end":337908,"line_start":510,"line_end":510,"column_start":12,"column_end":21},"name":"is_remote","qualname":"<SpanContext>::is_remote","value":"fn is_remote(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `SpanContext` was propagated from a remote parent.\n","sig":null,"attributes":[{"value":"/ Returns true if the `SpanContext` was propagated from a remote parent.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337813,"byte_end":337887,"line_start":509,"line_end":509,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":338108,"byte_end":338118,"line_start":517,"line_end":517,"column_start":12,"column_end":22},"name":"is_sampled","qualname":"<SpanContext>::is_sampled","value":"fn is_sampled(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `sampled` trace flag is set.","sig":null,"attributes":[{"value":"/ Returns `true` if the `sampled` trace flag is set.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":337960,"byte_end":338014,"line_start":514,"line_end":514,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":338019,"byte_end":338022,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Spans that are not sampled will be ignored by most tracing tools.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":338027,"byte_end":338096,"line_start":516,"line_end":516,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":338236,"byte_end":338247,"line_start":522,"line_end":522,"column_start":12,"column_end":23},"name":"trace_state","qualname":"<SpanContext>::trace_state","value":"fn trace_state(&Self) -> &TraceState","parent":null,"children":[],"decl_id":null,"docs":" Returns the context's `TraceState`.\n","sig":null,"attributes":[{"value":"/ Returns the context's `TraceState`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":338185,"byte_end":338224,"line_start":521,"line_end":521,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":2062},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347741,"byte_end":347747,"line_start":156,"line_end":156,"column_start":11,"column_end":17},"name":"Tracer","qualname":"::trace::tracer::Tracer","value":"Tracer","parent":null,"children":[{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2066},{"krate":0,"index":2068},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2075}],"decl_id":null,"docs":" Interface for constructing `Span`s.","sig":null,"attributes":[{"value":"/ Interface for constructing `Span`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342663,"byte_end":342702,"line_start":9,"line_end":9,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342703,"byte_end":342706,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The OpenTelemetry library achieves in-process context propagation of `Span`s","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342707,"byte_end":342787,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ by way of the `Tracer`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342788,"byte_end":342815,"line_start":12,"line_end":12,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342816,"byte_end":342819,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` is responsible for tracking the currently active `Span`, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342820,"byte_end":342897,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ exposes methods for creating and activating new `Spans`. The `Tracer` is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342898,"byte_end":342974,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ configured with `Propagators` which support transferring span context across","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":342975,"byte_end":343055,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ process boundaries.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343056,"byte_end":343079,"line_start":17,"line_end":17,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343080,"byte_end":343083,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ `Tracer`s are generally expected to be used as singletons. Implementations","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343084,"byte_end":343162,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ SHOULD provide a single global default Tracer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343163,"byte_end":343213,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343214,"byte_end":343217,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Some applications may require multiple `Tracer` instances, e.g. to create","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343218,"byte_end":343295,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ `Span`s on behalf of other applications. Implementations MAY provide a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343296,"byte_end":343370,"line_start":23,"line_end":23,"column_start":1,"column_end":75}},{"value":"/ global registry of Tracers for such applications.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343371,"byte_end":343424,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343425,"byte_end":343428,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `Tracer` SHOULD allow end users to configure other tracing components","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343429,"byte_end":343506,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ that control how `Span`s are passed across process boundaries, including the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343507,"byte_end":343587,"line_start":27,"line_end":27,"column_start":1,"column_end":81}},{"value":"/ binary and text format `Propagator`s used to serialize `Span`s created by","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343588,"byte_end":343665,"line_start":28,"line_end":28,"column_start":1,"column_end":78}},{"value":"/ the `Tracer`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343666,"byte_end":343683,"line_start":29,"line_end":29,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343684,"byte_end":343687,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## In Synchronous Code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343688,"byte_end":343714,"line_start":31,"line_end":31,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343715,"byte_end":343718,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Spans can be created and nested manually:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343719,"byte_end":343764,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343765,"byte_end":343768,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343769,"byte_end":343776,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, TraceContextExt}, Context};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343777,"byte_end":343858,"line_start":36,"line_end":36,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343859,"byte_end":343862,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343863,"byte_end":343911,"line_start":38,"line_end":38,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343912,"byte_end":343915,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ let parent = tracer.start(\"foo\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343916,"byte_end":343953,"line_start":40,"line_end":40,"column_start":1,"column_end":38}},{"value":"/ let parent_cx = Context::current_with_span(parent);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":343954,"byte_end":344009,"line_start":41,"line_end":41,"column_start":1,"column_end":56}},{"value":"/ let mut child = tracer.span_builder(\"bar\").start_with_context(&tracer, &parent_cx);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344010,"byte_end":344097,"line_start":42,"line_end":42,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344098,"byte_end":344101,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344102,"byte_end":344112,"line_start":44,"line_end":44,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344113,"byte_end":344116,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ child.end();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344117,"byte_end":344133,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ drop(parent_cx) // end parent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344134,"byte_end":344167,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344168,"byte_end":344175,"line_start":48,"line_end":48,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344176,"byte_end":344179,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Spans can also use the current thread's [`Context`] to track which span is active:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344180,"byte_end":344266,"line_start":50,"line_end":50,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344267,"byte_end":344270,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344271,"byte_end":344278,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{SpanKind, Tracer}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344279,"byte_end":344338,"line_start":53,"line_end":53,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344339,"byte_end":344342,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344343,"byte_end":344391,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344392,"byte_end":344395,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // Create simple spans with `in_span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344396,"byte_end":344437,"line_start":57,"line_end":57,"column_start":1,"column_end":42}},{"value":"/ tracer.in_span(\"foo\", |_foo_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344438,"byte_end":344475,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/     // parent span is active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344476,"byte_end":344508,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/     tracer.in_span(\"bar\", |_bar_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344509,"byte_end":344550,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/         // child span is now the active span and associated with the parent span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344551,"byte_end":344635,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344636,"byte_end":344647,"line_start":62,"line_end":62,"column_start":1,"column_end":12}},{"value":"/     // child has ended, parent now the active span again","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344648,"byte_end":344708,"line_start":63,"line_end":63,"column_start":1,"column_end":61}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344709,"byte_end":344716,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ // parent has ended, no active spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344717,"byte_end":344757,"line_start":65,"line_end":65,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344758,"byte_end":344761,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // -- OR --","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344762,"byte_end":344777,"line_start":67,"line_end":67,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344778,"byte_end":344781,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // create complex spans with span builder and `with_span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344782,"byte_end":344843,"line_start":69,"line_end":69,"column_start":1,"column_end":62}},{"value":"/ let parent_span = tracer.span_builder(\"foo\").with_kind(SpanKind::Server).start(&tracer);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344844,"byte_end":344936,"line_start":70,"line_end":70,"column_start":1,"column_end":93}},{"value":"/ tracer.with_span(parent_span, |_foo_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344937,"byte_end":344982,"line_start":71,"line_end":71,"column_start":1,"column_end":46}},{"value":"/     // parent span is active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":344983,"byte_end":345015,"line_start":72,"line_end":72,"column_start":1,"column_end":33}},{"value":"/     let child_span = tracer.span_builder(\"bar\").with_kind(SpanKind::Client).start(&tracer);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345016,"byte_end":345111,"line_start":73,"line_end":73,"column_start":1,"column_end":96}},{"value":"/     tracer.with_span(child_span, |_bar_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345112,"byte_end":345160,"line_start":74,"line_end":74,"column_start":1,"column_end":49}},{"value":"/         // child span is now the active span and associated with the parent span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345161,"byte_end":345245,"line_start":75,"line_end":75,"column_start":1,"column_end":85}},{"value":"/     });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345246,"byte_end":345257,"line_start":76,"line_end":76,"column_start":1,"column_end":12}},{"value":"/     // child has ended, parent now the active span again","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345258,"byte_end":345318,"line_start":77,"line_end":77,"column_start":1,"column_end":61}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345319,"byte_end":345326,"line_start":78,"line_end":78,"column_start":1,"column_end":8}},{"value":"/ // parent has ended, no active spans","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345327,"byte_end":345367,"line_start":79,"line_end":79,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345368,"byte_end":345375,"line_start":80,"line_end":80,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345376,"byte_end":345379,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ Spans can also be marked as active, and the resulting guard allows for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345380,"byte_end":345454,"line_start":82,"line_end":82,"column_start":1,"column_end":75}},{"value":"/ greater control over when the span is no longer considered active.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345455,"byte_end":345525,"line_start":83,"line_end":83,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345526,"byte_end":345529,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345530,"byte_end":345537,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, mark_span_as_active}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345538,"byte_end":345614,"line_start":86,"line_end":86,"column_start":1,"column_end":77}},{"value":"/ let tracer = global::tracer(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345615,"byte_end":345663,"line_start":87,"line_end":87,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345664,"byte_end":345667,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ let parent_span = tracer.start(\"foo\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345668,"byte_end":345710,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"/ let parent_active = mark_span_as_active(parent_span);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345711,"byte_end":345768,"line_start":90,"line_end":90,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345769,"byte_end":345772,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345773,"byte_end":345778,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/     let child = tracer.start(\"bar\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345779,"byte_end":345819,"line_start":93,"line_end":93,"column_start":1,"column_end":41}},{"value":"/     let _child_active = mark_span_as_active(child);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345820,"byte_end":345875,"line_start":94,"line_end":94,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345876,"byte_end":345879,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/     // do work in the context of the child span...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345880,"byte_end":345934,"line_start":96,"line_end":96,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345935,"byte_end":345938,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/     // exiting the scope drops the guard, child is no longer active","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":345939,"byte_end":346010,"line_start":98,"line_end":98,"column_start":1,"column_end":72}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346011,"byte_end":346016,"line_start":99,"line_end":99,"column_start":1,"column_end":6}},{"value":"/ // Parent is active span again","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346017,"byte_end":346051,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346052,"byte_end":346055,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ // Parent can be dropped manually, or allowed to go out of scope as well.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346056,"byte_end":346133,"line_start":102,"line_end":102,"column_start":1,"column_end":78}},{"value":"/ drop(parent_active);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346134,"byte_end":346158,"line_start":103,"line_end":103,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346159,"byte_end":346162,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ // no active span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346163,"byte_end":346184,"line_start":105,"line_end":105,"column_start":1,"column_end":22}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346185,"byte_end":346192,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346193,"byte_end":346196,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ ## In Asynchronous Code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346197,"byte_end":346224,"line_start":108,"line_end":108,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346225,"byte_end":346228,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ If you are instrumenting code that make use of [`std::future::Future`] or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346229,"byte_end":346306,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ async/await, be sure to use the [`FutureExt`] trait. This is needed because","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346307,"byte_end":346386,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/ the following example _will not_ work:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346387,"byte_end":346429,"line_start":112,"line_end":112,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346430,"byte_end":346433,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346434,"byte_end":346447,"line_start":114,"line_end":114,"column_start":1,"column_end":14}},{"value":"/ # use opentelemetry::{global, trace::{Tracer, mark_span_as_active}};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346448,"byte_end":346520,"line_start":115,"line_end":115,"column_start":1,"column_end":73}},{"value":"/ # let tracer = global::tracer(\"foo\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346521,"byte_end":346562,"line_start":116,"line_end":116,"column_start":1,"column_end":42}},{"value":"/ # let span = tracer.start(\"foo-span\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346563,"byte_end":346605,"line_start":117,"line_end":117,"column_start":1,"column_end":43}},{"value":"/ async {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346606,"byte_end":346617,"line_start":118,"line_end":118,"column_start":1,"column_end":12}},{"value":"/     // Does not work","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346618,"byte_end":346642,"line_start":119,"line_end":119,"column_start":1,"column_end":25}},{"value":"/     let _g = mark_span_as_active(span);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346643,"byte_end":346686,"line_start":120,"line_end":120,"column_start":1,"column_end":44}},{"value":"/     // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346687,"byte_end":346701,"line_start":121,"line_end":121,"column_start":1,"column_end":15}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346702,"byte_end":346708,"line_start":122,"line_end":122,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346709,"byte_end":346716,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346717,"byte_end":346720,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ The context guard `_g` will not exit until the future generated by the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346721,"byte_end":346795,"line_start":125,"line_end":125,"column_start":1,"column_end":75}},{"value":"/ `async` block is complete. Since futures can be entered and exited","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346796,"byte_end":346866,"line_start":126,"line_end":126,"column_start":1,"column_end":71}},{"value":"/ _multiple_ times without them completing, the span remains active for as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346867,"byte_end":346943,"line_start":127,"line_end":127,"column_start":1,"column_end":77}},{"value":"/ long as the future exists, rather than only when it is polled, leading to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":346944,"byte_end":347021,"line_start":128,"line_end":128,"column_start":1,"column_end":78}},{"value":"/ very confusing and incorrect output.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347022,"byte_end":347062,"line_start":129,"line_end":129,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347063,"byte_end":347066,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ In order to trace asynchronous code, the [`Future::with_context`] combinator","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347067,"byte_end":347147,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"/ can be used:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347148,"byte_end":347164,"line_start":132,"line_end":132,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347165,"byte_end":347168,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347169,"byte_end":347176,"line_start":134,"line_end":134,"column_start":1,"column_end":8}},{"value":"/ # async fn run() -> Result<(), ()> {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347177,"byte_end":347217,"line_start":135,"line_end":135,"column_start":1,"column_end":41}},{"value":"/ use opentelemetry::{trace::FutureExt, Context};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347218,"byte_end":347269,"line_start":136,"line_end":136,"column_start":1,"column_end":52}},{"value":"/ let cx = Context::current();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347270,"byte_end":347302,"line_start":137,"line_end":137,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347303,"byte_end":347306,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ let my_future = async {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347307,"byte_end":347334,"line_start":139,"line_end":139,"column_start":1,"column_end":28}},{"value":"/     // ...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347335,"byte_end":347349,"line_start":140,"line_end":140,"column_start":1,"column_end":15}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347350,"byte_end":347356,"line_start":141,"line_end":141,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347357,"byte_end":347360,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ my_future","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347361,"byte_end":347374,"line_start":143,"line_end":143,"column_start":1,"column_end":14}},{"value":"/     .with_context(cx)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347375,"byte_end":347400,"line_start":144,"line_end":144,"column_start":1,"column_end":26}},{"value":"/     .await;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347401,"byte_end":347416,"line_start":145,"line_end":145,"column_start":1,"column_end":16}},{"value":"/ # Ok(())","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347417,"byte_end":347429,"line_start":146,"line_end":146,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347430,"byte_end":347437,"line_start":147,"line_end":147,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347438,"byte_end":347445,"line_start":148,"line_end":148,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347446,"byte_end":347449,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ [`Future::with_context`] attaches a context to the future, ensuring that the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347450,"byte_end":347530,"line_start":150,"line_end":150,"column_start":1,"column_end":81}},{"value":"/ context's lifetime is as long as the future's.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347531,"byte_end":347581,"line_start":151,"line_end":151,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347582,"byte_end":347585,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ [`FutureExt`]: crate::trace::FutureExt","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347586,"byte_end":347628,"line_start":153,"line_end":153,"column_start":1,"column_end":43}},{"value":"/ [`Future::with_context`]: crate::trace::FutureExt::with_context()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347629,"byte_end":347698,"line_start":154,"line_end":154,"column_start":1,"column_end":70}},{"value":"/ [`Context`]: crate::Context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347699,"byte_end":347730,"line_start":155,"line_end":155,"column_start":1,"column_end":32}}]},{"kind":"Type","id":{"krate":0,"index":2063},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347806,"byte_end":347810,"line_start":158,"line_end":158,"column_start":10,"column_end":14},"name":"Span","qualname":"::trace::tracer::Tracer::Span","value":"type Span: Span;","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" The `Span` type used by this `Tracer`.\n","sig":null,"attributes":[{"value":"/ The `Span` type used by this `Tracer`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347754,"byte_end":347796,"line_start":157,"line_end":157,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":2064},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349209,"byte_end":349214,"line_start":183,"line_end":183,"column_start":8,"column_end":13},"name":"start","qualname":"::trace::tracer::Tracer::start","value":"fn start<T>(&Self, T) -> Self::Span where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Starts a new `Span`.","sig":null,"attributes":[{"value":"/ Starts a new `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347823,"byte_end":347847,"line_start":160,"line_end":160,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347852,"byte_end":347855,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ By default the currently active `Span` is set as the new `Span`'s","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347860,"byte_end":347929,"line_start":162,"line_end":162,"column_start":5,"column_end":74}},{"value":"/ parent. The `Tracer` MAY provide other default options for newly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":347934,"byte_end":348002,"line_start":163,"line_end":163,"column_start":5,"column_end":73}},{"value":"/ created `Span`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348007,"byte_end":348027,"line_start":164,"line_end":164,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348032,"byte_end":348035,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ `Span` creation MUST NOT set the newly created `Span` as the currently","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348040,"byte_end":348114,"line_start":166,"line_end":166,"column_start":5,"column_end":79}},{"value":"/ active `Span` by default, but this functionality MAY be offered additionally","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348119,"byte_end":348199,"line_start":167,"line_end":167,"column_start":5,"column_end":85}},{"value":"/ as a separate operation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348204,"byte_end":348232,"line_start":168,"line_end":168,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348237,"byte_end":348240,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348245,"byte_end":348323,"line_start":170,"line_end":170,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348328,"byte_end":348406,"line_start":171,"line_end":171,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348411,"byte_end":348491,"line_start":172,"line_end":172,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348496,"byte_end":348576,"line_start":173,"line_end":173,"column_start":5,"column_end":85}},{"value":"/ spans in the trace. Implementations MUST provide an option to create a `Span` as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348581,"byte_end":348665,"line_start":174,"line_end":174,"column_start":5,"column_end":89}},{"value":"/ a root span, and MUST generate a new `TraceId` for each root span created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348670,"byte_end":348748,"line_start":175,"line_end":175,"column_start":5,"column_end":83}},{"value":"/ For a Span with a parent, the `TraceId` MUST be the same as the parent.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348753,"byte_end":348828,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ Also, the child span MUST inherit all `TraceState` values of its parent by default.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348833,"byte_end":348920,"line_start":177,"line_end":177,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348925,"byte_end":348928,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ A `Span` is said to have a _remote parent_ if it is the child of a `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":348933,"byte_end":349010,"line_start":179,"line_end":179,"column_start":5,"column_end":82}},{"value":"/ created in another process. Each propagators' deserialization must set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349015,"byte_end":349089,"line_start":180,"line_end":180,"column_start":5,"column_end":79}},{"value":"/ `is_remote` to true on a parent `SpanContext` so `Span` creation knows if the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349094,"byte_end":349175,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/ parent is remote.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349180,"byte_end":349201,"line_start":182,"line_end":182,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2066},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350776,"byte_end":350794,"line_start":213,"line_end":213,"column_start":8,"column_end":26},"name":"start_with_context","qualname":"::trace::tracer::Tracer::start_with_context","value":"fn start_with_context<T>(&Self, T, &Context) -> Self::Span where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Starts a new `Span` with a given context","sig":null,"attributes":[{"value":"/ Starts a new `Span` with a given context","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349370,"byte_end":349414,"line_start":190,"line_end":190,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349419,"byte_end":349422,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ By default the currently active `Span` is set as the new `Span`'s","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349427,"byte_end":349496,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/ parent. The `Tracer` MAY provide other default options for newly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349501,"byte_end":349569,"line_start":193,"line_end":193,"column_start":5,"column_end":73}},{"value":"/ created `Span`s.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349574,"byte_end":349594,"line_start":194,"line_end":194,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349599,"byte_end":349602,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ `Span` creation MUST NOT set the newly created `Span` as the currently","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349607,"byte_end":349681,"line_start":196,"line_end":196,"column_start":5,"column_end":79}},{"value":"/ active `Span` by default, but this functionality MAY be offered additionally","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349686,"byte_end":349766,"line_start":197,"line_end":197,"column_start":5,"column_end":85}},{"value":"/ as a separate operation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349771,"byte_end":349799,"line_start":198,"line_end":198,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349804,"byte_end":349807,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ Each span has zero or one parent spans and zero or more child spans, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349812,"byte_end":349890,"line_start":200,"line_end":200,"column_start":5,"column_end":83}},{"value":"/ represent causally related operations. A tree of related spans comprises a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349895,"byte_end":349973,"line_start":201,"line_end":201,"column_start":5,"column_end":83}},{"value":"/ trace. A span is said to be a _root span_ if it does not have a parent. Each","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":349978,"byte_end":350058,"line_start":202,"line_end":202,"column_start":5,"column_end":85}},{"value":"/ trace includes a single root span, which is the shared ancestor of all other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350063,"byte_end":350143,"line_start":203,"line_end":203,"column_start":5,"column_end":85}},{"value":"/ spans in the trace. Implementations MUST provide an option to create a `Span` as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350148,"byte_end":350232,"line_start":204,"line_end":204,"column_start":5,"column_end":89}},{"value":"/ a root span, and MUST generate a new `TraceId` for each root span created.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350237,"byte_end":350315,"line_start":205,"line_end":205,"column_start":5,"column_end":83}},{"value":"/ For a Span with a parent, the `TraceId` MUST be the same as the parent.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350320,"byte_end":350395,"line_start":206,"line_end":206,"column_start":5,"column_end":80}},{"value":"/ Also, the child span MUST inherit all `TraceState` values of its parent by default.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350400,"byte_end":350487,"line_start":207,"line_end":207,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350492,"byte_end":350495,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ A `Span` is said to have a _remote parent_ if it is the child of a `Span`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350500,"byte_end":350577,"line_start":209,"line_end":209,"column_start":5,"column_end":82}},{"value":"/ created in another process. Each propagators' deserialization must set","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350582,"byte_end":350656,"line_start":210,"line_end":210,"column_start":5,"column_end":79}},{"value":"/ `is_remote` to true on a parent `SpanContext` so `Span` creation knows if the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350661,"byte_end":350742,"line_start":211,"line_end":211,"column_start":5,"column_end":86}},{"value":"/ parent is remote.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350747,"byte_end":350768,"line_start":212,"line_end":212,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2068},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351029,"byte_end":351041,"line_start":220,"line_end":220,"column_start":8,"column_end":20},"name":"span_builder","qualname":"::trace::tracer::Tracer::span_builder","value":"fn span_builder<T>(&Self, T) -> SpanBuilder where T: Into<Cow>","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Creates a span builder","sig":null,"attributes":[{"value":"/ Creates a span builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350900,"byte_end":350926,"line_start":217,"line_end":217,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350931,"byte_end":350934,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ An ergonomic way for attributes to be configured before the `Span` is started.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":350939,"byte_end":351021,"line_start":219,"line_end":219,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2070},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351173,"byte_end":351178,"line_start":225,"line_end":225,"column_start":8,"column_end":13},"name":"build","qualname":"::trace::tracer::Tracer::build","value":"fn build(&Self, SpanBuilder) -> Self::Span","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Create a span from a [SpanBuilder]\n","sig":null,"attributes":[{"value":"/ Create a span from a [SpanBuilder]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351127,"byte_end":351165,"line_start":224,"line_end":224,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2071},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351366,"byte_end":351384,"line_start":230,"line_end":230,"column_start":8,"column_end":26},"name":"build_with_context","qualname":"::trace::tracer::Tracer::build_with_context","value":"fn build_with_context(&Self, SpanBuilder, &Context) -> Self::Span","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Create a span from a [SpanBuilder] with a parent context.\n","sig":null,"attributes":[{"value":"/ Create a span from a [SpanBuilder] with a parent context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351297,"byte_end":351358,"line_start":229,"line_end":229,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2072},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352475,"byte_end":352482,"line_start":259,"line_end":259,"column_start":8,"column_end":15},"name":"in_span","qualname":"::trace::tracer::Tracer::in_span","value":"fn in_span<T, F>(&Self, &'static str, F) -> T where F: FnOnce(Context) -> T,\nSelf::Span: Send + Sync + 'static","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Start a new span and execute the given closure with reference to the span's\n context.","sig":null,"attributes":[{"value":"/ Start a new span and execute the given closure with reference to the span's","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351455,"byte_end":351534,"line_start":232,"line_end":232,"column_start":5,"column_end":84}},{"value":"/ context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351539,"byte_end":351551,"line_start":233,"line_end":233,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351556,"byte_end":351559,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ This method starts a new span and sets it as the active span for the given","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351564,"byte_end":351642,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"/ function. It then executes the body. It closes the span before returning the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351647,"byte_end":351727,"line_start":236,"line_end":236,"column_start":5,"column_end":85}},{"value":"/ execution result.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351732,"byte_end":351753,"line_start":237,"line_end":237,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351758,"byte_end":351761,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351766,"byte_end":351780,"line_start":239,"line_end":239,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351785,"byte_end":351788,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351793,"byte_end":351800,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::{Span, Tracer, get_active_span}, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351805,"byte_end":351887,"line_start":242,"line_end":242,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351892,"byte_end":351895,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ fn my_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351900,"byte_end":351922,"line_start":244,"line_end":244,"column_start":5,"column_end":27}},{"value":"/     // start an active span in one function","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351927,"byte_end":351974,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/     global::tracer(\"my-component\").in_span(\"span-name\", |_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":351979,"byte_end":352046,"line_start":246,"line_end":246,"column_start":5,"column_end":72}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352051,"byte_end":352141,"line_start":247,"line_end":247,"column_start":5,"column_end":95}},{"value":"/         my_other_function();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352146,"byte_end":352178,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352183,"byte_end":352193,"line_start":249,"line_end":249,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352198,"byte_end":352203,"line_start":250,"line_end":250,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352208,"byte_end":352211,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352216,"byte_end":352244,"line_start":252,"line_end":252,"column_start":5,"column_end":33}},{"value":"/     // call methods on the current span from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352249,"byte_end":352297,"line_start":253,"line_end":253,"column_start":5,"column_end":53}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352302,"byte_end":352334,"line_start":254,"line_end":254,"column_start":5,"column_end":37}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352339,"byte_end":352430,"line_start":255,"line_end":255,"column_start":5,"column_end":96}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352435,"byte_end":352445,"line_start":256,"line_end":256,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352450,"byte_end":352455,"line_start":257,"line_end":257,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352460,"byte_end":352467,"line_start":258,"line_end":258,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2075},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354043,"byte_end":354052,"line_start":300,"line_end":300,"column_start":8,"column_end":17},"name":"with_span","qualname":"::trace::tracer::Tracer::with_span","value":"fn with_span<T, F>(&Self, Self::Span, F) -> T where F: FnOnce(Context) -> T,\nSelf::Span: Send + Sync + 'static","parent":{"krate":0,"index":2062},"children":[],"decl_id":null,"docs":" Start a new span and execute the given closure with reference to the span's\n context.","sig":null,"attributes":[{"value":"/ Start a new span and execute the given closure with reference to the span's","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352774,"byte_end":352853,"line_start":270,"line_end":270,"column_start":5,"column_end":84}},{"value":"/ context.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352858,"byte_end":352870,"line_start":271,"line_end":271,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352875,"byte_end":352878,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This method starts a new span and sets it as the active span for the given","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352883,"byte_end":352961,"line_start":273,"line_end":273,"column_start":5,"column_end":83}},{"value":"/ function. It then executes the body. It closes the span before returning the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":352966,"byte_end":353046,"line_start":274,"line_end":274,"column_start":5,"column_end":85}},{"value":"/ execution result.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353051,"byte_end":353072,"line_start":275,"line_end":275,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353077,"byte_end":353080,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353085,"byte_end":353099,"line_start":277,"line_end":277,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353104,"byte_end":353107,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353112,"byte_end":353119,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::{Span, SpanKind, Tracer, get_active_span}, KeyValue};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353124,"byte_end":353216,"line_start":280,"line_end":280,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353221,"byte_end":353224,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ fn my_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353229,"byte_end":353251,"line_start":282,"line_end":282,"column_start":5,"column_end":27}},{"value":"/     let tracer = global::tracer(\"my-component\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353256,"byte_end":353308,"line_start":283,"line_end":283,"column_start":5,"column_end":57}},{"value":"/     // start a span with custom attributes via span builder","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353313,"byte_end":353376,"line_start":284,"line_end":284,"column_start":5,"column_end":68}},{"value":"/     let span = tracer.span_builder(\"span-name\").with_kind(SpanKind::Server).start(&tracer);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353381,"byte_end":353476,"line_start":285,"line_end":285,"column_start":5,"column_end":100}},{"value":"/     // Mark the span as active for the duration of the closure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353481,"byte_end":353547,"line_start":286,"line_end":286,"column_start":5,"column_end":71}},{"value":"/     global::tracer(\"my-component\").with_span(span, |_cx| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353552,"byte_end":353614,"line_start":287,"line_end":287,"column_start":5,"column_end":67}},{"value":"/         // anything happening in functions we call can still access the active span...","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353619,"byte_end":353709,"line_start":288,"line_end":288,"column_start":5,"column_end":95}},{"value":"/         my_other_function();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353714,"byte_end":353746,"line_start":289,"line_end":289,"column_start":5,"column_end":37}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353751,"byte_end":353761,"line_start":290,"line_end":290,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353766,"byte_end":353771,"line_start":291,"line_end":291,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353776,"byte_end":353779,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ fn my_other_function() {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353784,"byte_end":353812,"line_start":293,"line_end":293,"column_start":5,"column_end":33}},{"value":"/     // call methods on the current span from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353817,"byte_end":353865,"line_start":294,"line_end":294,"column_start":5,"column_end":53}},{"value":"/     get_active_span(|span| {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353870,"byte_end":353902,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"/         span.add_event(\"An event!\".to_string(), vec![KeyValue::new(\"happened\", true)]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":353907,"byte_end":353998,"line_start":296,"line_end":296,"column_start":5,"column_end":96}},{"value":"/     })","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354003,"byte_end":354013,"line_start":297,"line_end":297,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354018,"byte_end":354023,"line_start":298,"line_end":298,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354028,"byte_end":354035,"line_start":299,"line_end":299,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":3111},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355035,"byte_end":355046,"line_start":336,"line_end":336,"column_start":12,"column_end":23},"name":"SpanBuilder","qualname":"::trace::tracer::SpanBuilder","value":"SpanBuilder { trace_id, span_id, span_kind, name, start_time, end_time, attributes, events, links, status_code, status_message, sampling_result }","parent":null,"children":[{"krate":0,"index":3112},{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3115},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3118},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3121},{"krate":0,"index":3122},{"krate":0,"index":3123}],"decl_id":null,"docs":" `SpanBuilder` allows span attributes to be configured before the span\n has started.","sig":null,"attributes":[{"value":"/ `SpanBuilder` allows span attributes to be configured before the span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354303,"byte_end":354376,"line_start":311,"line_end":311,"column_start":1,"column_end":74}},{"value":"/ has started.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354377,"byte_end":354393,"line_start":312,"line_end":312,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354394,"byte_end":354397,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354398,"byte_end":354405,"line_start":314,"line_end":314,"column_start":1,"column_end":8}},{"value":"/ use opentelemetry::{","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354406,"byte_end":354430,"line_start":315,"line_end":315,"column_start":1,"column_end":25}},{"value":"/     global,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354431,"byte_end":354446,"line_start":316,"line_end":316,"column_start":1,"column_end":16}},{"value":"/     trace::{TracerProvider, SpanBuilder, SpanKind, Tracer},","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354447,"byte_end":354510,"line_start":317,"line_end":317,"column_start":1,"column_end":64}},{"value":"/ };","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354511,"byte_end":354517,"line_start":318,"line_end":318,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354518,"byte_end":354521,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ let tracer = global::tracer(\"example-tracer\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354522,"byte_end":354572,"line_start":320,"line_end":320,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354573,"byte_end":354576,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ // The builder can be used to create a span directly with the tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354577,"byte_end":354649,"line_start":322,"line_end":322,"column_start":1,"column_end":73}},{"value":"/ let _span = tracer.build(SpanBuilder {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354650,"byte_end":354692,"line_start":323,"line_end":323,"column_start":1,"column_end":43}},{"value":"/     name: \"example-span-name\".into(),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354693,"byte_end":354734,"line_start":324,"line_end":324,"column_start":1,"column_end":42}},{"value":"/     span_kind: Some(SpanKind::Server),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354735,"byte_end":354777,"line_start":325,"line_end":325,"column_start":1,"column_end":43}},{"value":"/     ..Default::default()","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354778,"byte_end":354806,"line_start":326,"line_end":326,"column_start":1,"column_end":29}},{"value":"/ });","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354807,"byte_end":354814,"line_start":327,"line_end":327,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354815,"byte_end":354818,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ // Or used with builder pattern","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354819,"byte_end":354854,"line_start":329,"line_end":329,"column_start":1,"column_end":36}},{"value":"/ let _span = tracer","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354855,"byte_end":354877,"line_start":330,"line_end":330,"column_start":1,"column_end":23}},{"value":"/     .span_builder(\"example-span-name\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354878,"byte_end":354920,"line_start":331,"line_end":331,"column_start":1,"column_end":43}},{"value":"/     .with_kind(SpanKind::Server)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354921,"byte_end":354957,"line_start":332,"line_end":332,"column_start":1,"column_end":37}},{"value":"/     .start(&tracer);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354958,"byte_end":354982,"line_start":333,"line_end":333,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":354983,"byte_end":354990,"line_start":334,"line_end":334,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":3112},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355130,"byte_end":355138,"line_start":338,"line_end":338,"column_start":9,"column_end":17},"name":"trace_id","qualname":"::trace::tracer::SpanBuilder::trace_id","value":"std::option::Option<trace::span_context::TraceId>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Trace id, useful for integrations with external tracing systems.\n","sig":null,"attributes":[{"value":"/ Trace id, useful for integrations with external tracing systems.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355053,"byte_end":355121,"line_start":337,"line_end":337,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":3113},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355237,"byte_end":355244,"line_start":340,"line_end":340,"column_start":9,"column_end":16},"name":"span_id","qualname":"::trace::tracer::SpanBuilder::span_id","value":"std::option::Option<trace::span_context::SpanId>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span id, useful for integrations with external tracing systems.\n","sig":null,"attributes":[{"value":"/ Span id, useful for integrations with external tracing systems.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355161,"byte_end":355228,"line_start":339,"line_end":339,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":3114},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355288,"byte_end":355297,"line_start":342,"line_end":342,"column_start":9,"column_end":18},"name":"span_kind","qualname":"::trace::tracer::SpanBuilder::span_kind","value":"std::option::Option<trace::span::SpanKind>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span kind\n","sig":null,"attributes":[{"value":"/ Span kind","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355266,"byte_end":355279,"line_start":341,"line_end":341,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":3115},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355343,"byte_end":355347,"line_start":344,"line_end":344,"column_start":9,"column_end":13},"name":"name","qualname":"::trace::tracer::SpanBuilder::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span name\n","sig":null,"attributes":[{"value":"/ Span name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355321,"byte_end":355334,"line_start":343,"line_end":343,"column_start":5,"column_end":18}}]},{"kind":"Field","id":{"krate":0,"index":3116},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355400,"byte_end":355410,"line_start":346,"line_end":346,"column_start":9,"column_end":19},"name":"start_time","qualname":"::trace::tracer::SpanBuilder::start_time","value":"std::option::Option<std::time::SystemTime>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span start time\n","sig":null,"attributes":[{"value":"/ Span start time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355372,"byte_end":355391,"line_start":345,"line_end":345,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3117},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355462,"byte_end":355470,"line_start":348,"line_end":348,"column_start":9,"column_end":17},"name":"end_time","qualname":"::trace::tracer::SpanBuilder::end_time","value":"std::option::Option<std::time::SystemTime>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span end time\n","sig":null,"attributes":[{"value":"/ Span end time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355436,"byte_end":355453,"line_start":347,"line_end":347,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":3118},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355524,"byte_end":355534,"line_start":350,"line_end":350,"column_start":9,"column_end":19},"name":"attributes","qualname":"::trace::tracer::SpanBuilder::attributes","value":"std::option::Option<std::vec::Vec<common::KeyValue>>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span attributes\n","sig":null,"attributes":[{"value":"/ Span attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355496,"byte_end":355515,"line_start":349,"line_end":349,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3119},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355587,"byte_end":355593,"line_start":352,"line_end":352,"column_start":9,"column_end":15},"name":"events","qualname":"::trace::tracer::SpanBuilder::events","value":"std::option::Option<std::vec::Vec<trace::Event>>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span events\n","sig":null,"attributes":[{"value":"/ Span events","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355563,"byte_end":355578,"line_start":351,"line_end":351,"column_start":5,"column_end":20}}]},{"kind":"Field","id":{"krate":0,"index":3120},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355642,"byte_end":355647,"line_start":354,"line_end":354,"column_start":9,"column_end":14},"name":"links","qualname":"::trace::tracer::SpanBuilder::links","value":"std::option::Option<std::vec::Vec<trace::Link>>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span Links\n","sig":null,"attributes":[{"value":"/ Span Links","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355619,"byte_end":355633,"line_start":353,"line_end":353,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":3121},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355701,"byte_end":355712,"line_start":356,"line_end":356,"column_start":9,"column_end":20},"name":"status_code","qualname":"::trace::tracer::SpanBuilder::status_code","value":"std::option::Option<trace::span::StatusCode>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span status code\n","sig":null,"attributes":[{"value":"/ Span status code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355672,"byte_end":355692,"line_start":355,"line_end":355,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3122},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355770,"byte_end":355784,"line_start":358,"line_end":358,"column_start":9,"column_end":23},"name":"status_message","qualname":"::trace::tracer::SpanBuilder::status_message","value":"std::option::Option<std::borrow::Cow<'static, str>>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Span status message\n","sig":null,"attributes":[{"value":"/ Span status message","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355738,"byte_end":355761,"line_start":357,"line_end":357,"column_start":5,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":3123},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355845,"byte_end":355860,"line_start":360,"line_end":360,"column_start":9,"column_end":24},"name":"sampling_result","qualname":"::trace::tracer::SpanBuilder::sampling_result","value":"std::option::Option<sdk::trace::sampler::SamplingResult>","parent":{"krate":0,"index":3111},"children":[],"decl_id":null,"docs":" Sampling result\n","sig":null,"attributes":[{"value":"/ Sampling result","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355817,"byte_end":355836,"line_start":359,"line_end":359,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2079},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356006,"byte_end":356015,"line_start":366,"line_end":366,"column_start":12,"column_end":21},"name":"from_name","qualname":"<SpanBuilder>::from_name","value":"fn from_name<T>(T) -> Self where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create a new span builder from a span name\n","sig":null,"attributes":[{"value":"/ Create a new span builder from a span name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355948,"byte_end":355994,"line_start":365,"line_end":365,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2081},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356237,"byte_end":356250,"line_start":374,"line_end":374,"column_start":12,"column_end":25},"name":"with_trace_id","qualname":"<SpanBuilder>::with_trace_id","value":"fn with_trace_id(Self, TraceId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Specify trace id to use if no parent context exists\n","sig":null,"attributes":[{"value":"/ Specify trace id to use if no parent context exists","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356170,"byte_end":356225,"line_start":373,"line_end":373,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2082},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356416,"byte_end":356428,"line_start":382,"line_end":382,"column_start":12,"column_end":24},"name":"with_span_id","qualname":"<SpanBuilder>::with_span_id","value":"fn with_span_id(Self, SpanId) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span id\n","sig":null,"attributes":[{"value":"/ Assign span id","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356386,"byte_end":356404,"line_start":381,"line_end":381,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356592,"byte_end":356601,"line_start":390,"line_end":390,"column_start":12,"column_end":21},"name":"with_kind","qualname":"<SpanBuilder>::with_kind","value":"fn with_kind(Self, SpanKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span kind\n","sig":null,"attributes":[{"value":"/ Assign span kind","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356560,"byte_end":356580,"line_start":389,"line_end":389,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2084},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356779,"byte_end":356794,"line_start":398,"line_end":398,"column_start":12,"column_end":27},"name":"with_start_time","qualname":"<SpanBuilder>::with_start_time","value":"fn with_start_time<T>(Self, T) -> Self where T: Into<SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Assign span start time\n","sig":null,"attributes":[{"value":"/ Assign span start time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356741,"byte_end":356767,"line_start":397,"line_end":397,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2086},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356994,"byte_end":357007,"line_start":406,"line_end":406,"column_start":12,"column_end":25},"name":"with_end_time","qualname":"<SpanBuilder>::with_end_time","value":"fn with_end_time<T>(Self, T) -> Self where T: Into<SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Assign span end time\n","sig":null,"attributes":[{"value":"/ Assign span end time","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":356958,"byte_end":356982,"line_start":405,"line_end":405,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2088},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357203,"byte_end":357218,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"with_attributes","qualname":"<SpanBuilder>::with_attributes","value":"fn with_attributes(Self, Vec<KeyValue>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign span attributes\n","sig":null,"attributes":[{"value":"/ Assign span attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357165,"byte_end":357191,"line_start":413,"line_end":413,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2089},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357395,"byte_end":357406,"line_start":422,"line_end":422,"column_start":12,"column_end":23},"name":"with_events","qualname":"<SpanBuilder>::with_events","value":"fn with_events(Self, Vec<Event>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign events\n","sig":null,"attributes":[{"value":"/ Assign events","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357366,"byte_end":357383,"line_start":421,"line_end":421,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":2090},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357567,"byte_end":357577,"line_start":430,"line_end":430,"column_start":12,"column_end":22},"name":"with_links","qualname":"<SpanBuilder>::with_links","value":"fn with_links(Self, Vec<Link>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign links\n","sig":null,"attributes":[{"value":"/ Assign links","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357539,"byte_end":357555,"line_start":429,"line_end":429,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2092},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357799,"byte_end":357815,"line_start":439,"line_end":439,"column_start":12,"column_end":28},"name":"with_status_code","qualname":"<SpanBuilder>::with_status_code","value":"fn with_status_code(Self, StatusCode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign status code\n","sig":null,"attributes":[{"value":"/ Assign status code","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357765,"byte_end":357787,"line_start":438,"line_end":438,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2093},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357986,"byte_end":358005,"line_start":447,"line_end":447,"column_start":12,"column_end":31},"name":"with_status_message","qualname":"<SpanBuilder>::with_status_message","value":"fn with_status_message<T>(Self, T) -> Self where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Assign status message\n","sig":null,"attributes":[{"value":"/ Assign status message","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":357949,"byte_end":357974,"line_start":446,"line_end":446,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2095},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358212,"byte_end":358232,"line_start":455,"line_end":455,"column_start":12,"column_end":32},"name":"with_sampling_result","qualname":"<SpanBuilder>::with_sampling_result","value":"fn with_sampling_result(Self, sdk::trace::SamplingResult) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Assign sampling result\n","sig":null,"attributes":[{"value":"/ Assign sampling result","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358174,"byte_end":358200,"line_start":454,"line_end":454,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2096},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358484,"byte_end":358489,"line_start":463,"line_end":463,"column_start":12,"column_end":17},"name":"start","qualname":"<SpanBuilder>::start","value":"fn start<T>(Self, &T) -> T::Span where T: Tracer","parent":null,"children":[],"decl_id":null,"docs":" Builds a span with the given tracer from this configuration.\n","sig":null,"attributes":[{"value":"/ Builds a span with the given tracer from this configuration.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358408,"byte_end":358472,"line_start":462,"line_end":462,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2098},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358691,"byte_end":358709,"line_start":468,"line_end":468,"column_start":12,"column_end":30},"name":"start_with_context","qualname":"<SpanBuilder>::start_with_context","value":"fn start_with_context<T>(Self, &T, &Context) -> T::Span where T: Tracer","parent":null,"children":[],"decl_id":null,"docs":" Builds a span with the given tracer from this configuration and parent.\n","sig":null,"attributes":[{"value":"/ Builds a span with the given tracer from this configuration and parent.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":358604,"byte_end":358679,"line_start":467,"line_end":467,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":358958,"byte_end":358972,"line_start":5,"line_end":5,"column_start":11,"column_end":25},"name":"TracerProvider","qualname":"::trace::tracer_provider::TracerProvider","value":"TracerProvider","parent":null,"children":[{"krate":0,"index":2112},{"krate":0,"index":2113},{"krate":0,"index":2115},{"krate":0,"index":2117}],"decl_id":null,"docs":" Types that can create instances of [`Tracer`].\n","sig":null,"attributes":[{"value":"/ Types that can create instances of [`Tracer`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":358897,"byte_end":358947,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359044,"byte_end":359050,"line_start":7,"line_end":7,"column_start":10,"column_end":16},"name":"Tracer","qualname":"::trace::tracer_provider::TracerProvider::Tracer","value":"type Tracer: Tracer;","parent":{"krate":0,"index":2111},"children":[],"decl_id":null,"docs":" The [`Tracer`] type that this provider will return.\n","sig":null,"attributes":[{"value":"/ The [`Tracer`] type that this provider will return.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":358979,"byte_end":359034,"line_start":6,"line_end":6,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359901,"byte_end":359907,"line_start":32,"line_end":32,"column_start":8,"column_end":14},"name":"tracer","qualname":"::trace::tracer_provider::TracerProvider::tracer","value":"fn tracer<impl Into<Cow<'static, str>>>(&Self, impl Into<Cow<'static, str>>)\n-> Self::Tracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":{"krate":0,"index":2111},"children":[],"decl_id":null,"docs":" Returns a new tracer with the given name.","sig":null,"attributes":[{"value":"/ Returns a new tracer with the given name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359065,"byte_end":359110,"line_start":9,"line_end":9,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359115,"byte_end":359118,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ The `name` should be the application name or the name of the library","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359123,"byte_end":359195,"line_start":11,"line_end":11,"column_start":5,"column_end":77}},{"value":"/ providing instrumentation. If the name is empty, then an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359200,"byte_end":359260,"line_start":12,"line_end":12,"column_start":5,"column_end":65}},{"value":"/ implementation-defined default name may be used instead.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359265,"byte_end":359325,"line_start":13,"line_end":13,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359330,"byte_end":359333,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359338,"byte_end":359352,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359357,"byte_end":359360,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359365,"byte_end":359372,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::TracerProvider};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359377,"byte_end":359432,"line_start":18,"line_end":18,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359437,"byte_end":359440,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ let provider = global::tracer_provider();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359445,"byte_end":359490,"line_start":20,"line_end":20,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359495,"byte_end":359498,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ // tracer used in applications/binaries","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359503,"byte_end":359546,"line_start":22,"line_end":22,"column_start":5,"column_end":48}},{"value":"/ let tracer = provider.tracer(\"my_app\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359551,"byte_end":359594,"line_start":23,"line_end":23,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359599,"byte_end":359602,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ // tracer used in libraries/crates that optionally includes version and schema url","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359607,"byte_end":359693,"line_start":25,"line_end":25,"column_start":5,"column_end":91}},{"value":"/ let tracer = provider.versioned_tracer(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359698,"byte_end":359741,"line_start":26,"line_end":26,"column_start":5,"column_end":48}},{"value":"/     \"my_library\",","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359746,"byte_end":359767,"line_start":27,"line_end":27,"column_start":5,"column_end":26}},{"value":"/     Some(env!(\"CARGO_PKG_VERSION\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359772,"byte_end":359812,"line_start":28,"line_end":28,"column_start":5,"column_end":45}},{"value":"/     Some(\"https://opentelemetry.io/schema/1.0.0\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359817,"byte_end":359870,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359875,"byte_end":359881,"line_start":30,"line_end":30,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":359886,"byte_end":359893,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2115},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360872,"byte_end":360888,"line_start":59,"line_end":59,"column_start":8,"column_end":24},"name":"versioned_tracer","qualname":"::trace::tracer_provider::TracerProvider::versioned_tracer","value":"fn versioned_tracer<impl Into<Cow<'static, str>>>(&Self,\nimpl Into<Cow<'static, str>>, Option<&'static str>, Option<&'static str>)\n-> Self::Tracer where impl Into<Cow<'static, str>>: Into<Cow>","parent":{"krate":0,"index":2111},"children":[],"decl_id":null,"docs":" Returns a new versioned tracer with a given name.","sig":null,"attributes":[{"value":"/ Returns a new versioned tracer with a given name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360028,"byte_end":360081,"line_start":36,"line_end":36,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360086,"byte_end":360089,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The `name` should be the application name or the name of the library","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360094,"byte_end":360166,"line_start":38,"line_end":38,"column_start":5,"column_end":77}},{"value":"/ providing instrumentation. If the name is empty, then an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360171,"byte_end":360231,"line_start":39,"line_end":39,"column_start":5,"column_end":65}},{"value":"/ implementation-defined default name may be used instead.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360236,"byte_end":360296,"line_start":40,"line_end":40,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360301,"byte_end":360304,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360309,"byte_end":360323,"line_start":42,"line_end":42,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360328,"byte_end":360331,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360336,"byte_end":360343,"line_start":44,"line_end":44,"column_start":5,"column_end":12}},{"value":"/ use opentelemetry::{global, trace::TracerProvider};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360348,"byte_end":360403,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360408,"byte_end":360411,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ let provider = global::tracer_provider();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360416,"byte_end":360461,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360466,"byte_end":360469,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ // tracer used in applications/binaries","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360474,"byte_end":360517,"line_start":49,"line_end":49,"column_start":5,"column_end":48}},{"value":"/ let tracer = provider.tracer(\"my_app\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360522,"byte_end":360565,"line_start":50,"line_end":50,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360570,"byte_end":360573,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ // tracer used in libraries/crates that optionally includes version and schema url","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360578,"byte_end":360664,"line_start":52,"line_end":52,"column_start":5,"column_end":91}},{"value":"/ let tracer = provider.versioned_tracer(","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360669,"byte_end":360712,"line_start":53,"line_end":53,"column_start":5,"column_end":48}},{"value":"/     \"my_library\",","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360717,"byte_end":360738,"line_start":54,"line_end":54,"column_start":5,"column_end":26}},{"value":"/     Some(env!(\"CARGO_PKG_VERSION\")),","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360743,"byte_end":360783,"line_start":55,"line_end":55,"column_start":5,"column_end":45}},{"value":"/     Some(\"https://opentelemetry.io/schema/1.0.0\")","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360788,"byte_end":360841,"line_start":56,"line_end":56,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360846,"byte_end":360852,"line_start":57,"line_end":57,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":360857,"byte_end":360864,"line_start":58,"line_end":58,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":361140,"byte_end":361151,"line_start":67,"line_end":67,"column_start":8,"column_end":19},"name":"force_flush","qualname":"::trace::tracer_provider::TracerProvider::force_flush","value":"fn force_flush(&Self) -> Vec<TraceResult<()>>","parent":{"krate":0,"index":2111},"children":[],"decl_id":null,"docs":" Force flush all remaining spans in span processors and return results.\n","sig":null,"attributes":[{"value":"/ Force flush all remaining spans in span processors and return results.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer_provider.rs","byte_start":361058,"byte_end":361132,"line_start":66,"line_end":66,"column_start":5,"column_end":79}}]},{"kind":"Type","id":{"krate":0,"index":2181},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285014,"byte_end":285025,"line_start":200,"line_end":200,"column_start":10,"column_end":21},"name":"TraceResult","qualname":"::trace::TraceResult","value":"Result<T, TraceError>","parent":null,"children":[],"decl_id":null,"docs":" Describe the result of operations in tracing API.\n","sig":null,"attributes":[{"value":"/ Describe the result of operations in tracing API.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284951,"byte_end":285004,"line_start":199,"line_end":199,"column_start":1,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3149},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285311,"byte_end":285323,"line_start":208,"line_end":208,"column_start":5,"column_end":17},"name":"ExportFailed","qualname":"::trace::TraceError::ExportFailed","value":"TraceError::ExportFailed(Box<dyn ExportError>)","parent":{"krate":0,"index":3130},"children":[],"decl_id":null,"docs":" Export failed with the error returned by the exporter\n","sig":null,"attributes":[{"value":"/ Export failed with the error returned by the exporter","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285161,"byte_end":285218,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"error(\"Exporter {} encountered the following error(s): {0}\",.0.exporter_name())","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285223,"byte_end":285306,"line_start":207,"line_end":207,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":3151},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285324,"byte_end":285344,"line_start":208,"line_end":208,"column_start":18,"column_end":38},"name":"0","qualname":"::trace::TraceError::ExportFailed::0","value":"std::boxed::Box<(dyn sdk::export::ExportError + 'static)>","parent":{"krate":0,"index":3149},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3152},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285506,"byte_end":285520,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"ExportTimedOut","qualname":"::trace::TraceError::ExportTimedOut","value":"TraceError::ExportTimedOut(time::Duration)","parent":{"krate":0,"index":3130},"children":[],"decl_id":null,"docs":" Export failed to finish after certain period and processor stopped the export.\n","sig":null,"attributes":[{"value":"/ Export failed to finish after certain period and processor stopped the export.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285352,"byte_end":285434,"line_start":210,"line_end":210,"column_start":5,"column_end":87}},{"value":"error(\"Exporting timed out after {} seconds\",.0.as_secs())","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285439,"byte_end":285501,"line_start":211,"line_end":211,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":3154},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285521,"byte_end":285535,"line_start":212,"line_end":212,"column_start":20,"column_end":34},"name":"0","qualname":"::trace::TraceError::ExportTimedOut::0","value":"std::time::Duration","parent":{"krate":0,"index":3152},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3155},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285643,"byte_end":285648,"line_start":216,"line_end":216,"column_start":5,"column_end":10},"name":"Other","qualname":"::trace::TraceError::Other","value":"TraceError::Other(Box<dyn std::error::Error + Send + Sync + 'static>)","parent":{"krate":0,"index":3130},"children":[],"decl_id":null,"docs":" Other errors propagated from trace SDK that weren't covered above\n","sig":null,"attributes":[{"value":"/ Other errors propagated from trace SDK that weren't covered above","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285543,"byte_end":285612,"line_start":214,"line_end":214,"column_start":5,"column_end":74}},{"value":"error(transparent)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285617,"byte_end":285638,"line_start":215,"line_end":215,"column_start":5,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":3157},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285657,"byte_end":285707,"line_start":216,"line_end":216,"column_start":19,"column_end":69},"name":"0","qualname":"::trace::TraceError::Other::0","value":"std::boxed::Box<(dyn std::error::Error + std::marker::Send + std::marker::Sync + 'static)>","parent":{"krate":0,"index":3155},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285649,"byte_end":285656,"line_start":216,"line_end":216,"column_start":11,"column_end":18}}]},{"kind":"Enum","id":{"krate":0,"index":3130},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285144,"byte_end":285154,"line_start":205,"line_end":205,"column_start":10,"column_end":20},"name":"TraceError","qualname":"::trace::TraceError","value":"enum TraceError {\n    ExportFailed(Box<dyn ExportError>),\n    ExportTimedOut(time::Duration),\n    Other(Box<dyn std::error::Error + Send + Sync + 'static>),\n}","parent":null,"children":[{"krate":0,"index":3149},{"krate":0,"index":3152},{"krate":0,"index":3155}],"decl_id":null,"docs":" Errors returned by the trace API.\n","sig":null,"attributes":[{"value":"/ Errors returned by the trace API.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285055,"byte_end":285092,"line_start":202,"line_end":202,"column_start":1,"column_end":38}},{"value":"non_exhaustive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285117,"byte_end":285134,"line_start":204,"line_end":204,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285779,"byte_end":285783,"line_start":223,"line_end":223,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceError as std::convert::From>::from","value":"fn from(T) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2188},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285913,"byte_end":285917,"line_start":229,"line_end":229,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceError as std::convert::From>::from","value":"fn from(TrySendError<T>) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2190},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286062,"byte_end":286066,"line_start":235,"line_end":235,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceError as std::convert::From>::from","value":"fn from(Canceled) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2192},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286184,"byte_end":286188,"line_start":241,"line_end":241,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceError as std::convert::From>::from","value":"fn from(String) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2194},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286326,"byte_end":286330,"line_start":247,"line_end":247,"column_start":8,"column_end":12},"name":"from","qualname":"<TraceError as std::convert::From>::from","value":"fn from(&'static str) -> Self","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2195},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286565,"byte_end":286576,"line_start":258,"line_end":258,"column_start":11,"column_end":22},"name":"IdGenerator","qualname":"::trace::IdGenerator","value":"IdGenerator: Send + Sync + fmt::Debug","parent":null,"children":[{"krate":0,"index":2196},{"krate":0,"index":2197}],"decl_id":null,"docs":" Interface for generating IDs\n","sig":null,"attributes":[{"value":"/ Interface for generating IDs","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286522,"byte_end":286554,"line_start":257,"line_end":257,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286645,"byte_end":286657,"line_start":260,"line_end":260,"column_start":8,"column_end":20},"name":"new_trace_id","qualname":"::trace::IdGenerator::new_trace_id","value":"fn new_trace_id(&Self) -> TraceId","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" Generate a new `TraceId`\n","sig":null,"attributes":[{"value":"/ Generate a new `TraceId`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286609,"byte_end":286637,"line_start":259,"line_end":259,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2197},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286717,"byte_end":286728,"line_start":263,"line_end":263,"column_start":8,"column_end":19},"name":"new_span_id","qualname":"::trace::IdGenerator::new_span_id","value":"fn new_span_id(&Self) -> SpanId","parent":{"krate":0,"index":2195},"children":[],"decl_id":null,"docs":" Generate a new `SpanId`\n","sig":null,"attributes":[{"value":"/ Generate a new `SpanId`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286682,"byte_end":286709,"line_start":262,"line_end":262,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3173},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286992,"byte_end":286997,"line_start":270,"line_end":270,"column_start":12,"column_end":17},"name":"Event","qualname":"::trace::Event","value":"Event { name, timestamp, attributes, dropped_attributes_count }","parent":null,"children":[{"krate":0,"index":3174},{"krate":0,"index":3175},{"krate":0,"index":3176},{"krate":0,"index":3177}],"decl_id":null,"docs":" A `Span` has the ability to add events. Events have a time associated\n with the moment when they are added to the `Span`.\n","sig":null,"attributes":[{"value":"/ A `Span` has the ability to add events. Events have a time associated","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286750,"byte_end":286823,"line_start":266,"line_end":266,"column_start":1,"column_end":74}},{"value":"/ with the moment when they are added to the `Span`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286824,"byte_end":286878,"line_start":267,"line_end":267,"column_start":1,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":3174},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287027,"byte_end":287031,"line_start":272,"line_end":272,"column_start":9,"column_end":13},"name":"name","qualname":"::trace::Event::name","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":3173},"children":[],"decl_id":null,"docs":" Event name\n","sig":null,"attributes":[{"value":"/ Event name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287004,"byte_end":287018,"line_start":271,"line_end":271,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":3175},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287084,"byte_end":287093,"line_start":274,"line_end":274,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::trace::Event::timestamp","value":"std::time::SystemTime","parent":{"krate":0,"index":3173},"children":[],"decl_id":null,"docs":" Event timestamp\n","sig":null,"attributes":[{"value":"/ Event timestamp","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287056,"byte_end":287075,"line_start":273,"line_end":273,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":3176},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287146,"byte_end":287156,"line_start":276,"line_end":276,"column_start":9,"column_end":19},"name":"attributes","qualname":"::trace::Event::attributes","value":"std::vec::Vec<common::KeyValue>","parent":{"krate":0,"index":3173},"children":[],"decl_id":null,"docs":" Event attributes\n","sig":null,"attributes":[{"value":"/ Event attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287117,"byte_end":287137,"line_start":275,"line_end":275,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":3177},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287218,"byte_end":287242,"line_start":278,"line_end":278,"column_start":9,"column_end":33},"name":"dropped_attributes_count","qualname":"::trace::Event::dropped_attributes_count","value":"u32","parent":{"krate":0,"index":3173},"children":[],"decl_id":null,"docs":" Number of dropped attributes\n","sig":null,"attributes":[{"value":"/ Number of dropped attributes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287177,"byte_end":287209,"line_start":277,"line_end":277,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2199},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287303,"byte_end":287306,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"new","qualname":"<Event>::new","value":"fn new<T>(T, time::SystemTime, Vec<KeyValue>, u32) -> Self where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create new `Event`\n","sig":null,"attributes":[{"value":"/ Create new `Event`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287269,"byte_end":287291,"line_start":282,"line_end":282,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2201},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287686,"byte_end":287695,"line_start":298,"line_end":298,"column_start":12,"column_end":21},"name":"with_name","qualname":"<Event>::with_name","value":"fn with_name<T>(T) -> Self where T: Into<Cow>","parent":null,"children":[],"decl_id":null,"docs":" Create new `Event` with a given name.\n","sig":null,"attributes":[{"value":"/ Create new `Event` with a given name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287633,"byte_end":287674,"line_start":297,"line_end":297,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":3186},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288196,"byte_end":288200,"line_start":312,"line_end":312,"column_start":12,"column_end":16},"name":"Link","qualname":"::trace::Link","value":"Link {  }","parent":null,"children":[{"krate":0,"index":3187},{"krate":0,"index":3188},{"krate":0,"index":3189}],"decl_id":null,"docs":" During the `Span` creation user MUST have the ability to record links to other `Span`s. Linked\n `Span`s can be from the same or a different trace.\n","sig":null,"attributes":[{"value":"/ During the `Span` creation user MUST have the ability to record links to other `Span`s. Linked","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287929,"byte_end":288027,"line_start":308,"line_end":308,"column_start":1,"column_end":99}},{"value":"/ `Span`s can be from the same or a different trace.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288028,"byte_end":288082,"line_start":309,"line_end":309,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288374,"byte_end":288377,"line_start":320,"line_end":320,"column_start":12,"column_end":15},"name":"new","qualname":"<Link>::new","value":"fn new(SpanContext, Vec<KeyValue>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new link\n","sig":null,"attributes":[{"value":"/ Create a new link","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288341,"byte_end":288362,"line_start":319,"line_end":319,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2205},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288620,"byte_end":288632,"line_start":329,"line_end":329,"column_start":12,"column_end":24},"name":"span_context","qualname":"<Link>::span_context","value":"fn span_context(&Self) -> &SpanContext","parent":null,"children":[],"decl_id":null,"docs":" The span context of the linked span\n","sig":null,"attributes":[{"value":"/ The span context of the linked span","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288569,"byte_end":288608,"line_start":328,"line_end":328,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2206},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288739,"byte_end":288749,"line_start":334,"line_end":334,"column_start":12,"column_end":22},"name":"attributes","qualname":"<Link>::attributes","value":"fn attributes(&Self) -> &Vec<KeyValue>","parent":null,"children":[],"decl_id":null,"docs":" Attributes of the span link\n","sig":null,"attributes":[{"value":"/ Attributes of the span link","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288696,"byte_end":288727,"line_start":333,"line_end":333,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288853,"byte_end":288877,"line_start":339,"line_end":339,"column_start":12,"column_end":36},"name":"dropped_attributes_count","qualname":"<Link>::dropped_attributes_count","value":"fn dropped_attributes_count(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Dropped attributes count\n","sig":null,"attributes":[{"value":"/ Dropped attributes count","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288813,"byte_end":288841,"line_start":338,"line_end":338,"column_start":5,"column_end":33}}]}],"impls":[{"id":3,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16580,"byte_end":16585,"line_start":33,"line_end":33,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":16}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25339,"byte_end":25340,"line_start":108,"line_end":108,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26389,"byte_end":26398,"line_start":149,"line_end":149,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26573,"byte_end":26582,"line_start":158,"line_end":158,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":117}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26711,"byte_end":26720,"line_start":164,"line_end":164,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29162,"byte_end":29173,"line_start":229,"line_end":229,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29306,"byte_end":29317,"line_start":235,"line_end":235,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":137},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31397,"byte_end":31398,"line_start":292,"line_end":292,"column_start":33,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32973,"byte_end":32974,"line_start":337,"line_end":337,"column_start":44,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33905,"byte_end":33925,"line_start":368,"line_end":368,"column_start":21,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34049,"byte_end":34069,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34529,"byte_end":34549,"line_start":388,"line_end":388,"column_start":32,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51891,"byte_end":51906,"line_start":55,"line_end":55,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52133,"byte_end":52148,"line_start":66,"line_end":66,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52782,"byte_end":52797,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53848,"byte_end":53856,"line_start":123,"line_end":123,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":325}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54078,"byte_end":54086,"line_start":134,"line_end":134,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2303}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54818,"byte_end":54823,"line_start":161,"line_end":161,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55730,"byte_end":55752,"line_start":22,"line_end":22,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60236,"byte_end":60253,"line_start":105,"line_end":105,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60406,"byte_end":60423,"line_start":112,"line_end":112,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72718,"byte_end":72744,"line_start":67,"line_end":67,"column_start":6,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73350,"byte_end":73376,"line_start":86,"line_end":86,"column_start":28,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":82088,"byte_end":82110,"line_start":47,"line_end":47,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":467},{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":84307,"byte_end":84329,"line_start":112,"line_end":112,"column_start":28,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103514,"byte_end":103533,"line_start":24,"line_end":24,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103811,"byte_end":103830,"line_start":33,"line_end":33,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103978,"byte_end":103997,"line_start":40,"line_end":40,"column_start":18,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105554,"byte_end":105581,"line_start":78,"line_end":78,"column_start":27,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109690,"byte_end":109708,"line_start":20,"line_end":20,"column_start":27,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":111064,"byte_end":111087,"line_start":23,"line_end":23,"column_start":27,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":573}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96043,"byte_end":96051,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96227,"byte_end":96235,"line_start":61,"line_end":61,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99132,"byte_end":99140,"line_start":156,"line_end":156,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99274,"byte_end":99282,"line_start":164,"line_end":164,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99583,"byte_end":99587,"line_start":177,"line_end":177,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113930,"byte_end":113936,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":667},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116344,"byte_end":116350,"line_start":95,"line_end":95,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118080,"byte_end":118094,"line_start":20,"line_end":20,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":120995,"byte_end":121003,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":717},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121137,"byte_end":121151,"line_start":124,"line_end":124,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":720},{"krate":0,"index":721},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121672,"byte_end":121676,"line_start":146,"line_end":146,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122936,"byte_end":122948,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":741},{"krate":0,"index":743},{"krate":0,"index":745},{"krate":0,"index":747}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124505,"byte_end":124513,"line_start":69,"line_end":69,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":750},{"krate":0,"index":751}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124673,"byte_end":124685,"line_start":77,"line_end":77,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125037,"byte_end":125041,"line_start":90,"line_end":90,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125206,"byte_end":125218,"line_start":98,"line_end":98,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":767}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128647,"byte_end":128662,"line_start":43,"line_end":43,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":793},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126241,"byte_end":126252,"line_start":15,"line_end":15,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":814},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131391,"byte_end":131410,"line_start":33,"line_end":33,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131778,"byte_end":131792,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131878,"byte_end":131892,"line_start":55,"line_end":55,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132478,"byte_end":132492,"line_start":77,"line_end":77,"column_start":39,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133777,"byte_end":133784,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134214,"byte_end":134221,"line_start":134,"line_end":134,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":879},{"krate":0,"index":881},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149895,"byte_end":149902,"line_start":105,"line_end":105,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":161317,"byte_end":161321,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162497,"byte_end":162501,"line_start":90,"line_end":90,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":991},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1000},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165561,"byte_end":165565,"line_start":173,"line_end":173,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":167061,"byte_end":167065,"line_start":219,"line_end":219,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182610,"byte_end":182620,"line_start":41,"line_end":41,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187929,"byte_end":187948,"line_start":112,"line_end":112,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":188973,"byte_end":188992,"line_start":143,"line_end":143,"column_start":24,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1105},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192286,"byte_end":192304,"line_start":235,"line_end":235,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192548,"byte_end":192566,"line_start":243,"line_end":243,"column_start":41,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194352,"byte_end":194370,"line_start":293,"line_end":293,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1127},{"krate":0,"index":1130}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":199703,"byte_end":199714,"line_start":439,"line_end":439,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201785,"byte_end":201810,"line_start":497,"line_end":497,"column_start":12,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1148},{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212627,"byte_end":212633,"line_start":35,"line_end":35,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1239}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213011,"byte_end":213017,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1241},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215507,"byte_end":215513,"line_start":124,"line_end":124,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1247},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1252}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230437,"byte_end":230444,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1377},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1384},{"krate":0,"index":1385},{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236557,"byte_end":236561,"line_start":270,"line_end":270,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1390},{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236971,"byte_end":236978,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1398}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237310,"byte_end":237317,"line_start":297,"line_end":297,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237594,"byte_end":237601,"line_start":307,"line_end":307,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1404}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239686,"byte_end":239693,"line_start":375,"line_end":375,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1416},{"krate":0,"index":1421},{"krate":0,"index":1424},{"krate":0,"index":1425}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241032,"byte_end":241047,"line_start":416,"line_end":416,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241173,"byte_end":241188,"line_start":423,"line_end":423,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241310,"byte_end":241325,"line_start":429,"line_end":429,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241810,"byte_end":241826,"line_start":447,"line_end":447,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":242210,"byte_end":242226,"line_start":463,"line_end":463,"column_start":25,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247236,"byte_end":247243,"line_start":81,"line_end":81,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1470},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254209,"byte_end":254216,"line_start":297,"line_end":297,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254694,"byte_end":254706,"line_start":313,"line_end":313,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":255579,"byte_end":255587,"line_start":337,"line_end":337,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257190,"byte_end":257193,"line_start":11,"line_end":11,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":1526}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258669,"byte_end":258672,"line_start":68,"line_end":68,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258820,"byte_end":258823,"line_start":75,"line_end":75,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1530}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258962,"byte_end":258968,"line_start":82,"line_end":82,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259109,"byte_end":259112,"line_start":89,"line_end":89,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1534}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259582,"byte_end":259587,"line_start":109,"line_end":109,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261279,"byte_end":261284,"line_start":175,"line_end":175,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1541}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262196,"byte_end":262201,"line_start":213,"line_end":213,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1544}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262379,"byte_end":262384,"line_start":220,"line_end":220,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262550,"byte_end":262555,"line_start":227,"line_end":227,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1548}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263312,"byte_end":263320,"line_start":249,"line_end":249,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278650,"byte_end":278659,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1618}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278844,"byte_end":278853,"line_start":66,"line_end":66,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275273,"byte_end":275280,"line_start":185,"line_end":185,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275499,"byte_end":275506,"line_start":192,"line_end":192,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1637},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":289800,"byte_end":289807,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1713}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290111,"byte_end":290118,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1724},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1738},{"krate":0,"index":1739}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294938,"byte_end":294945,"line_start":177,"line_end":177,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1750},{"krate":0,"index":1752},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298502,"byte_end":298503,"line_start":287,"line_end":287,"column_start":30,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298561,"byte_end":298572,"line_start":289,"line_end":289,"column_start":54,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1766},{"krate":0,"index":1767}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298854,"byte_end":298865,"line_start":300,"line_end":300,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1770},{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299167,"byte_end":299178,"line_start":310,"line_end":310,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1778},{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301895,"byte_end":301913,"line_start":23,"line_end":23,"column_start":6,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302070,"byte_end":302088,"line_start":30,"line_end":30,"column_start":32,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1832},{"krate":0,"index":1833},{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302699,"byte_end":302707,"line_start":55,"line_end":55,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1837}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302775,"byte_end":302783,"line_start":61,"line_end":61,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1839}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303163,"byte_end":303171,"line_start":76,"line_end":76,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1841},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304498,"byte_end":304508,"line_start":137,"line_end":137,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304640,"byte_end":304650,"line_start":144,"line_end":144,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1858},{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305934,"byte_end":305950,"line_start":188,"line_end":188,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1862}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":306108,"byte_end":306124,"line_start":196,"line_end":196,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2961}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319800,"byte_end":319808,"line_start":240,"line_end":240,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1900}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320633,"byte_end":320643,"line_start":266,"line_end":266,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1902},{"krate":0,"index":1903}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322620,"byte_end":322630,"line_start":34,"line_end":34,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1934},{"krate":0,"index":1935},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323651,"byte_end":323661,"line_start":68,"line_end":68,"column_start":17,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1941}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323791,"byte_end":323801,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1943},{"krate":0,"index":1944}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323928,"byte_end":323938,"line_start":84,"line_end":84,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324055,"byte_end":324065,"line_start":92,"line_end":92,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1949}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324452,"byte_end":324459,"line_start":105,"line_end":105,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1951},{"krate":0,"index":1952},{"krate":0,"index":1954},{"krate":0,"index":1956}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325360,"byte_end":325367,"line_start":136,"line_end":136,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1959}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325473,"byte_end":325480,"line_start":142,"line_end":142,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1962}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325630,"byte_end":325637,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1964}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325788,"byte_end":325795,"line_start":154,"line_end":154,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1966}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326179,"byte_end":326185,"line_start":167,"line_end":167,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1971},{"krate":0,"index":1973}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327053,"byte_end":327059,"line_start":198,"line_end":198,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1976}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327163,"byte_end":327169,"line_start":204,"line_end":204,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1979}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327319,"byte_end":327325,"line_start":210,"line_end":210,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327476,"byte_end":327482,"line_start":216,"line_end":216,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1983}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":328125,"byte_end":328135,"line_start":233,"line_end":233,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1985},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1993},{"krate":0,"index":1996},{"krate":0,"index":1999},{"krate":0,"index":2001},{"krate":0,"index":2003},{"krate":0,"index":2004}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":334294,"byte_end":334304,"line_start":405,"line_end":405,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336434,"byte_end":336445,"line_start":458,"line_end":458,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355930,"byte_end":355941,"line_start":364,"line_end":364,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2079},{"krate":0,"index":2081},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2086},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2092},{"krate":0,"index":2093},{"krate":0,"index":2095},{"krate":0,"index":2096},{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285733,"byte_end":285743,"line_start":219,"line_end":219,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2185}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285893,"byte_end":285903,"line_start":228,"line_end":228,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2188}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286042,"byte_end":286052,"line_start":234,"line_end":234,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2190}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286164,"byte_end":286174,"line_start":240,"line_end":240,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2192}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286306,"byte_end":286316,"line_start":246,"line_end":246,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2194}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287257,"byte_end":287262,"line_start":281,"line_end":281,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":2199},{"krate":0,"index":2201}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288330,"byte_end":288334,"line_start":318,"line_end":318,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2206},{"krate":0,"index":2207}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9011,"byte_end":9017,"line_start":221,"line_end":221,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9027,"byte_end":9030,"line_start":222,"line_end":222,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":226}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44563,"byte_end":44569,"line_start":9,"line_end":9,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":227}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45173,"byte_end":45178,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":228}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":45722,"byte_end":45728,"line_start":14,"line_end":14,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":270}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44579,"byte_end":44594,"line_start":10,"line_end":10,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":331}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44775,"byte_end":44786,"line_start":16,"line_end":16,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":338}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44796,"byte_end":44804,"line_start":17,"line_end":17,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":491}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/mod.rs","byte_start":44889,"byte_end":44894,"line_start":20,"line_end":20,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":641}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9102,"byte_end":9109,"line_start":228,"line_end":228,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1339}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9238,"byte_end":9245,"line_start":238,"line_end":238,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1566}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9271,"byte_end":9275,"line_start":241,"line_end":241,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1587}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9483,"byte_end":9494,"line_start":251,"line_end":251,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1588}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":274624,"byte_end":274643,"line_start":166,"line_end":166,"column_start":9,"column_end":28},"ref_id":{"krate":0,"index":1592}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/lib.rs","byte_start":9580,"byte_end":9585,"line_start":255,"line_end":255,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1641}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":284521,"byte_end":284525,"line_start":184,"line_end":184,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1783}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/error_handler.rs","byte_start":16580,"byte_end":16585,"line_start":33,"line_end":33,"column_start":34,"column_end":39},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2224},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":25339,"byte_end":25340,"line_start":108,"line_end":108,"column_start":41,"column_end":42},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":102},"to":{"krate":0,"index":92}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26389,"byte_end":26398,"line_start":149,"line_end":149,"column_start":6,"column_end":15},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26573,"byte_end":26582,"line_start":158,"line_end":158,"column_start":21,"column_end":30},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":110},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":26711,"byte_end":26720,"line_start":164,"line_end":164,"column_start":22,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":1883}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29162,"byte_end":29173,"line_start":229,"line_end":229,"column_start":21,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":128},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":29306,"byte_end":29317,"line_start":235,"line_end":235,"column_start":24,"column_end":35},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":128},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":31397,"byte_end":31398,"line_start":292,"line_end":292,"column_start":33,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":140}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":32973,"byte_end":32974,"line_start":337,"line_end":337,"column_start":44,"column_end":45},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":154},"to":{"krate":0,"index":148}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":33905,"byte_end":33925,"line_start":368,"line_end":368,"column_start":21,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2271},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34049,"byte_end":34069,"line_start":374,"line_end":374,"column_start":6,"column_end":26},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2271},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/global/trace.rs","byte_start":34529,"byte_end":34549,"line_start":388,"line_end":388,"column_start":32,"column_end":52},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2271},"to":{"krate":0,"index":2111}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":51891,"byte_end":51906,"line_start":55,"line_end":55,"column_start":18,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2286},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52133,"byte_end":52148,"line_start":66,"line_end":66,"column_start":16,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":52782,"byte_end":52797,"line_start":89,"line_end":89,"column_start":9,"column_end":24},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":53848,"byte_end":53856,"line_start":123,"line_end":123,"column_start":16,"column_end":24},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2294},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54078,"byte_end":54086,"line_start":134,"line_end":134,"column_start":26,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2294},"to":{"krate":0,"index":2321}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/stdout.rs","byte_start":54818,"byte_end":54823,"line_start":161,"line_end":161,"column_start":22,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2318},"to":{"krate":0,"index":329}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46270,"byte_end":46274,"line_start":27,"line_end":27,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":2321}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/trace/mod.rs","byte_start":46277,"byte_end":46282,"line_start":27,"line_end":27,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":10110},"to":{"krate":0,"index":2321}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45266,"byte_end":45271,"line_start":10,"line_end":10,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2569},"to":{"krate":0,"index":329}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45274,"byte_end":45278,"line_start":10,"line_end":10,"column_start":44,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":329}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/export/mod.rs","byte_start":45281,"byte_end":45285,"line_start":10,"line_end":10,"column_start":51,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":329}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/instrumentation.rs","byte_start":55730,"byte_end":55752,"line_start":22,"line_end":22,"column_start":6,"column_end":28},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2348},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60236,"byte_end":60253,"line_start":105,"line_end":105,"column_start":6,"column_end":23},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/baggage.rs","byte_start":60406,"byte_end":60423,"line_start":112,"line_end":112,"column_start":28,"column_end":45},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2383},"to":{"krate":0,"index":1610}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":72718,"byte_end":72744,"line_start":67,"line_end":67,"column_start":6,"column_end":32},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2389},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/composite.rs","byte_start":73350,"byte_end":73376,"line_start":86,"line_end":86,"column_start":28,"column_end":54},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":2389},"to":{"krate":0,"index":1610}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":82088,"byte_end":82110,"line_start":47,"line_end":47,"column_start":6,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/propagation/trace_context.rs","byte_start":84307,"byte_end":84329,"line_start":112,"line_end":112,"column_start":28,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2410},"to":{"krate":0,"index":1610}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103514,"byte_end":103533,"line_start":24,"line_end":24,"column_start":27,"column_end":46},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2418},"to":{"krate":0,"index":639}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103811,"byte_end":103830,"line_start":33,"line_end":33,"column_start":6,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":103978,"byte_end":103997,"line_start":40,"line_end":40,"column_start":18,"column_end":37},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2418},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/env.rs","byte_start":105554,"byte_end":105581,"line_start":78,"line_end":78,"column_start":27,"column_end":54},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2422},"to":{"krate":0,"index":639}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/os.rs","byte_start":109690,"byte_end":109708,"line_start":20,"line_end":20,"column_start":27,"column_end":45},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2431},"to":{"krate":0,"index":639}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/process.rs","byte_start":111064,"byte_end":111087,"line_start":23,"line_end":23,"column_start":27,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2435},"to":{"krate":0,"index":639}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96043,"byte_end":96051,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2439},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":96227,"byte_end":96235,"line_start":61,"line_end":61,"column_start":6,"column_end":14},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2439},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99132,"byte_end":99140,"line_start":156,"line_end":156,"column_start":19,"column_end":27},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2449},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99274,"byte_end":99282,"line_start":164,"line_end":164,"column_start":23,"column_end":31},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2439},"to":{"krate":2,"index":8279}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/resource/mod.rs","byte_start":99583,"byte_end":99587,"line_start":177,"line_end":177,"column_start":23,"column_end":27},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2454},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":113930,"byte_end":113936,"line_start":29,"line_end":29,"column_start":6,"column_end":12},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/config.rs","byte_start":116344,"byte_end":116350,"line_start":95,"line_end":95,"column_start":18,"column_end":24},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2461},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":118080,"byte_end":118094,"line_start":20,"line_end":20,"column_start":6,"column_end":20},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":120995,"byte_end":121003,"line_start":116,"line_end":116,"column_start":19,"column_end":27},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2481},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121137,"byte_end":121151,"line_start":124,"line_end":124,"column_start":23,"column_end":37},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2468},"to":{"krate":2,"index":8279}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_hash_map.rs","byte_start":121672,"byte_end":121676,"line_start":146,"line_end":146,"column_start":23,"column_end":27},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2486},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":122936,"byte_end":122948,"line_start":18,"line_end":18,"column_start":9,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124505,"byte_end":124513,"line_start":69,"line_end":69,"column_start":22,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2510},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":124673,"byte_end":124685,"line_start":77,"line_end":77,"column_start":26,"column_end":38},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":8279}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125037,"byte_end":125041,"line_start":90,"line_end":90,"column_start":35,"column_end":39},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2517},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/evicted_queue.rs","byte_start":125206,"byte_end":125218,"line_start":98,"line_end":98,"column_start":23,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2493},"to":{"krate":2,"index":8288}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/aws.rs","byte_start":128647,"byte_end":128662,"line_start":43,"line_end":43,"column_start":22,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2526},"to":{"krate":0,"index":2195}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/id_generator/mod.rs","byte_start":126241,"byte_end":126252,"line_start":15,"line_end":15,"column_start":36,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2532},"to":{"krate":0,"index":2195}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131391,"byte_end":131410,"line_start":33,"line_end":33,"column_start":15,"column_end":34},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2545},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131778,"byte_end":131792,"line_start":49,"line_end":49,"column_start":18,"column_end":32},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2550},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":131878,"byte_end":131892,"line_start":55,"line_end":55,"column_start":6,"column_end":20},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":132478,"byte_end":132492,"line_start":77,"line_end":77,"column_start":39,"column_end":53},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2550},"to":{"krate":0,"index":2111}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":133777,"byte_end":133784,"line_start":118,"line_end":118,"column_start":18,"column_end":25},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":2556},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/provider.rs","byte_start":134214,"byte_end":134221,"line_start":134,"line_end":134,"column_start":6,"column_end":13},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":2556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142354,"byte_end":142361,"line_start":39,"line_end":39,"column_start":25,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":1581},"to":{"krate":0,"index":905}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142881,"byte_end":142885,"line_start":51,"line_end":51,"column_start":20,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":909}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/runtime.rs","byte_start":142888,"byte_end":142892,"line_start":51,"line_end":51,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":909}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147975,"byte_end":147979,"line_start":51,"line_end":51,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":938}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147982,"byte_end":147986,"line_start":51,"line_end":51,"column_start":32,"column_end":36},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":938}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":147999,"byte_end":148004,"line_start":51,"line_end":51,"column_start":49,"column_end":54},"kind":"SuperTrait","from":{"krate":2,"index":10110},"to":{"krate":0,"index":938}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/sampler.rs","byte_start":149895,"byte_end":149902,"line_start":105,"line_end":105,"column_start":23,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2588},"to":{"krate":0,"index":938}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":161317,"byte_end":161321,"line_start":51,"line_end":51,"column_start":6,"column_end":10},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":162497,"byte_end":162501,"line_start":90,"line_end":90,"column_start":29,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":2607},"to":{"krate":0,"index":1883}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":165561,"byte_end":165565,"line_start":173,"line_end":173,"column_start":6,"column_end":10},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2607},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span.rs","byte_start":167061,"byte_end":167065,"line_start":219,"line_end":219,"column_start":15,"column_end":19},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2607},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_limit.rs","byte_start":182610,"byte_end":182620,"line_start":41,"line_end":41,"column_start":18,"column_end":28},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2633},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186209,"byte_end":186213,"line_start":70,"line_end":70,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":1096}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186216,"byte_end":186220,"line_start":70,"line_end":70,"column_start":33,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":1096}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":186233,"byte_end":186238,"line_start":70,"line_end":70,"column_start":50,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":10110},"to":{"krate":0,"index":1096}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":187929,"byte_end":187948,"line_start":112,"line_end":112,"column_start":6,"column_end":25},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":188973,"byte_end":188992,"line_start":143,"line_end":143,"column_start":24,"column_end":43},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2644},"to":{"krate":0,"index":1096}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192286,"byte_end":192304,"line_start":235,"line_end":235,"column_start":38,"column_end":56},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1109},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":192548,"byte_end":192566,"line_start":243,"line_end":243,"column_start":41,"column_end":59},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1109},"to":{"krate":0,"index":1096}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":194352,"byte_end":194370,"line_start":293,"line_end":293,"column_start":23,"column_end":41},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1109},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":199703,"byte_end":199714,"line_start":439,"line_end":439,"column_start":18,"column_end":29},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2661},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/span_processor.rs","byte_start":201785,"byte_end":201810,"line_start":497,"line_end":497,"column_start":12,"column_end":37},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2668},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":212627,"byte_end":212633,"line_start":35,"line_end":35,"column_start":21,"column_end":27},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2678},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":213011,"byte_end":213017,"line_start":46,"line_end":46,"column_start":6,"column_end":12},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2678},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/sdk/trace/tracer.rs","byte_start":215507,"byte_end":215513,"line_start":124,"line_end":124,"column_start":31,"column_end":37},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2678},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":230437,"byte_end":230444,"line_start":91,"line_end":91,"column_start":6,"column_end":13},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236557,"byte_end":236561,"line_start":270,"line_end":270,"column_start":23,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2701},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":236971,"byte_end":236978,"line_start":287,"line_end":287,"column_start":56,"column_end":63},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2694},"to":{"krate":2,"index":8275}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237310,"byte_end":237317,"line_start":297,"line_end":297,"column_start":33,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2694},"to":{"krate":2,"index":8275}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":237594,"byte_end":237601,"line_start":307,"line_end":307,"column_start":41,"column_end":48},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2694},"to":{"krate":2,"index":8275}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":239686,"byte_end":239693,"line_start":375,"line_end":375,"column_start":21,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":1406}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241032,"byte_end":241047,"line_start":416,"line_end":416,"column_start":6,"column_end":21},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241173,"byte_end":241188,"line_start":423,"line_end":423,"column_start":23,"column_end":38},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241310,"byte_end":241325,"line_start":429,"line_end":429,"column_start":21,"column_end":36},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2708},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":241810,"byte_end":241826,"line_start":447,"line_end":447,"column_start":6,"column_end":22},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2723},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/baggage.rs","byte_start":242210,"byte_end":242226,"line_start":463,"line_end":463,"column_start":25,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":2723},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":247236,"byte_end":247243,"line_start":81,"line_end":81,"column_start":6,"column_end":13},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":2745},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254209,"byte_end":254216,"line_start":297,"line_end":297,"column_start":21,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":2745},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":254694,"byte_end":254706,"line_start":313,"line_end":313,"column_start":15,"column_end":27},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/context.rs","byte_start":255579,"byte_end":255587,"line_start":337,"line_end":337,"column_start":17,"column_end":25},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":2751},"to":{"krate":2,"index":10334}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":257190,"byte_end":257193,"line_start":11,"line_end":11,"column_start":6,"column_end":9},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":2760},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258669,"byte_end":258672,"line_start":68,"line_end":68,"column_start":29,"column_end":32},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2760},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258820,"byte_end":258823,"line_start":75,"line_end":75,"column_start":23,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":2760},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":258962,"byte_end":258968,"line_start":82,"line_end":82,"column_start":20,"column_end":26},"kind":{"Impl":{"id":95}},"from":{"krate":5,"index":8341},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259109,"byte_end":259112,"line_start":89,"line_end":89,"column_start":23,"column_end":26},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":2760},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":259582,"byte_end":259587,"line_start":109,"line_end":109,"column_start":23,"column_end":28},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":2781},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":261279,"byte_end":261284,"line_start":175,"line_end":175,"column_start":6,"column_end":11},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":2810},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262196,"byte_end":262201,"line_start":213,"line_end":213,"column_start":29,"column_end":34},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":2810},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262379,"byte_end":262384,"line_start":220,"line_end":220,"column_start":23,"column_end":28},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":2810},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":262550,"byte_end":262555,"line_start":227,"line_end":227,"column_start":23,"column_end":28},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":2810},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/common.rs","byte_start":263312,"byte_end":263320,"line_start":249,"line_end":249,"column_start":6,"column_end":14},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2842},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264278,"byte_end":264283,"line_start":17,"line_end":17,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":2,"index":2801},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264286,"byte_end":264290,"line_start":17,"line_end":17,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/runtime.rs","byte_start":264293,"byte_end":264297,"line_start":17,"line_end":17,"column_start":35,"column_end":39},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":276982,"byte_end":276987,"line_start":14,"line_end":14,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":10110},"to":{"krate":0,"index":1610}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278650,"byte_end":278659,"line_start":59,"line_end":59,"column_start":10,"column_end":19},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":2853},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/text_map_propagator.rs","byte_start":278844,"byte_end":278853,"line_start":66,"line_end":66,"column_start":23,"column_end":32},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":2853},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275273,"byte_end":275280,"line_start":185,"line_end":185,"column_start":46,"column_end":53},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":1627}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/propagation/mod.rs","byte_start":275499,"byte_end":275506,"line_start":192,"line_end":192,"column_start":47,"column_end":54},"kind":{"Impl":{"id":106}},"from":{"krate":1,"index":1306},"to":{"krate":0,"index":1629}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":289800,"byte_end":289807,"line_start":36,"line_end":36,"column_start":6,"column_end":13},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":2871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":290111,"byte_end":290118,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":294938,"byte_end":294945,"line_start":177,"line_end":177,"column_start":26,"column_end":33},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2745},"to":{"krate":0,"index":1741}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298502,"byte_end":298503,"line_start":287,"line_end":287,"column_start":30,"column_end":31},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1763},"to":{"krate":0,"index":1780}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298561,"byte_end":298572,"line_start":289,"line_end":289,"column_start":54,"column_end":65},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2928},"to":{"krate":2,"index":13541}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":298854,"byte_end":298865,"line_start":300,"line_end":300,"column_start":28,"column_end":39},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":2928},"to":{"krate":30,"index":96}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":299167,"byte_end":299178,"line_start":310,"line_end":310,"column_start":33,"column_end":44},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2928},"to":{"krate":34,"index":17}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/context.rs","byte_start":300350,"byte_end":300355,"line_start":351,"line_end":351,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":2,"index":3184},"to":{"krate":0,"index":1780}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":301895,"byte_end":301913,"line_start":23,"line_end":23,"column_start":6,"column_end":24},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2932},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302070,"byte_end":302088,"line_start":30,"line_end":30,"column_start":32,"column_end":50},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2932},"to":{"krate":0,"index":2111}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302699,"byte_end":302707,"line_start":55,"line_end":55,"column_start":18,"column_end":26},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2940},"to":{"krate":2,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":302775,"byte_end":302783,"line_start":61,"line_end":61,"column_start":6,"column_end":14},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2940},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":303163,"byte_end":303171,"line_start":76,"line_end":76,"column_start":22,"column_end":30},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2940},"to":{"krate":0,"index":1883}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304498,"byte_end":304508,"line_start":137,"line_end":137,"column_start":6,"column_end":16},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2946},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":304640,"byte_end":304650,"line_start":144,"line_end":144,"column_start":24,"column_end":34},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2946},"to":{"krate":0,"index":2062}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":305934,"byte_end":305950,"line_start":188,"line_end":188,"column_start":6,"column_end":22},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2954},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/noop.rs","byte_start":306108,"byte_end":306124,"line_start":196,"line_end":196,"column_start":23,"column_end":39},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2954},"to":{"krate":0,"index":2321}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":319800,"byte_end":319808,"line_start":240,"line_end":240,"column_start":23,"column_end":31},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span.rs","byte_start":320633,"byte_end":320643,"line_start":266,"line_end":266,"column_start":6,"column_end":16},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":322620,"byte_end":322630,"line_start":34,"line_end":34,"column_start":6,"column_end":16},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323651,"byte_end":323661,"line_start":68,"line_end":68,"column_start":17,"column_end":27},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2998},"to":{"krate":2,"index":3306}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323791,"byte_end":323801,"line_start":76,"line_end":76,"column_start":16,"column_end":26},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2998},"to":{"krate":2,"index":3311}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":323928,"byte_end":323938,"line_start":84,"line_end":84,"column_start":14,"column_end":24},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2998},"to":{"krate":2,"index":3299}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324055,"byte_end":324065,"line_start":92,"line_end":92,"column_start":24,"column_end":34},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2998},"to":{"krate":2,"index":10123}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":324452,"byte_end":324459,"line_start":105,"line_end":105,"column_start":6,"column_end":13},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":3018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325360,"byte_end":325367,"line_start":136,"line_end":136,"column_start":25,"column_end":32},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":3018},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325473,"byte_end":325480,"line_start":142,"line_end":142,"column_start":21,"column_end":28},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3018},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325630,"byte_end":325637,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3018},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":325788,"byte_end":325795,"line_start":154,"line_end":154,"column_start":24,"column_end":31},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":3018},"to":{"krate":2,"index":10123}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":326179,"byte_end":326185,"line_start":167,"line_end":167,"column_start":6,"column_end":12},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":3034},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327053,"byte_end":327059,"line_start":198,"line_end":198,"column_start":24,"column_end":30},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3034},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327163,"byte_end":327169,"line_start":204,"line_end":204,"column_start":21,"column_end":27},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3034},"to":{"krate":2,"index":10110}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327319,"byte_end":327325,"line_start":210,"line_end":210,"column_start":23,"column_end":29},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3034},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":327476,"byte_end":327482,"line_start":216,"line_end":216,"column_start":24,"column_end":30},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3034},"to":{"krate":2,"index":10123}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":328125,"byte_end":328135,"line_start":233,"line_end":233,"column_start":6,"column_end":16},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3050},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":334294,"byte_end":334304,"line_start":405,"line_end":405,"column_start":18,"column_end":28},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3050},"to":{"krate":2,"index":12767}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/span_context.rs","byte_start":336434,"byte_end":336445,"line_start":458,"line_end":458,"column_start":6,"column_end":17},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3091},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/tracer.rs","byte_start":355930,"byte_end":355941,"line_start":364,"line_end":364,"column_start":6,"column_end":17},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285733,"byte_end":285743,"line_start":219,"line_end":219,"column_start":21,"column_end":31},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":285893,"byte_end":285903,"line_start":228,"line_end":228,"column_start":35,"column_end":45},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286042,"byte_end":286052,"line_start":234,"line_end":234,"column_start":25,"column_end":35},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286164,"byte_end":286174,"line_start":240,"line_end":240,"column_start":23,"column_end":33},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286306,"byte_end":286316,"line_start":246,"line_end":246,"column_start":29,"column_end":39},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3130},"to":{"krate":2,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286578,"byte_end":286582,"line_start":258,"line_end":258,"column_start":24,"column_end":28},"kind":"SuperTrait","from":{"krate":2,"index":3179},"to":{"krate":0,"index":2195}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286585,"byte_end":286589,"line_start":258,"line_end":258,"column_start":31,"column_end":35},"kind":"SuperTrait","from":{"krate":2,"index":3191},"to":{"krate":0,"index":2195}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":286597,"byte_end":286602,"line_start":258,"line_end":258,"column_start":43,"column_end":48},"kind":"SuperTrait","from":{"krate":2,"index":10110},"to":{"krate":0,"index":2195}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":287257,"byte_end":287262,"line_start":281,"line_end":281,"column_start":6,"column_end":11},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/opentelemetry-0.17.0/src/trace/mod.rs","byte_start":288330,"byte_end":288334,"line_start":318,"line_end":318,"column_start":6,"column_end":10},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3186},"to":{"krate":4294967295,"index":4294967295}}]}