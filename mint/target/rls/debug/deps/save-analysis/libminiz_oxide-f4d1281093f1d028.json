{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4","program":"/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","miniz_oxide","--edition=2018","/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=f4d1281093f1d028","-C","extra-filename=-f4d1281093f1d028","--out-dir","/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","-L","dependency=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","--extern","adler=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libadler-b02bd782a537dc72.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libminiz_oxide-f4d1281093f1d028.rmeta"},"prelude":{"crate_id":{"name":"miniz_oxide","disambiguator":[5408148906473094750,0]},"crate_root":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src","external_crates":[{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14116380118705386640,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/shared.rs","num":5,"id":{"name":"adler","disambiguator":[7032880666333692506,0]}}],"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":0,"byte_end":6262,"line_start":1,"line_end":208,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":669},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":896,"byte_end":910,"line_start":33,"line_end":33,"column_start":24,"column_end":38},"alias_span":null,"name":"mz_adler32_oxide","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":665},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":956,"byte_end":971,"line_start":34,"line_end":34,"column_start":25,"column_end":40},"alias_span":null,"name":"MZ_ADLER32_INIT","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":666},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":973,"byte_end":995,"line_start":34,"line_end":34,"column_start":42,"column_end":64},"alias_span":null,"name":"MZ_DEFAULT_WINDOW_BITS","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":0,"byte_end":6262,"line_start":1,"line_end":208,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":393},{"krate":0,"index":664},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":983},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1013},{"krate":0,"index":680},{"krate":0,"index":1016},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1040},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1083},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":682},{"krate":0,"index":685},{"krate":0,"index":1097},{"krate":0,"index":1101},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1113},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690}],"decl_id":null,"docs":" A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)\n DEFLATE/zlib encoder/decoder.\n The plan for this crate is to be used as a back-end for the\n [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the\n need to depend on a C library.","sig":null,"attributes":[{"value":"/ A pure rust replacement for the [miniz](https://github.com/richgel999/miniz)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":0,"byte_end":80,"line_start":1,"line_end":1,"column_start":1,"column_end":81}},{"value":"/ DEFLATE/zlib encoder/decoder.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":81,"byte_end":114,"line_start":2,"line_end":2,"column_start":1,"column_end":34}},{"value":"/ The plan for this crate is to be used as a back-end for the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":115,"byte_end":178,"line_start":3,"line_end":3,"column_start":1,"column_end":64}},{"value":"/ [flate2](https://github.com/alexcrichton/flate2-rs) crate and eventually remove the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":179,"byte_end":266,"line_start":4,"line_end":4,"column_start":1,"column_end":88}},{"value":"/ need to depend on a C library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":267,"byte_end":301,"line_start":5,"line_end":5,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":302,"byte_end":305,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":306,"byte_end":317,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/ ## Simple compression/decompression:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":318,"byte_end":358,"line_start":8,"line_end":8,"column_start":1,"column_end":41}},{"value":"/ ``` rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":359,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":372,"byte_end":375,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ use miniz_oxide::inflate::decompress_to_vec;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":376,"byte_end":424,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use miniz_oxide::deflate::compress_to_vec;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":425,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ fn roundtrip(data: &[u8]) {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":476,"byte_end":507,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/     let compressed = compress_to_vec(data, 6);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":508,"byte_end":558,"line_start":15,"line_end":15,"column_start":1,"column_end":51}},{"value":"/     let decompressed = decompress_to_vec(compressed.as_slice()).expect(\"Failed to decompress!\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":559,"byte_end":659,"line_start":16,"line_end":16,"column_start":1,"column_end":101}},{"value":"/ #   let _ = decompressed;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":660,"byte_end":689,"line_start":17,"line_end":17,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":690,"byte_end":695,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":696,"byte_end":699,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # roundtrip(b\"Test_data test data lalalal blabla\");","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":700,"byte_end":755,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":756,"byte_end":759,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":760,"byte_end":767,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":769,"byte_end":792,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"no_std","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":793,"byte_end":803,"line_start":25,"line_end":25,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"deflate","qualname":"::deflate","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":47},{"krate":0,"index":361},{"krate":0,"index":389},{"krate":0,"index":796},{"krate":0,"index":815},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392}],"decl_id":null,"docs":" This module contains functionality for compression.\n","sig":null,"attributes":[{"value":"/ This module contains functionality for compression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6264,"byte_end":6319,"line_start":1,"line_end":1,"column_start":1,"column_end":56}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::deflate::core","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":79},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":113},{"krate":0,"index":706},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":115},{"krate":0,"index":712},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":742},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":124},{"krate":0,"index":126},{"krate":0,"index":769},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":793},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":162},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":194},{"krate":0,"index":198},{"krate":0,"index":204},{"krate":0,"index":210},{"krate":0,"index":217},{"krate":0,"index":223},{"krate":0,"index":228},{"krate":0,"index":231},{"krate":0,"index":234},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":251},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":265},{"krate":0,"index":286},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":306},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":336},{"krate":0,"index":344},{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":358},{"krate":0,"index":360}],"decl_id":null,"docs":" Streaming compression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming compression functionality.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":14942,"byte_end":14982,"line_start":1,"line_end":1,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":115},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":23804,"byte_end":23817,"line_start":168,"line_end":168,"column_start":9,"column_end":22},"name":"deflate_flags","qualname":"::deflate::core::deflate_flags","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":116},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":23873,"byte_end":23896,"line_start":170,"line_end":170,"column_start":15,"column_end":38},"name":"TDEFL_WRITE_ZLIB_HEADER","qualname":"::deflate::core::deflate_flags::TDEFL_WRITE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Whether to use a zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Whether to use a zlib wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":23824,"byte_end":23858,"line_start":169,"line_end":169,"column_start":5,"column_end":39}}]},{"kind":"Const","id":{"krate":0,"index":117},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":23979,"byte_end":24000,"line_start":172,"line_end":172,"column_start":15,"column_end":36},"name":"TDEFL_COMPUTE_ADLER32","qualname":"::deflate::core::deflate_flags::TDEFL_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we compute the adler32 checksum.\n","sig":null,"attributes":[{"value":"/ Should we compute the adler32 checksum.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":23921,"byte_end":23964,"line_start":171,"line_end":171,"column_start":5,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":118},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24173,"byte_end":24198,"line_start":175,"line_end":175,"column_start":15,"column_end":40},"name":"TDEFL_GREEDY_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_GREEDY_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more\n bytes to check for better matches.)\n","sig":null,"attributes":[{"value":"/ Should we use greedy parsing (as opposed to lazy parsing where look ahead one or more","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24025,"byte_end":24114,"line_start":173,"line_end":173,"column_start":5,"column_end":94}},{"value":"/ bytes to check for better matches.)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24119,"byte_end":24158,"line_start":174,"line_end":174,"column_start":5,"column_end":44}}]},{"kind":"Const","id":{"krate":0,"index":119},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24352,"byte_end":24387,"line_start":178,"line_end":178,"column_start":15,"column_end":50},"name":"TDEFL_NONDETERMINISTIC_PARSING_FLAG","qualname":"::deflate::core::deflate_flags::TDEFL_NONDETERMINISTIC_PARSING_FLAG","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Used in miniz to skip zero-initializing hash and dict. We don't do this here, so\n this flag is ignored.\n","sig":null,"attributes":[{"value":"/ Used in miniz to skip zero-initializing hash and dict. We don't do this here, so","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24223,"byte_end":24307,"line_start":176,"line_end":176,"column_start":5,"column_end":89}},{"value":"/ this flag is ignored.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24312,"byte_end":24337,"line_start":177,"line_end":177,"column_start":5,"column_end":30}}]},{"kind":"Const","id":{"krate":0,"index":120},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24474,"byte_end":24491,"line_start":180,"line_end":180,"column_start":15,"column_end":32},"name":"TDEFL_RLE_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_RLE_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 0.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 0.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24412,"byte_end":24459,"line_start":179,"line_end":179,"column_start":5,"column_end":52}}]},{"kind":"Const","id":{"krate":0,"index":121},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24583,"byte_end":24603,"line_start":182,"line_end":182,"column_start":15,"column_end":35},"name":"TDEFL_FILTER_MATCHES","qualname":"::deflate::core::deflate_flags::TDEFL_FILTER_MATCHES","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Only use matches that are at least 6 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 6 bytes long.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24516,"byte_end":24568,"line_start":181,"line_end":181,"column_start":5,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":122},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24786,"byte_end":24815,"line_start":185,"line_end":185,"column_start":15,"column_end":44},"name":"TDEFL_FORCE_ALL_STATIC_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_STATIC_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output static blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output static blocks. (Blocks using the default huffman codes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24628,"byte_end":24722,"line_start":183,"line_end":183,"column_start":5,"column_end":99}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24727,"byte_end":24771,"line_start":184,"line_end":184,"column_start":5,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":123},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24919,"byte_end":24945,"line_start":187,"line_end":187,"column_start":15,"column_end":41},"name":"TDEFL_FORCE_ALL_RAW_BLOCKS","qualname":"::deflate::core::deflate_flags::TDEFL_FORCE_ALL_RAW_BLOCKS","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Force the compressor to only output raw/uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Force the compressor to only output raw/uncompressed blocks.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24840,"byte_end":24904,"line_start":186,"line_end":186,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":713},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25234,"byte_end":25241,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"Default","qualname":"::deflate::core::CompressionStrategy::Default","value":"CompressionStrategy::Default","parent":{"krate":0,"index":712},"children":[],"decl_id":null,"docs":" Don't use any of the special strategies.\n","sig":null,"attributes":[{"value":"/ Don't use any of the special strategies.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25185,"byte_end":25229,"line_start":196,"line_end":196,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":716},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25308,"byte_end":25316,"line_start":199,"line_end":199,"column_start":5,"column_end":13},"name":"Filtered","qualname":"::deflate::core::CompressionStrategy::Filtered","value":"CompressionStrategy::Filtered","parent":{"krate":0,"index":712},"children":[],"decl_id":null,"docs":" Only use matches that are at least 5 bytes long.\n","sig":null,"attributes":[{"value":"/ Only use matches that are at least 5 bytes long.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25251,"byte_end":25303,"line_start":198,"line_end":198,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":719},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25392,"byte_end":25403,"line_start":201,"line_end":201,"column_start":5,"column_end":16},"name":"HuffmanOnly","qualname":"::deflate::core::CompressionStrategy::HuffmanOnly","value":"CompressionStrategy::HuffmanOnly","parent":{"krate":0,"index":712},"children":[],"decl_id":null,"docs":" Don't look for matches, only huffman encode the literals.\n","sig":null,"attributes":[{"value":"/ Don't look for matches, only huffman encode the literals.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25326,"byte_end":25387,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":722},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25498,"byte_end":25501,"line_start":203,"line_end":203,"column_start":5,"column_end":8},"name":"RLE","qualname":"::deflate::core::CompressionStrategy::RLE","value":"CompressionStrategy::RLE","parent":{"krate":0,"index":712},"children":[],"decl_id":null,"docs":" Only look for matches with a distance of 1, i.e do run-length encoding only.\n","sig":null,"attributes":[{"value":"/ Only look for matches with a distance of 1, i.e do run-length encoding only.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25413,"byte_end":25493,"line_start":202,"line_end":202,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":725},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25638,"byte_end":25643,"line_start":206,"line_end":206,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::deflate::core::CompressionStrategy::Fixed","value":"CompressionStrategy::Fixed","parent":{"krate":0,"index":712},"children":[],"decl_id":null,"docs":" Only use static/fixed blocks. (Blocks using the default huffman codes\n specified in the deflate specification.)\n","sig":null,"attributes":[{"value":"/ Only use static/fixed blocks. (Blocks using the default huffman codes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25511,"byte_end":25584,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ specified in the deflate specification.)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25589,"byte_end":25633,"line_start":205,"line_end":205,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":712},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25159,"byte_end":25178,"line_start":195,"line_end":195,"column_start":10,"column_end":29},"name":"CompressionStrategy","qualname":"::deflate::core::CompressionStrategy","value":"enum CompressionStrategy {\n    Default = ,\n    Filtered = ,\n    HuffmanOnly = ,\n    RLE = ,\n    Fixed = ,\n}","parent":null,"children":[{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":722},{"krate":0,"index":725}],"decl_id":null,"docs":" Strategy setting for compression.","sig":null,"attributes":[{"value":"/ Strategy setting for compression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":24969,"byte_end":25006,"line_start":190,"line_end":190,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25007,"byte_end":25010,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ The non-default settings offer some special-case compression variants.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25011,"byte_end":25085,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25086,"byte_end":25098,"line_start":193,"line_end":193,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":743},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25886,"byte_end":25890,"line_start":215,"line_end":215,"column_start":5,"column_end":9},"name":"None","qualname":"::deflate::core::TDEFLFlush::None","value":"TDEFLFlush::None","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Normal operation.","sig":null,"attributes":[{"value":"/ Normal operation.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25764,"byte_end":25785,"line_start":212,"line_end":212,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25790,"byte_end":25793,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ Compress as much as there is space for, and then return waiting for more input.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25798,"byte_end":25881,"line_start":214,"line_end":214,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":746},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25974,"byte_end":25978,"line_start":218,"line_end":218,"column_start":5,"column_end":9},"name":"Sync","qualname":"::deflate::core::TDEFLFlush::Sync","value":"TDEFLFlush::Sync","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Try to flush all the current data and output an empty raw block.\n","sig":null,"attributes":[{"value":"/ Try to flush all the current data and output an empty raw block.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25901,"byte_end":25969,"line_start":217,"line_end":217,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":749},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26121,"byte_end":26125,"line_start":222,"line_end":222,"column_start":5,"column_end":9},"name":"Full","qualname":"::deflate::core::TDEFLFlush::Full","value":"TDEFLFlush::Full","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not\n depend on previous data.\n","sig":null,"attributes":[{"value":"/ Same as [`Sync`][Self::Sync], but reset the dictionary so that the following data does not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25989,"byte_end":26083,"line_start":220,"line_end":220,"column_start":5,"column_end":99}},{"value":"/ depend on previous data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26088,"byte_end":26116,"line_start":221,"line_end":221,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":752},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26278,"byte_end":26284,"line_start":227,"line_end":227,"column_start":5,"column_end":11},"name":"Finish","qualname":"::deflate::core::TDEFLFlush::Finish","value":"TDEFLFlush::Finish","parent":{"krate":0,"index":742},"children":[],"decl_id":null,"docs":" Try to flush everything and end the deflate stream.","sig":null,"attributes":[{"value":"/ Try to flush everything and end the deflate stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26136,"byte_end":26191,"line_start":224,"line_end":224,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26196,"byte_end":26199,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ On success this will yield a [`TDEFLStatus::Done`] return status.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26204,"byte_end":26273,"line_start":226,"line_end":226,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":742},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25747,"byte_end":25757,"line_start":211,"line_end":211,"column_start":10,"column_end":20},"name":"TDEFLFlush","qualname":"::deflate::core::TDEFLFlush","value":"enum TDEFLFlush { None = , Sync = , Full = , Finish = , }","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":749},{"krate":0,"index":752}],"decl_id":null,"docs":" A list of deflate flush types.\n","sig":null,"attributes":[{"value":"/ A list of deflate flush types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":25652,"byte_end":25686,"line_start":209,"line_end":209,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26336,"byte_end":26340,"line_start":231,"line_end":231,"column_start":8,"column_end":12},"name":"from","qualname":"<TDEFLFlush as core::convert::From>::from","value":"fn from(MZFlush) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26692,"byte_end":26695,"line_start":243,"line_end":243,"column_start":12,"column_end":15},"name":"new","qualname":"<TDEFLFlush>::new","value":"fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":770},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27280,"byte_end":27288,"line_start":262,"line_end":262,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::deflate::core::TDEFLStatus::BadParam","value":"TDEFLStatus::BadParam","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Usage error.","sig":null,"attributes":[{"value":"/ Usage error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27097,"byte_end":27113,"line_start":258,"line_end":258,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27118,"byte_end":27121,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This indicates that either the [`CompressorOxide`] experienced a previous error, or the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27126,"byte_end":27217,"line_start":260,"line_end":260,"column_start":5,"column_end":96}},{"value":"/ stream has already been [`TDEFLFlush::Finish`]'d.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27222,"byte_end":27275,"line_start":261,"line_end":261,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":773},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27406,"byte_end":27418,"line_start":267,"line_end":267,"column_start":5,"column_end":17},"name":"PutBufFailed","qualname":"::deflate::core::TDEFLStatus::PutBufFailed","value":"TDEFLStatus::PutBufFailed","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Error putting data into output buffer.","sig":null,"attributes":[{"value":"/ Error putting data into output buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27300,"byte_end":27342,"line_start":264,"line_end":264,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27347,"byte_end":27350,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ This usually indicates a too-small buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27355,"byte_end":27401,"line_start":266,"line_end":266,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":776},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27470,"byte_end":27474,"line_start":270,"line_end":270,"column_start":5,"column_end":9},"name":"Okay","qualname":"::deflate::core::TDEFLStatus::Okay","value":"TDEFLStatus::Okay","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Compression succeeded normally.\n","sig":null,"attributes":[{"value":"/ Compression succeeded normally.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27430,"byte_end":27465,"line_start":269,"line_end":269,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":779},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27636,"byte_end":27640,"line_start":275,"line_end":275,"column_start":5,"column_end":9},"name":"Done","qualname":"::deflate::core::TDEFLStatus::Done","value":"TDEFLStatus::Done","parent":{"krate":0,"index":769},"children":[],"decl_id":null,"docs":" Compression succeeded and the deflate stream was ended.","sig":null,"attributes":[{"value":"/ Compression succeeded and the deflate stream was ended.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27485,"byte_end":27544,"line_start":272,"line_end":272,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27549,"byte_end":27552,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This is the result of calling compression with [`TDEFLFlush::Finish`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27557,"byte_end":27631,"line_start":274,"line_end":274,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":769},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27079,"byte_end":27090,"line_start":257,"line_end":257,"column_start":10,"column_end":21},"name":"TDEFLStatus","qualname":"::deflate::core::TDEFLStatus","value":"enum TDEFLStatus { BadParam = , PutBufFailed = , Okay = , Done = , }","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779}],"decl_id":null,"docs":" Return status of compression.\n","sig":null,"attributes":[{"value":"/ Return status of compression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26972,"byte_end":27005,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":27006,"byte_end":27018,"line_start":255,"line_end":255,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32034,"byte_end":32049,"line_start":414,"line_end":414,"column_start":12,"column_end":27},"name":"CompressorOxide","qualname":"::deflate::core::CompressorOxide","value":"CompressorOxide {  }","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161}],"decl_id":null,"docs":" Main compression struct.\n","sig":null,"attributes":[{"value":"/ Main compression struct.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":31994,"byte_end":32022,"line_start":413,"line_end":413,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32347,"byte_end":32350,"line_start":426,"line_end":426,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressorOxide>::new","value":"fn new(u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new `CompressorOxide` with the given flags.","sig":null,"attributes":[{"value":"/ Create a new `CompressorOxide` with the given flags.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32174,"byte_end":32230,"line_start":422,"line_end":422,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32235,"byte_end":32238,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32243,"byte_end":32254,"line_start":424,"line_end":424,"column_start":5,"column_end":16}},{"value":"/ This function may be changed to take different parameters in the future.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32259,"byte_end":32335,"line_start":425,"line_end":425,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32762,"byte_end":32769,"line_start":438,"line_end":438,"column_start":18,"column_end":25},"name":"adler32","qualname":"<CompressorOxide>::adler32","value":"const fn adler32(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the adler32 checksum of the currently encoded data.\n","sig":null,"attributes":[{"value":"/ Get the adler32 checksum of the currently encoded data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32685,"byte_end":32744,"line_start":437,"line_end":437,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32950,"byte_end":32968,"line_start":444,"line_end":444,"column_start":18,"column_end":36},"name":"prev_return_status","qualname":"<CompressorOxide>::prev_return_status","value":"const fn prev_return_status(&Self) -> TDEFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Get the return status of the previous [`compress`](fn.compress.html)\n call with this compressor.\n","sig":null,"attributes":[{"value":"/ Get the return status of the previous [`compress`](fn.compress.html)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32825,"byte_end":32897,"line_start":442,"line_end":442,"column_start":5,"column_end":77}},{"value":"/ call with this compressor.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32902,"byte_end":32932,"line_start":443,"line_end":443,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33213,"byte_end":33218,"line_start":452,"line_end":452,"column_start":18,"column_end":23},"name":"flags","qualname":"<CompressorOxide>::flags","value":"const fn flags(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Get the raw compressor flags.","sig":null,"attributes":[{"value":"/ Get the raw compressor flags.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33043,"byte_end":33076,"line_start":448,"line_end":448,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33081,"byte_end":33084,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33089,"byte_end":33100,"line_start":450,"line_end":450,"column_start":5,"column_end":16}},{"value":"/ This function may be deprecated or changed in the future to use more rust-style flags.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33105,"byte_end":33195,"line_start":451,"line_end":451,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33371,"byte_end":33382,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"data_format","qualname":"<CompressorOxide>::data_format","value":"fn data_format(&Self) -> DataFormat","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the compressor is wrapping the data in a zlib format or not.\n","sig":null,"attributes":[{"value":"/ Returns whether the compressor is wrapping the data in a zlib format or not.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33279,"byte_end":33359,"line_start":456,"line_end":456,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33692,"byte_end":33697,"line_start":468,"line_end":468,"column_start":12,"column_end":17},"name":"reset","qualname":"<CompressorOxide>::reset","value":"fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset the state of the compressor, keeping the same parameters.","sig":null,"attributes":[{"value":"/ Reset the state of the compressor, keeping the same parameters.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33565,"byte_end":33632,"line_start":465,"line_end":465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33637,"byte_end":33640,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This avoids re-allocating data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33645,"byte_end":33680,"line_start":467,"line_end":467,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34234,"byte_end":34255,"line_start":482,"line_end":482,"column_start":12,"column_end":33},"name":"set_compression_level","qualname":"<CompressorOxide>::set_compression_level","value":"fn set_compression_level(&mut Self, CompressionLevel)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":33984,"byte_end":34032,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34037,"byte_end":34040,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compression has started is supported.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34045,"byte_end":34119,"line_start":479,"line_end":479,"column_start":5,"column_end":79}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34124,"byte_end":34135,"line_start":480,"line_end":480,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34140,"byte_end":34222,"line_start":481,"line_end":481,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34675,"byte_end":34700,"line_start":492,"line_end":492,"column_start":12,"column_end":37},"name":"set_compression_level_raw","qualname":"<CompressorOxide>::set_compression_level_raw","value":"fn set_compression_level_raw(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Set the compression level of the compressor using an integer value.","sig":null,"attributes":[{"value":"/ Set the compression level of the compressor using an integer value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34402,"byte_end":34473,"line_start":487,"line_end":487,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34478,"byte_end":34481,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ Using this to change level after compression has started is supported.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34486,"byte_end":34560,"line_start":489,"line_end":489,"column_start":5,"column_end":79}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34565,"byte_end":34576,"line_start":490,"line_end":490,"column_start":5,"column_end":16}},{"value":"/ The compression strategy will be reset to the default one when this is called.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34581,"byte_end":34663,"line_start":491,"line_end":491,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35292,"byte_end":35312,"line_start":506,"line_end":506,"column_start":12,"column_end":32},"name":"set_format_and_level","qualname":"<CompressorOxide>::set_format_and_level","value":"fn set_format_and_level(&mut Self, DataFormat, u8)","parent":null,"children":[],"decl_id":null,"docs":" Update the compression settings of the compressor.","sig":null,"attributes":[{"value":"/ Update the compression settings of the compressor.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34827,"byte_end":34881,"line_start":497,"line_end":497,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34886,"byte_end":34889,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ Changing the `DataFormat` after compression has started will result in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34894,"byte_end":34968,"line_start":499,"line_end":499,"column_start":5,"column_end":79}},{"value":"/ a corrupted stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":34973,"byte_end":34996,"line_start":500,"line_end":500,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35001,"byte_end":35004,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35009,"byte_end":35020,"line_start":502,"line_end":502,"column_start":5,"column_end":16}},{"value":"/ This function mainly intended for setting the initial settings after e.g creating with","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35025,"byte_end":35115,"line_start":503,"line_end":503,"column_start":5,"column_end":95}},{"value":"/ `default` or after calling `CompressorOxide::reset()`, and behaviour may be changed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35120,"byte_end":35207,"line_start":504,"line_end":504,"column_start":5,"column_end":92}},{"value":"/ to disallow calling it after starting compression in the future.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35212,"byte_end":35280,"line_start":505,"line_end":505,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35798,"byte_end":35805,"line_start":521,"line_end":521,"column_start":8,"column_end":15},"name":"default","qualname":"<CompressorOxide as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":" Initialize the compressor with a level of 4, zlib wrapper and\n the default strategy.\n","sig":null,"attributes":[{"value":"/ Initialize the compressor with a level of 4, zlib wrapper and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35673,"byte_end":35738,"line_start":518,"line_end":518,"column_start":5,"column_end":70}},{"value":"/ the default strategy.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35743,"byte_end":35768,"line_start":519,"line_end":519,"column_start":5,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35773,"byte_end":35790,"line_start":520,"line_end":520,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":174},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36216,"byte_end":36228,"line_start":534,"line_end":534,"column_start":12,"column_end":24},"name":"CallbackFunc","qualname":"::deflate::core::CallbackFunc","value":"CallbackFunc { put_buf_func }","parent":null,"children":[{"krate":0,"index":176}],"decl_id":null,"docs":" Callback function and user used in `compress_to_output`.\n","sig":null,"attributes":[{"value":"/ Callback function and user used in `compress_to_output`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36144,"byte_end":36204,"line_start":533,"line_end":533,"column_start":1,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":176},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36243,"byte_end":36255,"line_start":535,"line_end":535,"column_start":9,"column_end":21},"name":"put_buf_func","qualname":"::deflate::core::CallbackFunc::put_buf_func","value":"&'a mut (dyn for<'r> core::ops::FnMut(&'r [u8]) -> bool + 'a)","parent":{"krate":0,"index":174},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":355},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95488,"byte_end":95496,"line_start":2211,"line_end":2211,"column_start":8,"column_end":16},"name":"compress","qualname":"::deflate::core::compress","value":"fn compress(&mut CompressorOxide, &[u8], &mut [u8], TDEFLFlush)\n-> (TDEFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Tries to compress as much as possible from `in_buf` and\n puts compressed output into `out_buf`.","sig":null,"attributes":[{"value":"/ Main compression function. Tries to compress as much as possible from `in_buf` and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94652,"byte_end":94738,"line_start":2195,"line_end":2195,"column_start":1,"column_end":87}},{"value":"/ puts compressed output into `out_buf`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94739,"byte_end":94781,"line_start":2196,"line_end":2196,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94782,"byte_end":94785,"line_start":2197,"line_end":2197,"column_start":1,"column_end":4}},{"value":"/ The value of `flush` determines if the compressor should attempt to flush all output","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94786,"byte_end":94874,"line_start":2198,"line_end":2198,"column_start":1,"column_end":89}},{"value":"/ and alternatively try to finish the stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94875,"byte_end":94922,"line_start":2199,"line_end":2199,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94923,"byte_end":94926,"line_start":2200,"line_end":2200,"column_start":1,"column_end":4}},{"value":"/ Use [`TDEFLFlush::Finish`] on the final call to signal that the stream is finishing.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":94927,"byte_end":95015,"line_start":2201,"line_end":2201,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95016,"byte_end":95019,"line_start":2202,"line_end":2202,"column_start":1,"column_end":4}},{"value":"/ Note that this function does not keep track of whether a flush marker has been output, so","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95020,"byte_end":95113,"line_start":2203,"line_end":2203,"column_start":1,"column_end":94}},{"value":"/ if called using [`TDEFLFlush::Sync`], the caller needs to ensure there is enough space in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95114,"byte_end":95211,"line_start":2204,"line_end":2204,"column_start":1,"column_end":98}},{"value":"/ output buffer if they want to avoid repeated flush markers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95212,"byte_end":95275,"line_start":2205,"line_end":2205,"column_start":1,"column_end":64}},{"value":"/ See #105 for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95276,"byte_end":95301,"line_start":2206,"line_end":2206,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95302,"byte_end":95305,"line_start":2207,"line_end":2207,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95306,"byte_end":95319,"line_start":2208,"line_end":2208,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95320,"byte_end":95409,"line_start":2209,"line_end":2209,"column_start":1,"column_end":90}},{"value":"/ in the input buffer and the current position in the output buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95410,"byte_end":95480,"line_start":2210,"line_end":2210,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":356},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":96048,"byte_end":96066,"line_start":2232,"line_end":2232,"column_start":8,"column_end":26},"name":"compress_to_output","qualname":"::deflate::core::compress_to_output","value":"fn compress_to_output<impl FnMut(&[u8]) -> bool>(&mut CompressorOxide, &[u8],\nTDEFLFlush, impl FnMut(&[u8]) -> bool) -> (TDEFLStatus, usize) where\nimpl FnMut(&[u8]) -> bool: for<'_> FnMut(&'_ [u8]) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Main compression function. Callbacks output.","sig":null,"attributes":[{"value":"/ Main compression function. Callbacks output.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95746,"byte_end":95794,"line_start":2224,"line_end":2224,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95795,"byte_end":95798,"line_start":2225,"line_end":2225,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95799,"byte_end":95812,"line_start":2226,"line_end":2226,"column_start":1,"column_end":14}},{"value":"/ Returns a tuple containing the current status of the compressor, the current position","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95813,"byte_end":95902,"line_start":2227,"line_end":2227,"column_start":1,"column_end":90}},{"value":"/ in the input buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95903,"byte_end":95927,"line_start":2228,"line_end":2228,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95928,"byte_end":95931,"line_start":2229,"line_end":2229,"column_start":1,"column_end":4}},{"value":"/ The caller is responsible for ensuring the `CallbackFunc` struct will not cause undefined","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":95932,"byte_end":96025,"line_start":2230,"line_end":2230,"column_start":1,"column_end":94}},{"value":"/ behaviour.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":96026,"byte_end":96040,"line_start":2231,"line_end":2231,"column_start":1,"column_end":15}}]},{"kind":"Function","id":{"krate":0,"index":360},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":100035,"byte_end":100068,"line_start":2351,"line_end":2351,"column_start":8,"column_end":41},"name":"create_comp_flags_from_zip_params","qualname":"::deflate::core::create_comp_flags_from_zip_params","value":"fn create_comp_flags_from_zip_params(i32, i32, i32) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Create a set of compression flags using parameters used by zlib and other compressors.\n Mainly intended for use with transition from c libraries as it deals with raw integers.","sig":null,"attributes":[{"value":"/ Create a set of compression flags using parameters used by zlib and other compressors.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99386,"byte_end":99476,"line_start":2339,"line_end":2339,"column_start":1,"column_end":91}},{"value":"/ Mainly intended for use with transition from c libraries as it deals with raw integers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99477,"byte_end":99568,"line_start":2340,"line_end":2340,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99569,"byte_end":99572,"line_start":2341,"line_end":2341,"column_start":1,"column_end":4}},{"value":"/ # Parameters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99573,"byte_end":99589,"line_start":2342,"line_end":2342,"column_start":1,"column_end":17}},{"value":"/ `level` determines compression level. Clamped to maximum of 10. Negative values result in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99590,"byte_end":99683,"line_start":2343,"line_end":2343,"column_start":1,"column_end":94}},{"value":"/ `CompressionLevel::DefaultLevel`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99684,"byte_end":99721,"line_start":2344,"line_end":2344,"column_start":1,"column_end":38}},{"value":"/ `window_bits`: Above 0, wraps the stream in a zlib wrapper, 0 or negative for a raw deflate","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99722,"byte_end":99817,"line_start":2345,"line_end":2345,"column_start":1,"column_end":96}},{"value":"/ stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99818,"byte_end":99829,"line_start":2346,"line_end":2346,"column_start":1,"column_end":12}},{"value":"/ `strategy`: Sets the strategy if this conforms to any of the values in `CompressionStrategy`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99830,"byte_end":99927,"line_start":2347,"line_end":2347,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99928,"byte_end":99931,"line_start":2348,"line_end":2348,"column_start":1,"column_end":4}},{"value":"/ # Notes","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99932,"byte_end":99943,"line_start":2349,"line_end":2349,"column_start":1,"column_end":12}},{"value":"/ This function may be removed or moved to the `miniz_oxide_c_api` in the future.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":99944,"byte_end":100027,"line_start":2350,"line_end":2350,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":361},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::deflate::stream","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388}],"decl_id":null,"docs":" Extra streaming compression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming compression functionality.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103540,"byte_end":103586,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103587,"byte_end":103590,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly intended for use to build a higher-level wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103591,"byte_end":103669,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103670,"byte_end":103673,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ There is no DeflateState as the needed state is contained in the compressor struct itself.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103674,"byte_end":103768,"line_start":5,"line_end":5,"column_start":1,"column_end":95}}]},{"kind":"Function","id":{"krate":0,"index":388},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104456,"byte_end":104463,"line_start":22,"line_end":22,"column_start":8,"column_end":15},"name":"deflate","qualname":"::deflate::stream::deflate","value":"fn deflate(&mut CompressorOxide, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to compress from input to output with the given [`CompressorOxide`].","sig":null,"attributes":[{"value":"/ Try to compress from input to output with the given [`CompressorOxide`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103906,"byte_end":103982,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103983,"byte_end":103986,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":103987,"byte_end":103999,"line_start":12,"line_end":12,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104000,"byte_end":104003,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Buf`] If the size of the `output` slice is empty or no progress was made due","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104004,"byte_end":104103,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/ to lack of expected input data, or if called without [`MZFlush::Finish`] after the compression","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104104,"byte_end":104202,"line_start":15,"line_end":15,"column_start":1,"column_end":99}},{"value":"/ was already finished.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104203,"byte_end":104228,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104229,"byte_end":104232,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Param`] if the compressor parameters are set wrong.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104233,"byte_end":104307,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104308,"byte_end":104311,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Stream`] when lower-level decompressor returns a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104312,"byte_end":104383,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ [`TDEFLStatus::PutBufFailed`]; may not actually be possible.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/stream.rs","byte_start":104384,"byte_end":104448,"line_start":21,"line_end":21,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":797},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6854,"byte_end":6867,"line_start":18,"line_end":18,"column_start":5,"column_end":18},"name":"NoCompression","qualname":"::deflate::CompressionLevel::NoCompression","value":"CompressionLevel::NoCompression","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Don't do any compression, only output uncompressed blocks.\n","sig":null,"attributes":[{"value":"/ Don't do any compression, only output uncompressed blocks.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6787,"byte_end":6849,"line_start":17,"line_end":17,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":800},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6967,"byte_end":6976,"line_start":20,"line_end":20,"column_start":5,"column_end":14},"name":"BestSpeed","qualname":"::deflate::CompressionLevel::BestSpeed","value":"CompressionLevel::BestSpeed","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Fast compression. Uses a special compression routine that is optimized for speed.\n","sig":null,"attributes":[{"value":"/ Fast compression. Uses a special compression routine that is optimized for speed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6877,"byte_end":6962,"line_start":19,"line_end":19,"column_start":5,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":803},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7065,"byte_end":7080,"line_start":22,"line_end":22,"column_start":5,"column_end":20},"name":"BestCompression","qualname":"::deflate::CompressionLevel::BestCompression","value":"CompressionLevel::BestCompression","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Slow/high compression. Do a lot of checks to try to find good matches.\n","sig":null,"attributes":[{"value":"/ Slow/high compression. Do a lot of checks to try to find good matches.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6986,"byte_end":7060,"line_start":21,"line_end":21,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":806},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7134,"byte_end":7149,"line_start":24,"line_end":24,"column_start":5,"column_end":20},"name":"UberCompression","qualname":"::deflate::CompressionLevel::UberCompression","value":"CompressionLevel::UberCompression","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Even more checks, can be very slow.\n","sig":null,"attributes":[{"value":"/ Even more checks, can be very slow.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7090,"byte_end":7129,"line_start":23,"line_end":23,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":809},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7218,"byte_end":7230,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"DefaultLevel","qualname":"::deflate::CompressionLevel::DefaultLevel","value":"CompressionLevel::DefaultLevel","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Default compromise between speed and compression.\n","sig":null,"attributes":[{"value":"/ Default compromise between speed and compression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7160,"byte_end":7213,"line_start":25,"line_end":25,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":812},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7283,"byte_end":7301,"line_start":28,"line_end":28,"column_start":5,"column_end":23},"name":"DefaultCompression","qualname":"::deflate::CompressionLevel::DefaultCompression","value":"CompressionLevel::DefaultCompression","parent":{"krate":0,"index":796},"children":[],"decl_id":null,"docs":" Use the default compression level.\n","sig":null,"attributes":[{"value":"/ Use the default compression level.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":7240,"byte_end":7278,"line_start":27,"line_end":27,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":796},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6764,"byte_end":6780,"line_start":16,"line_end":16,"column_start":10,"column_end":26},"name":"CompressionLevel","qualname":"::deflate::CompressionLevel","value":"enum CompressionLevel {\n    NoCompression = ,\n    BestSpeed = ,\n    BestCompression = ,\n    UberCompression = ,\n    DefaultLevel = ,\n    DefaultCompression = ,\n}","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":806},{"krate":0,"index":809},{"krate":0,"index":812}],"decl_id":null,"docs":" How much processing the compressor should do to compress the data.\n `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number\n of checks for matches in the hash chains and whether to use lazy or greedy parsing.\n","sig":null,"attributes":[{"value":"/ How much processing the compressor should do to compress the data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6435,"byte_end":6505,"line_start":11,"line_end":11,"column_start":1,"column_end":71}},{"value":"/ `NoCompression` and `Bestspeed` have special meanings, the other levels determine the number","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6506,"byte_end":6602,"line_start":12,"line_end":12,"column_start":1,"column_end":97}},{"value":"/ of checks for matches in the hash chains and whether to use lazy or greedy parsing.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6603,"byte_end":6690,"line_start":13,"line_end":13,"column_start":1,"column_end":88}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6691,"byte_end":6703,"line_start":14,"line_end":14,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":390},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":9396,"byte_end":9411,"line_start":110,"line_end":110,"column_start":8,"column_end":23},"name":"compress_to_vec","qualname":"::deflate::compress_to_vec","value":"fn compress_to_vec(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10).\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":9302,"byte_end":9388,"line_start":109,"line_end":109,"column_start":1,"column_end":87}}]},{"kind":"Function","id":{"krate":0,"index":391},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":9622,"byte_end":9642,"line_start":116,"line_end":116,"column_start":8,"column_end":28},"name":"compress_to_vec_zlib","qualname":"::deflate::compress_to_vec_zlib","value":"fn compress_to_vec_zlib(&[u8], u8) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Compress the input data to a vector, using the specified compression level (0-10), and with a\n zlib wrapper.\n","sig":null,"attributes":[{"value":"/ Compress the input data to a vector, using the specified compression level (0-10), and with a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":9499,"byte_end":9596,"line_start":114,"line_end":114,"column_start":1,"column_end":98}},{"value":"/ zlib wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":9597,"byte_end":9614,"line_start":115,"line_end":115,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":393},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inflate","qualname":"::inflate","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":403},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":541},{"krate":0,"index":556},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":947},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659}],"decl_id":null,"docs":" This module contains functionality for decompression.\n","sig":null,"attributes":[{"value":"/ This module contains functionality for decompression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":107566,"byte_end":107623,"line_start":1,"line_end":1,"column_start":1,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":409},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"core","qualname":"::inflate::core","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":439},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":488},{"krate":0,"index":493},{"krate":0,"index":829},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":498},{"krate":0,"index":501},{"krate":0,"index":912},{"krate":0,"index":914},{"krate":0,"index":916},{"krate":0,"index":918},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":519},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":920},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540}],"decl_id":null,"docs":" Streaming decompression functionality.\n","sig":null,"attributes":[{"value":"/ Streaming decompression functionality.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":118116,"byte_end":118158,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Const","id":{"krate":0,"index":431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":118341,"byte_end":118359,"line_start":11,"line_end":11,"column_start":11,"column_end":29},"name":"TINFL_LZ_DICT_SIZE","qualname":"::inflate::core::TINFL_LZ_DICT_SIZE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":457},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122090,"byte_end":122103,"line_start":108,"line_end":108,"column_start":9,"column_end":22},"name":"inflate_flags","qualname":"::inflate::core::inflate_flags","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","parent":null,"children":[{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462}],"decl_id":null,"docs":" Flags to [`decompress()`] to control how inflation works.","sig":null,"attributes":[{"value":"/ Flags to [`decompress()`] to control how inflation works.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":121970,"byte_end":122031,"line_start":105,"line_end":105,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122032,"byte_end":122035,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ These define bits for a bitmask argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122036,"byte_end":122081,"line_start":107,"line_end":107,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":458},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122331,"byte_end":122359,"line_start":113,"line_end":113,"column_start":15,"column_end":43},"name":"TINFL_FLAG_PARSE_ZLIB_HEADER","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_PARSE_ZLIB_HEADER","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Should we try to parse a zlib header?","sig":null,"attributes":[{"value":"/ Should we try to parse a zlib header?","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122110,"byte_end":122151,"line_start":109,"line_end":109,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122156,"byte_end":122159,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ If unset, [`decompress()`] will expect an RFC1951 deflate stream.  If set, it will expect an","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122164,"byte_end":122260,"line_start":111,"line_end":111,"column_start":5,"column_end":101}},{"value":"/ RFC1950 zlib wrapper around the deflate stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122265,"byte_end":122316,"line_start":112,"line_end":112,"column_start":5,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":459},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123183,"byte_end":123208,"line_start":125,"line_end":125,"column_start":15,"column_end":40},"name":"TINFL_FLAG_HAS_MORE_INPUT","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" There will be more input that hasn't been given to the decompressor yet.","sig":null,"attributes":[{"value":"/ There will be more input that hasn't been given to the decompressor yet.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122375,"byte_end":122451,"line_start":115,"line_end":115,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122456,"byte_end":122459,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This is useful when you want to decompress what you have so far,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122464,"byte_end":122532,"line_start":117,"line_end":117,"column_start":5,"column_end":73}},{"value":"/ even if you know there is probably more input that hasn't gotten here yet (_e.g._, over a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122537,"byte_end":122630,"line_start":118,"line_end":118,"column_start":5,"column_end":98}},{"value":"/ network connection).  When [`decompress()`][super::decompress] reaches the end of the input","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122635,"byte_end":122730,"line_start":119,"line_end":119,"column_start":5,"column_end":100}},{"value":"/ without finding the end of the compressed stream, it will return","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122735,"byte_end":122803,"line_start":120,"line_end":120,"column_start":5,"column_end":73}},{"value":"/ [`TINFLStatus::NeedsMoreInput`][super::TINFLStatus::NeedsMoreInput] if this is set,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122808,"byte_end":122895,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ indicating that you should get more data before calling again.  If not set, it will return","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122900,"byte_end":122994,"line_start":122,"line_end":122,"column_start":5,"column_end":99}},{"value":"/ [`TINFLStatus::FailedCannotMakeProgress`][super::TINFLStatus::FailedCannotMakeProgress]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":122999,"byte_end":123090,"line_start":123,"line_end":123,"column_start":5,"column_end":96}},{"value":"/ suggesting the stream is corrupt, since you claimed it was all there.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123095,"byte_end":123168,"line_start":124,"line_end":124,"column_start":5,"column_end":78}}]},{"kind":"Const","id":{"krate":0,"index":460},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123284,"byte_end":123324,"line_start":128,"line_end":128,"column_start":15,"column_end":55},"name":"TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" The output buffer should not wrap around.\n","sig":null,"attributes":[{"value":"/ The output buffer should not wrap around.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123224,"byte_end":123269,"line_start":127,"line_end":127,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":461},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123656,"byte_end":123682,"line_start":136,"line_end":136,"column_start":15,"column_end":41},"name":"TINFL_FLAG_COMPUTE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_COMPUTE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.","sig":null,"attributes":[{"value":"/ Calculate the adler32 checksum of the output data even if we're not inflating a zlib stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123340,"byte_end":123436,"line_start":130,"line_end":130,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123441,"byte_end":123444,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ If [`TINFL_FLAG_IGNORE_ADLER32`] is specified, it will override this.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123449,"byte_end":123522,"line_start":132,"line_end":132,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123527,"byte_end":123530,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ NOTE: Enabling/disabling this between calls to decompress will result in an incorect","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123535,"byte_end":123623,"line_start":134,"line_end":134,"column_start":5,"column_end":93}},{"value":"/ checksum.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123628,"byte_end":123641,"line_start":135,"line_end":135,"column_start":5,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":462},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124220,"byte_end":124245,"line_start":148,"line_end":148,"column_start":15,"column_end":40},"name":"TINFL_FLAG_IGNORE_ADLER32","qualname":"::inflate::core::inflate_flags::TINFL_FLAG_IGNORE_ADLER32","value":"u32","parent":null,"children":[],"decl_id":null,"docs":" Ignore adler32 checksum even if we are inflating a zlib stream.","sig":null,"attributes":[{"value":"/ Ignore adler32 checksum even if we are inflating a zlib stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123698,"byte_end":123765,"line_start":138,"line_end":138,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123770,"byte_end":123773,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Overrides [`TINFL_FLAG_COMPUTE_ADLER32`] if both are enabled.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123778,"byte_end":123843,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123848,"byte_end":123851,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ NOTE: This flag does not exist in miniz as it does not support this and is a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123856,"byte_end":123936,"line_start":142,"line_end":142,"column_start":5,"column_end":85}},{"value":"/ custom addition for miniz_oxide.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123941,"byte_end":123977,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123982,"byte_end":123985,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ NOTE: Should not be changed from enabled to disabled after decompression has started,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":123990,"byte_end":124079,"line_start":145,"line_end":145,"column_start":5,"column_end":94}},{"value":"/ this will result in checksum failure (outside the unlikely event where the checksum happens","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124084,"byte_end":124179,"line_start":146,"line_end":146,"column_start":5,"column_end":100}},{"value":"/ to match anyway).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124184,"byte_end":124205,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":467},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124506,"byte_end":124523,"line_start":163,"line_end":163,"column_start":12,"column_end":29},"name":"DecompressorOxide","qualname":"::inflate::core::DecompressorOxide","value":"DecompressorOxide {  }","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486}],"decl_id":null,"docs":" Main decompression struct.","sig":null,"attributes":[{"value":"/ Main decompression struct.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124460,"byte_end":124490,"line_start":161,"line_end":161,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":124491,"byte_end":124494,"line_start":162,"line_end":162,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125704,"byte_end":125707,"line_start":200,"line_end":200,"column_start":12,"column_end":15},"name":"new","qualname":"<DecompressorOxide>::new","value":"fn new() -> DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125631,"byte_end":125692,"line_start":199,"line_end":199,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125844,"byte_end":125848,"line_start":206,"line_end":206,"column_start":12,"column_end":16},"name":"init","qualname":"<DecompressorOxide>::init","value":"fn init(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Set the current state to `Start`.\n","sig":null,"attributes":[{"value":"/ Set the current state to `Start`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125781,"byte_end":125818,"line_start":204,"line_end":204,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125823,"byte_end":125832,"line_start":205,"line_end":205,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126153,"byte_end":126160,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"adler32","qualname":"<DecompressorOxide>::adler32","value":"fn adler32(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 checksum of the currently decompressed data.\n Note: Will return Some(1) if decompressing zlib but ignoring adler32.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 checksum of the currently decompressed data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125981,"byte_end":126049,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/ Note: Will return Some(1) if decompressing zlib but ignoring adler32.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126054,"byte_end":126127,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126132,"byte_end":126141,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126466,"byte_end":126480,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"adler32_header","qualname":"<DecompressorOxide>::adler32_header","value":"fn adler32_header(&Self) -> Option<u32>","parent":null,"children":[],"decl_id":null,"docs":" Returns the adler32 that was read from the zlib header if it exists.\n","sig":null,"attributes":[{"value":"/ Returns the adler32 that was read from the zlib header if it exists.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126368,"byte_end":126440,"line_start":222,"line_end":222,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126445,"byte_end":126454,"line_start":223,"line_end":223,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126824,"byte_end":126831,"line_start":236,"line_end":236,"column_start":8,"column_end":15},"name":"default","qualname":"<DecompressorOxide as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":" Create a new tinfl_decompressor with all fields set to 0.\n","sig":null,"attributes":[{"value":"/ Create a new tinfl_decompressor with all fields set to 0.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126733,"byte_end":126794,"line_start":234,"line_end":234,"column_start":5,"column_end":66}},{"value":"inline(always)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126799,"byte_end":126816,"line_start":235,"line_end":235,"column_start":5,"column_end":22}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156503,"byte_end":156513,"line_start":1067,"line_end":1067,"column_start":8,"column_end":18},"name":"decompress","qualname":"::inflate::core::decompress","value":"fn decompress(&mut DecompressorOxide, &[u8], &mut [u8], usize, u32)\n-> (TINFLStatus, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is\n empty, `out` is full, the end of the deflate stream is hit, or there is an error in the\n deflate stream.","sig":null,"attributes":[{"value":"/ Main decompression function. Keeps decompressing data from `in_buf` until the `in_buf` is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154496,"byte_end":154589,"line_start":1031,"line_end":1031,"column_start":1,"column_end":94}},{"value":"/ empty, `out` is full, the end of the deflate stream is hit, or there is an error in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154590,"byte_end":154681,"line_start":1032,"line_end":1032,"column_start":1,"column_end":92}},{"value":"/ deflate stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154682,"byte_end":154701,"line_start":1033,"line_end":1033,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154702,"byte_end":154705,"line_start":1034,"line_end":1034,"column_start":1,"column_end":4}},{"value":"/ # Arguments","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154706,"byte_end":154721,"line_start":1035,"line_end":1035,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154722,"byte_end":154725,"line_start":1036,"line_end":1036,"column_start":1,"column_end":4}},{"value":"/ `r` is a [`DecompressorOxide`] struct with the state of this stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154726,"byte_end":154798,"line_start":1037,"line_end":1037,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154799,"byte_end":154802,"line_start":1038,"line_end":1038,"column_start":1,"column_end":4}},{"value":"/ `in_buf` is a reference to the compressed data that is to be decompressed. The decompressor will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154803,"byte_end":154903,"line_start":1039,"line_end":1039,"column_start":1,"column_end":101}},{"value":"/ start at the first byte of this buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154904,"byte_end":154947,"line_start":1040,"line_end":1040,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154948,"byte_end":154951,"line_start":1041,"line_end":1041,"column_start":1,"column_end":4}},{"value":"/ `out` is a reference to the buffer that will store the decompressed data, and that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":154952,"byte_end":155038,"line_start":1042,"line_end":1042,"column_start":1,"column_end":87}},{"value":"/ stores previously decompressed data if any.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155039,"byte_end":155086,"line_start":1043,"line_end":1043,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155087,"byte_end":155090,"line_start":1044,"line_end":1044,"column_start":1,"column_end":4}},{"value":"/ * The offset given by `out_pos` indicates where in the output buffer slice writing should start.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155091,"byte_end":155191,"line_start":1045,"line_end":1045,"column_start":1,"column_end":101}},{"value":"/ * If [`TINFL_FLAG_USING_NON_WRAPPING_OUTPUT_BUF`] is not set, the output buffer is used in a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155192,"byte_end":155288,"line_start":1046,"line_end":1046,"column_start":1,"column_end":97}},{"value":"/ wrapping manner, and it's size is required to be a power of 2.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155289,"byte_end":155355,"line_start":1047,"line_end":1047,"column_start":1,"column_end":67}},{"value":"/ * The decompression function normally needs access to 32KiB of the previously decompressed data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155356,"byte_end":155455,"line_start":1048,"line_end":1048,"column_start":1,"column_end":100}},{"value":"/(or to the beginning of the decompressed data if less than 32KiB has been decompressed.)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155456,"byte_end":155547,"line_start":1049,"line_end":1049,"column_start":1,"column_end":92}},{"value":"/     - If this data is not available, decompression may fail.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155548,"byte_end":155612,"line_start":1050,"line_end":1050,"column_start":1,"column_end":65}},{"value":"/     - Some deflate compressors allow specifying a window size which limits match distances to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155613,"byte_end":155710,"line_start":1051,"line_end":1051,"column_start":1,"column_end":98}},{"value":"/ less than this, or alternatively an RLE mode where matches will only refer to the previous byte","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155711,"byte_end":155810,"line_start":1052,"line_end":1052,"column_start":1,"column_end":100}},{"value":"/ and thus allows a smaller output buffer. The window size can be specified in the zlib","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155811,"byte_end":155900,"line_start":1053,"line_end":1053,"column_start":1,"column_end":90}},{"value":"/ header structure, however, the header data should not be relied on to be correct.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155901,"byte_end":155986,"line_start":1054,"line_end":1054,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155987,"byte_end":155990,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ `flags` indicates settings and status to the decompression function.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":155991,"byte_end":156063,"line_start":1056,"line_end":1056,"column_start":1,"column_end":73}},{"value":"/ * The [`TINFL_FLAG_HAS_MORE_INPUT`] has to be specified if more compressed data is to be provided","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156064,"byte_end":156165,"line_start":1057,"line_end":1057,"column_start":1,"column_end":102}},{"value":"/ in a subsequent call to this function.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156166,"byte_end":156208,"line_start":1058,"line_end":1058,"column_start":1,"column_end":43}},{"value":"/ * See the the [`inflate_flags`] module for details on other flags.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156209,"byte_end":156279,"line_start":1059,"line_end":1059,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156280,"byte_end":156283,"line_start":1060,"line_end":1060,"column_start":1,"column_end":4}},{"value":"/ # Returns","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156284,"byte_end":156297,"line_start":1061,"line_end":1061,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156298,"byte_end":156301,"line_start":1062,"line_end":1062,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple containing the status of the compressor, the number of input bytes read, and the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156302,"byte_end":156402,"line_start":1063,"line_end":1063,"column_start":1,"column_end":101}},{"value":"/ number of bytes output to `out`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156403,"byte_end":156439,"line_start":1064,"line_end":1064,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156440,"byte_end":156443,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This function shouldn't panic pending any bugs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":156444,"byte_end":156495,"line_start":1066,"line_end":1066,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":556},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"stream","qualname":"::inflate::stream","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":574},{"krate":0,"index":577},{"krate":0,"index":580},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":587},{"krate":0,"index":590},{"krate":0,"index":593},{"krate":0,"index":596},{"krate":0,"index":599},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":640},{"krate":0,"index":641},{"krate":0,"index":642}],"decl_id":null,"docs":" Extra streaming decompression functionality.","sig":null,"attributes":[{"value":"/ Extra streaming decompression functionality.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194483,"byte_end":194531,"line_start":1,"line_end":1,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194532,"byte_end":194535,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ As of now this is mainly intended for use to build a higher-level wrapper.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194536,"byte_end":194614,"line_start":3,"line_end":3,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":602},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194964,"byte_end":194975,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ResetPolicy","qualname":"::inflate::stream::ResetPolicy","value":"ResetPolicy","parent":null,"children":[{"krate":0,"index":603}],"decl_id":null,"docs":" Tag that determines reset policy of [InflateState](struct.InflateState.html)\n","sig":null,"attributes":[{"value":"/ Tag that determines reset policy of [InflateState](struct.InflateState.html)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194873,"byte_end":194953,"line_start":11,"line_end":11,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195008,"byte_end":195013,"line_start":14,"line_end":14,"column_start":8,"column_end":13},"name":"reset","qualname":"::inflate::stream::ResetPolicy::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":602},"children":[],"decl_id":null,"docs":" Performs reset\n","sig":null,"attributes":[{"value":"/ Performs reset","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":194982,"byte_end":195000,"line_start":13,"line_end":13,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":604},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195235,"byte_end":195243,"line_start":20,"line_end":20,"column_start":12,"column_end":20},"name":"MinReset","qualname":"::inflate::stream::MinReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state, without performing expensive ops (e.g. zeroing buffer)","sig":null,"attributes":[{"value":"/ Resets state, without performing expensive ops (e.g. zeroing buffer)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195051,"byte_end":195123,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195124,"byte_end":195127,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Note that not zeroing buffer can lead to security issues when dealing with untrusted input.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195128,"byte_end":195223,"line_start":19,"line_end":19,"column_start":1,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195285,"byte_end":195290,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"reset","qualname":"<MinReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":602},"children":[],"decl_id":{"krate":0,"index":603},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":608},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195640,"byte_end":195649,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"ZeroReset","qualname":"::inflate::stream::ZeroReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Resets state and zero memory, continuing to use the same data format.\n","sig":null,"attributes":[{"value":"/ Resets state and zero memory, continuing to use the same data format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195555,"byte_end":195628,"line_start":33,"line_end":33,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195706,"byte_end":195711,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"reset","qualname":"<ZeroReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":602},"children":[],"decl_id":{"krate":0,"index":603},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195689,"byte_end":195698,"line_start":37,"line_end":37,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":613},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195944,"byte_end":195953,"line_start":47,"line_end":47,"column_start":12,"column_end":21},"name":"FullReset","qualname":"::inflate::stream::FullReset","value":"","parent":null,"children":[],"decl_id":null,"docs":" Full reset of the state, including zeroing memory.","sig":null,"attributes":[{"value":"/ Full reset of the state, including zeroing memory.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195833,"byte_end":195887,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195888,"byte_end":195891,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Requires to provide new data format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195892,"byte_end":195932,"line_start":46,"line_end":46,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":615},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195954,"byte_end":195968,"line_start":47,"line_end":47,"column_start":22,"column_end":36},"name":"0","qualname":"::inflate::stream::FullReset::0","value":"DataFormat","parent":{"krate":0,"index":613},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":196026,"byte_end":196031,"line_start":51,"line_end":51,"column_start":8,"column_end":13},"name":"reset","qualname":"<FullReset as inflate::stream::ResetPolicy>::reset","value":"fn reset(&Self, &mut InflateState)","parent":{"krate":0,"index":602},"children":[],"decl_id":{"krate":0,"index":603},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":196009,"byte_end":196018,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":618},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":196247,"byte_end":196259,"line_start":59,"line_end":59,"column_start":12,"column_end":24},"name":"InflateState","qualname":"::inflate::stream::InflateState","value":"InflateState {  }","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":626},{"krate":0,"index":627}],"decl_id":null,"docs":" A struct that compbines a decompressor with extra data for streaming decompression.","sig":null,"attributes":[{"value":"/ A struct that compbines a decompressor with extra data for streaming decompression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":196144,"byte_end":196231,"line_start":57,"line_end":57,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":196232,"byte_end":196235,"line_start":58,"line_end":58,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197062,"byte_end":197069,"line_start":84,"line_end":84,"column_start":8,"column_end":15},"name":"default","qualname":"<InflateState as core::default::Default>::default","value":"fn default() -> Self","parent":{"krate":1,"index":3157},"children":[],"decl_id":{"krate":1,"index":3158},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197768,"byte_end":197771,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<InflateState>::new","value":"fn new(DataFormat) -> InflateState","parent":null,"children":[],"decl_id":null,"docs":" Create a new state.","sig":null,"attributes":[{"value":"/ Create a new state.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197450,"byte_end":197473,"line_start":98,"line_end":98,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197478,"byte_end":197481,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that this struct is quite large due to internal buffers, and as such storing it on","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197486,"byte_end":197577,"line_start":100,"line_end":100,"column_start":5,"column_end":96}},{"value":"/ the stack is not recommended.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197582,"byte_end":197615,"line_start":101,"line_end":101,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197620,"byte_end":197623,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197628,"byte_end":197644,"line_start":103,"line_end":103,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197649,"byte_end":197738,"line_start":104,"line_end":104,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197743,"byte_end":197756,"line_start":105,"line_end":105,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198105,"byte_end":198114,"line_start":118,"line_end":118,"column_start":12,"column_end":21},"name":"new_boxed","qualname":"<InflateState>::new_boxed","value":"fn new_boxed(DataFormat) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state on the heap.","sig":null,"attributes":[{"value":"/ Create a new state on the heap.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197917,"byte_end":197952,"line_start":113,"line_end":113,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197957,"byte_end":197960,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197965,"byte_end":197981,"line_start":115,"line_end":115,"column_start":5,"column_end":21}},{"value":"/ `data_format`: Determines whether the compressed data is assumed to wrapped with zlib","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197986,"byte_end":198075,"line_start":116,"line_end":116,"column_start":5,"column_end":94}},{"value":"/ metadata.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198080,"byte_end":198093,"line_start":117,"line_end":117,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198323,"byte_end":198335,"line_start":125,"line_end":125,"column_start":12,"column_end":24},"name":"decompressor","qualname":"<InflateState>::decompressor","value":"fn decompressor(&mut Self) -> &mut DecompressorOxide","parent":null,"children":[],"decl_id":null,"docs":" Access the innner decompressor.\n","sig":null,"attributes":[{"value":"/ Access the innner decompressor.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198276,"byte_end":198311,"line_start":124,"line_end":124,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198506,"byte_end":198517,"line_start":130,"line_end":130,"column_start":18,"column_end":29},"name":"last_status","qualname":"<InflateState>::last_status","value":"const fn last_status(&Self) -> TINFLStatus","parent":null,"children":[],"decl_id":null,"docs":" Return the status of the last call to `inflate` with this `InflateState`.\n","sig":null,"attributes":[{"value":"/ Return the status of the last call to `inflate` with this `InflateState`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198411,"byte_end":198488,"line_start":129,"line_end":129,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198843,"byte_end":198869,"line_start":139,"line_end":139,"column_start":12,"column_end":38},"name":"new_boxed_with_window_bits","qualname":"<InflateState>::new_boxed_with_window_bits","value":"fn new_boxed_with_window_bits(i32) -> Box<InflateState>","parent":null,"children":[],"decl_id":null,"docs":" Create a new state using miniz/zlib style window bits parameter.","sig":null,"attributes":[{"value":"/ Create a new state using miniz/zlib style window bits parameter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198578,"byte_end":198646,"line_start":134,"line_end":134,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198651,"byte_end":198654,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ The decompressor does not support different window sizes. As such,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198659,"byte_end":198729,"line_start":136,"line_end":136,"column_start":5,"column_end":75}},{"value":"/ any positive (>0) value will set the zlib header flag, while a negative one","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198734,"byte_end":198813,"line_start":137,"line_end":137,"column_start":5,"column_end":84}},{"value":"/ will not.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":198818,"byte_end":198831,"line_start":138,"line_end":138,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199173,"byte_end":199178,"line_start":148,"line_end":148,"column_start":12,"column_end":17},"name":"reset","qualname":"<InflateState>::reset","value":"fn reset(&mut Self, DataFormat)","parent":null,"children":[],"decl_id":null,"docs":" Reset the decompressor without re-allocating memory, using the given\n data format.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199054,"byte_end":199063,"line_start":145,"line_end":145,"column_start":5,"column_end":14}},{"value":"/ Reset the decompressor without re-allocating memory, using the given","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199068,"byte_end":199140,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ data format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199145,"byte_end":199161,"line_start":147,"line_end":147,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199352,"byte_end":199360,"line_start":154,"line_end":154,"column_start":12,"column_end":20},"name":"reset_as","qualname":"<InflateState>::reset_as","value":"fn reset_as<T>(&mut Self, T) where T: ResetPolicy","parent":null,"children":[],"decl_id":null,"docs":" Resets the state according to specified policy.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199275,"byte_end":199284,"line_start":152,"line_end":152,"column_start":5,"column_end":14}},{"value":"/ Resets the state according to specified policy.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199289,"byte_end":199340,"line_start":153,"line_end":153,"column_start":5,"column_end":56}}]},{"kind":"Function","id":{"krate":0,"index":640},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200685,"byte_end":200692,"line_start":182,"line_end":182,"column_start":8,"column_end":15},"name":"inflate","qualname":"::inflate::stream::inflate","value":"fn inflate(&mut InflateState, &[u8], &mut [u8], MZFlush) -> StreamResult","parent":null,"children":[],"decl_id":null,"docs":" Try to decompress from `input` to `output` with the given [`InflateState`]","sig":null,"attributes":[{"value":"/ Try to decompress from `input` to `output` with the given [`InflateState`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199437,"byte_end":199515,"line_start":159,"line_end":159,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199516,"byte_end":199519,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ # `flush`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199520,"byte_end":199533,"line_start":161,"line_end":161,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199534,"byte_end":199537,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ Generally, the various [`MZFlush`] flags have meaning only on the compression side.  They can be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199538,"byte_end":199638,"line_start":163,"line_end":163,"column_start":1,"column_end":101}},{"value":"/ supplied here, but the only one that has any semantic meaning is [`MZFlush::Finish`], which is a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199639,"byte_end":199739,"line_start":164,"line_end":164,"column_start":1,"column_end":101}},{"value":"/ signal that the stream is expected to finish, and failing to do so is an error.  It isn't","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199740,"byte_end":199833,"line_start":165,"line_end":165,"column_start":1,"column_end":94}},{"value":"/ necessary to specify it when the stream ends; you'll still get returned a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199834,"byte_end":199911,"line_start":166,"line_end":166,"column_start":1,"column_end":78}},{"value":"/ [`MZStatus::StreamEnd`] anyway.  Other values either have no effect or cause errors.  It's","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":199912,"byte_end":200006,"line_start":167,"line_end":167,"column_start":1,"column_end":95}},{"value":"/ likely that you'll almost always just want to use [`MZFlush::None`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200007,"byte_end":200079,"line_start":168,"line_end":168,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200080,"byte_end":200083,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200084,"byte_end":200096,"line_start":170,"line_end":170,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200097,"byte_end":200100,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Buf`] if the size of the `output` slice is empty or no progress was made due","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200101,"byte_end":200200,"line_start":172,"line_end":172,"column_start":1,"column_end":100}},{"value":"/ to lack of expected input data, or if called with [`MZFlush::Finish`] and input wasn't all","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200201,"byte_end":200295,"line_start":173,"line_end":173,"column_start":1,"column_end":95}},{"value":"/ consumed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200296,"byte_end":200309,"line_start":174,"line_end":174,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200310,"byte_end":200313,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Data`] if this or a a previous call failed with an error return from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200314,"byte_end":200405,"line_start":176,"line_end":176,"column_start":1,"column_end":92}},{"value":"/ [`TINFLStatus`]; probably indicates corrupted data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200406,"byte_end":200461,"line_start":177,"line_end":177,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200462,"byte_end":200465,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Returns [`MZError::Stream`] when called with [`MZFlush::Full`] (meaningless on","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200466,"byte_end":200548,"line_start":179,"line_end":179,"column_start":1,"column_end":83}},{"value":"/ decompression), or when called without [`MZFlush::Finish`] after an earlier call with","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200549,"byte_end":200638,"line_start":180,"line_end":180,"column_start":1,"column_end":90}},{"value":"/ [`MZFlush::Finish`] has been made.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":200639,"byte_end":200677,"line_start":181,"line_end":181,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":948},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108815,"byte_end":108839,"line_start":34,"line_end":34,"column_start":5,"column_end":29},"name":"FailedCannotMakeProgress","qualname":"::inflate::TINFLStatus::FailedCannotMakeProgress","value":"TINFLStatus::FailedCannotMakeProgress","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" More input data was expected, but the caller indicated that there was no more data, so the\n input stream is likely truncated.","sig":null,"attributes":[{"value":"/ More input data was expected, but the caller indicated that there was no more data, so the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108240,"byte_end":108334,"line_start":26,"line_end":26,"column_start":5,"column_end":99}},{"value":"/ input stream is likely truncated.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108339,"byte_end":108376,"line_start":27,"line_end":27,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108381,"byte_end":108384,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ This can't happen if you have provided the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108389,"byte_end":108435,"line_start":29,"line_end":29,"column_start":5,"column_end":51}},{"value":"/ [`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108440,"byte_end":108533,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ decompression.  By setting that flag, you indicate more input exists but is not provided,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108538,"byte_end":108631,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ and so reaching the end of the input data without finding the end of the compressed stream","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108636,"byte_end":108730,"line_start":32,"line_end":32,"column_start":5,"column_end":99}},{"value":"/ would instead return a [`NeedsMoreInput`][Self::NeedsMoreInput] status.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108735,"byte_end":108810,"line_start":33,"line_end":33,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":951},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108973,"byte_end":108981,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"BadParam","qualname":"::inflate::TINFLStatus::BadParam","value":"TINFLStatus::BadParam","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" The output buffer is an invalid size; consider the `flags` parameter.\n","sig":null,"attributes":[{"value":"/ The output buffer is an invalid size; consider the `flags` parameter.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108895,"byte_end":108968,"line_start":36,"line_end":36,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":954},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109135,"byte_end":109150,"line_start":41,"line_end":41,"column_start":5,"column_end":20},"name":"Adler32Mismatch","qualname":"::inflate::TINFLStatus::Adler32Mismatch","value":"TINFLStatus::Adler32Mismatch","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" The decompression went fine, but the adler32 checksum did not match the one\n provided in the header.\n","sig":null,"attributes":[{"value":"/ The decompression went fine, but the adler32 checksum did not match the one","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109019,"byte_end":109098,"line_start":39,"line_end":39,"column_start":5,"column_end":84}},{"value":"/ provided in the header.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109103,"byte_end":109130,"line_start":40,"line_end":40,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":957},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109245,"byte_end":109251,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Failed","qualname":"::inflate::TINFLStatus::Failed","value":"TINFLStatus::Failed","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" Failed to decompress due to invalid data.\n","sig":null,"attributes":[{"value":"/ Failed to decompress due to invalid data.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109195,"byte_end":109240,"line_start":43,"line_end":43,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":960},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109415,"byte_end":109419,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Done","qualname":"::inflate::TINFLStatus::Done","value":"TINFLStatus::Done","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" Finished decompression without issues.","sig":null,"attributes":[{"value":"/ Finished decompression without issues.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109286,"byte_end":109328,"line_start":46,"line_end":46,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109333,"byte_end":109336,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ This indicates the end of the compressed stream has been reached.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109341,"byte_end":109410,"line_start":48,"line_end":48,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":963},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110018,"byte_end":110032,"line_start":59,"line_end":59,"column_start":5,"column_end":19},"name":"NeedsMoreInput","qualname":"::inflate::TINFLStatus::NeedsMoreInput","value":"TINFLStatus::NeedsMoreInput","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" The decompressor needs more input data to continue decompressing.","sig":null,"attributes":[{"value":"/ The decompressor needs more input data to continue decompressing.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109452,"byte_end":109521,"line_start":51,"line_end":51,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109526,"byte_end":109529,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ This occurs when there's no more consumable input, but the end of the stream hasn't been","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109534,"byte_end":109626,"line_start":53,"line_end":53,"column_start":5,"column_end":97}},{"value":"/ reached, and you have supplied the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109631,"byte_end":109669,"line_start":54,"line_end":54,"column_start":5,"column_end":43}},{"value":"/ [`TINFL_FLAG_HAS_MORE_INPUT`][core::inflate_flags::TINFL_FLAG_HAS_MORE_INPUT] flag to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109674,"byte_end":109767,"line_start":55,"line_end":55,"column_start":5,"column_end":98}},{"value":"/ decompressor.  Had you not supplied that flag (which would mean you were asserting that you","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109772,"byte_end":109867,"line_start":56,"line_end":56,"column_start":5,"column_end":100}},{"value":"/ believed all the data was available) you would have gotten a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109872,"byte_end":109936,"line_start":57,"line_end":57,"column_start":5,"column_end":69}},{"value":"/ [`FailedCannotMakeProcess`][Self::FailedCannotMakeProgress] instead.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":109941,"byte_end":110013,"line_start":58,"line_end":58,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":966},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110151,"byte_end":110164,"line_start":62,"line_end":62,"column_start":5,"column_end":18},"name":"HasMoreOutput","qualname":"::inflate::TINFLStatus::HasMoreOutput","value":"TINFLStatus::HasMoreOutput","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":" There is still pending data that didn't fit in the output buffer.\n","sig":null,"attributes":[{"value":"/ There is still pending data that didn't fit in the output buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110077,"byte_end":110146,"line_start":61,"line_end":61,"column_start":5,"column_end":74}}]},{"kind":"Enum","id":{"krate":0,"index":947},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108222,"byte_end":108233,"line_start":25,"line_end":25,"column_start":10,"column_end":21},"name":"TINFLStatus","qualname":"::inflate::TINFLStatus","value":"enum TINFLStatus {\n    FailedCannotMakeProgress = ,\n    BadParam = ,\n    Adler32Mismatch = ,\n    Failed = ,\n    Done = ,\n    NeedsMoreInput = ,\n    HasMoreOutput = ,\n}","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966}],"decl_id":null,"docs":" Return status codes.\n","sig":null,"attributes":[{"value":"/ Return status codes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108125,"byte_end":108149,"line_start":22,"line_end":22,"column_start":1,"column_end":25}},{"value":"repr(i8)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":108150,"byte_end":108161,"line_start":23,"line_end":23,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110236,"byte_end":110244,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"from_i32","qualname":"<TINFLStatus>::from_i32","value":"fn from_i32(i32) -> Option<TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":654},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110995,"byte_end":111012,"line_start":85,"line_end":85,"column_start":8,"column_end":25},"name":"decompress_to_vec","qualname":"::inflate::decompress_to_vec","value":"fn decompress_to_vec(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110816,"byte_end":110879,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110880,"byte_end":110883,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple of the [`Vec`] of decompressed data and the [status result][TINFLStatus].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110884,"byte_end":110977,"line_start":83,"line_end":83,"column_start":1,"column_end":94}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110978,"byte_end":110987,"line_start":84,"line_end":84,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":655},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111323,"byte_end":111345,"line_start":93,"line_end":93,"column_start":8,"column_end":30},"name":"decompress_to_vec_zlib","qualname":"::inflate::decompress_to_vec_zlib","value":"fn decompress_to_vec_zlib(&[u8]) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111122,"byte_end":111207,"line_start":89,"line_end":89,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111208,"byte_end":111211,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple of the [`Vec`] of decompressed data and the [status result][TINFLStatus].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111212,"byte_end":111305,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111306,"byte_end":111315,"line_start":92,"line_end":92,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":656},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111853,"byte_end":111881,"line_start":107,"line_end":107,"column_start":8,"column_end":36},"name":"decompress_to_vec_with_limit","qualname":"::inflate::decompress_to_vec_with_limit","value":"fn decompress_to_vec_with_limit(&[u8], usize) -> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n [`TINFLStatus::HasMoreOutput`] error is returned.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data in `input` to a vector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111528,"byte_end":111591,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111592,"byte_end":111683,"line_start":102,"line_end":102,"column_start":1,"column_end":92}},{"value":"/ [`TINFLStatus::HasMoreOutput`] error is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111684,"byte_end":111737,"line_start":103,"line_end":103,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111738,"byte_end":111741,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple of the [`Vec`] of decompressed data and the [status result][TINFLStatus].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111742,"byte_end":111835,"line_start":105,"line_end":105,"column_start":1,"column_end":94}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111836,"byte_end":111845,"line_start":106,"line_end":106,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":657},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112345,"byte_end":112378,"line_start":117,"line_end":117,"column_start":8,"column_end":41},"name":"decompress_to_vec_zlib_with_limit","qualname":"::inflate::decompress_to_vec_zlib_with_limit","value":"fn decompress_to_vec_zlib_with_limit(&[u8], usize)\n-> Result<Vec<u8>, TINFLStatus>","parent":null,"children":[],"decl_id":null,"docs":" Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.\n The vector is grown to at most `max_size` bytes; if the data does not fit in that size,\n [`TINFLStatus::HasMoreOutput`] error is returned.","sig":null,"attributes":[{"value":"/ Decompress the deflate-encoded data (with a zlib wrapper) in `input` to a vector.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":111998,"byte_end":112083,"line_start":111,"line_end":111,"column_start":1,"column_end":86}},{"value":"/ The vector is grown to at most `max_size` bytes; if the data does not fit in that size,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112084,"byte_end":112175,"line_start":112,"line_end":112,"column_start":1,"column_end":92}},{"value":"/ [`TINFLStatus::HasMoreOutput`] error is returned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112176,"byte_end":112229,"line_start":113,"line_end":113,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112230,"byte_end":112233,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ Returns a tuple of the [`Vec`] of decompressed data and the [status result][TINFLStatus].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112234,"byte_end":112327,"line_start":115,"line_end":115,"column_start":1,"column_end":94}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":112328,"byte_end":112337,"line_start":116,"line_end":116,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":659},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114759,"byte_end":114789,"line_start":181,"line_end":181,"column_start":8,"column_end":38},"name":"decompress_slice_iter_to_slice","qualname":"::inflate::decompress_slice_iter_to_slice","value":"fn decompress_slice_iter_to_slice<'out, 'inp,\nimpl Iterator<Item = &'inp [u8]>>(&'out mut [u8],\nimpl Iterator<Item = &'inp [u8]>, bool, bool) -> Result<usize, TINFLStatus>\nwhere impl Iterator<Item = &'inp [u8]>: Iterator<Item = &'inp [u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decompress one or more source slices from an iterator into the output slice.","sig":null,"attributes":[{"value":"/ Decompress one or more source slices from an iterator into the output slice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114087,"byte_end":114167,"line_start":168,"line_end":168,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114168,"byte_end":114171,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ * On success, returns the number of bytes that were written.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114172,"byte_end":114236,"line_start":170,"line_end":170,"column_start":1,"column_end":65}},{"value":"/ * On failure, returns the failure status code.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114237,"byte_end":114287,"line_start":171,"line_end":171,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114288,"byte_end":114291,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ This will fail if the output buffer is not large enough, but in that case","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114292,"byte_end":114369,"line_start":173,"line_end":173,"column_start":1,"column_end":78}},{"value":"/ the output buffer will still contain the partial decompression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114370,"byte_end":114437,"line_start":174,"line_end":174,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114438,"byte_end":114441,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ * `out` the output buffer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114442,"byte_end":114472,"line_start":176,"line_end":176,"column_start":1,"column_end":31}},{"value":"/ * `it` the iterator of input slices.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114473,"byte_end":114513,"line_start":177,"line_end":177,"column_start":1,"column_end":41}},{"value":"/ * `zlib_header` if the first slice out of the iterator is expected to have a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114514,"byte_end":114594,"line_start":178,"line_end":178,"column_start":1,"column_end":81}},{"value":"/   Zlib header. Otherwise the slices are assumed to be the deflate data only.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114595,"byte_end":114675,"line_start":179,"line_end":179,"column_start":1,"column_end":81}},{"value":"/ * `ignore_adler32` if the adler32 checksum should be calculated or not.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":114676,"byte_end":114751,"line_start":180,"line_end":180,"column_start":1,"column_end":76}}]},{"kind":"Const","id":{"krate":0,"index":665},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/shared.rs","byte_start":208632,"byte_end":208647,"line_start":2,"line_end":2,"column_start":11,"column_end":26},"name":"MZ_ADLER32_INIT","qualname":"::shared::MZ_ADLER32_INIT","value":"u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":666},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/shared.rs","byte_start":208684,"byte_end":208706,"line_start":5,"line_end":5,"column_start":11,"column_end":33},"name":"MZ_DEFAULT_WINDOW_BITS","qualname":"::shared::MZ_DEFAULT_WINDOW_BITS","value":"i32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":669},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/shared.rs","byte_start":208890,"byte_end":208904,"line_start":13,"line_end":13,"column_start":8,"column_end":22},"name":"update_adler32","qualname":"::shared::update_adler32","value":"fn update_adler32(u32, &[u8]) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(feature = \"simd\"))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/shared.rs","byte_start":208853,"byte_end":208882,"line_start":12,"line_end":12,"column_start":1,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":984},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1280,"byte_end":1284,"line_start":44,"line_end":44,"column_start":5,"column_end":9},"name":"None","qualname":"::MZFlush::None","value":"MZFlush::None","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Don't force any flushing.\n Used when more input data is expected.\n","sig":null,"attributes":[{"value":"/ Don't force any flushing.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1199,"byte_end":1228,"line_start":42,"line_end":42,"column_start":5,"column_end":34}},{"value":"/ Used when more input data is expected.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1233,"byte_end":1275,"line_start":43,"line_end":43,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":987},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"Partial","qualname":"::MZFlush::Partial","value":"MZFlush::Partial","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Zlib partial flush.\n Currently treated as [`Sync`].\n","sig":null,"attributes":[{"value":"/ Zlib partial flush.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1294,"byte_end":1317,"line_start":45,"line_end":45,"column_start":5,"column_end":28}},{"value":"/ Currently treated as [`Sync`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1322,"byte_end":1356,"line_start":46,"line_end":46,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":990},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1502,"byte_end":1506,"line_start":50,"line_end":50,"column_start":5,"column_end":9},"name":"Sync","qualname":"::MZFlush::Sync","value":"MZFlush::Sync","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Finish compressing the currently buffered data, and output an empty raw block.\n Has no use in decompression.\n","sig":null,"attributes":[{"value":"/ Finish compressing the currently buffered data, and output an empty raw block.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1378,"byte_end":1460,"line_start":48,"line_end":48,"column_start":5,"column_end":87}},{"value":"/ Has no use in decompression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1465,"byte_end":1497,"line_start":49,"line_end":49,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":993},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1758,"byte_end":1762,"line_start":55,"line_end":55,"column_start":5,"column_end":9},"name":"Full","qualname":"::MZFlush::Full","value":"MZFlush::Full","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Same as [`Sync`], but resets the compression dictionary so that further compressed\n data does not depend on data compressed before the flush.","sig":null,"attributes":[{"value":"/ Same as [`Sync`], but resets the compression dictionary so that further compressed","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1516,"byte_end":1602,"line_start":51,"line_end":51,"column_start":5,"column_end":91}},{"value":"/ data does not depend on data compressed before the flush.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1607,"byte_end":1668,"line_start":52,"line_end":52,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1673,"byte_end":1676,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ Has no use in decompression, and is an error to supply in that case.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1681,"byte_end":1753,"line_start":54,"line_end":54,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":996},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1836,"byte_end":1842,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"Finish","qualname":"::MZFlush::Finish","value":"MZFlush::Finish","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Attempt to flush the remaining data and end the stream.\n","sig":null,"attributes":[{"value":"/ Attempt to flush the remaining data and end the stream.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1772,"byte_end":1831,"line_start":56,"line_end":56,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":999},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1877,"byte_end":1882,"line_start":59,"line_end":59,"column_start":5,"column_end":10},"name":"Block","qualname":"::MZFlush::Block","value":"MZFlush::Block","parent":{"krate":0,"index":983},"children":[],"decl_id":null,"docs":" Not implemented.\n","sig":null,"attributes":[{"value":"/ Not implemented.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1852,"byte_end":1872,"line_start":58,"line_end":58,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":983},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1185,"byte_end":1192,"line_start":41,"line_end":41,"column_start":10,"column_end":17},"name":"MZFlush","qualname":"::MZFlush","value":"enum MZFlush { None = , Partial = , Sync = , Full = , Finish = , Block = , }","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":999}],"decl_id":null,"docs":" A list of flush types.","sig":null,"attributes":[{"value":"/ A list of flush types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":999,"byte_end":1025,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1026,"byte_end":1029,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ See <http://www.bolet.org/~pornin/deflate-flush.html> for more in-depth info.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1030,"byte_end":1111,"line_start":38,"line_end":38,"column_start":1,"column_end":82}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1112,"byte_end":1124,"line_start":39,"line_end":39,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2032,"byte_end":2035,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"new","qualname":"<MZFlush>::new","value":"fn new(i32) -> Result<Self, MZError>","parent":null,"children":[],"decl_id":null,"docs":" Create an MZFlush value from an integer value.","sig":null,"attributes":[{"value":"/ Create an MZFlush value from an integer value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1910,"byte_end":1960,"line_start":63,"line_end":63,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1965,"byte_end":1968,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ Returns `MZError::Param` on invalid values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1973,"byte_end":2020,"line_start":65,"line_end":65,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1017},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2762,"byte_end":2764,"line_start":88,"line_end":88,"column_start":5,"column_end":7},"name":"Ok","qualname":"::MZStatus::Ok","value":"MZStatus::Ok","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" Operation succeeded.","sig":null,"attributes":[{"value":"/ Operation succeeded.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2608,"byte_end":2632,"line_start":84,"line_end":84,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2637,"byte_end":2640,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Some data was decompressed or compressed; see the byte counters in the [`StreamResult`] for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2645,"byte_end":2740,"line_start":86,"line_end":86,"column_start":5,"column_end":100}},{"value":"/ details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2745,"byte_end":2757,"line_start":87,"line_end":87,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1020},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3028,"byte_end":3037,"line_start":95,"line_end":95,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::MZStatus::StreamEnd","value":"MZStatus::StreamEnd","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" Operation succeeded and end of deflate stream was found.","sig":null,"attributes":[{"value":"/ Operation succeeded and end of deflate stream was found.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2775,"byte_end":2835,"line_start":90,"line_end":90,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2840,"byte_end":2843,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ X-ref [`TINFLStatus::Done`][inflate::TINFLStatus::Done] or","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2848,"byte_end":2910,"line_start":92,"line_end":92,"column_start":5,"column_end":67}},{"value":"/ [`TDEFLStatus::Done`][deflate::core::TDEFLStatus::Done] for `inflate` or `deflate`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2915,"byte_end":3001,"line_start":93,"line_end":93,"column_start":5,"column_end":91}},{"value":"/ respectively.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3006,"byte_end":3023,"line_start":94,"line_end":94,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1023},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3063,"byte_end":3071,"line_start":98,"line_end":98,"column_start":5,"column_end":13},"name":"NeedDict","qualname":"::MZStatus::NeedDict","value":"MZStatus::NeedDict","parent":{"krate":0,"index":1016},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3048,"byte_end":3058,"line_start":97,"line_end":97,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":1016},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2593,"byte_end":2601,"line_start":83,"line_end":83,"column_start":10,"column_end":18},"name":"MZStatus","qualname":"::MZStatus","value":"enum MZStatus { Ok = , StreamEnd = , NeedDict = , }","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1020},{"krate":0,"index":1023}],"decl_id":null,"docs":" A list of miniz successful status codes.","sig":null,"attributes":[{"value":"/ A list of miniz successful status codes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2304,"byte_end":2348,"line_start":77,"line_end":77,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2349,"byte_end":2352,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ These are emitted as the [`Ok`] side of a [`MZResult`] in the [`StreamResult`] returned from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2353,"byte_end":2449,"line_start":79,"line_end":79,"column_start":1,"column_end":97}},{"value":"/ [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2450,"byte_end":2519,"line_start":80,"line_end":80,"column_start":1,"column_end":70}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":2520,"byte_end":2532,"line_start":81,"line_end":81,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3395,"byte_end":3400,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"ErrNo","qualname":"::MZError::ErrNo","value":"MZError::ErrNo","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3380,"byte_end":3390,"line_start":108,"line_end":108,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1044},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3687,"byte_end":3693,"line_start":117,"line_end":117,"column_start":5,"column_end":11},"name":"Stream","qualname":"::MZError::Stream","value":"MZError::Stream","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" General stream error.","sig":null,"attributes":[{"value":"/ General stream error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3412,"byte_end":3437,"line_start":111,"line_end":111,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3442,"byte_end":3445,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ See [`inflate::stream::inflate()`] docs for details of how it can occur there.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3450,"byte_end":3532,"line_start":113,"line_end":113,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3537,"byte_end":3540,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ See [`deflate::stream::deflate()`] docs for how it can in principle occur there, though it's","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3545,"byte_end":3641,"line_start":115,"line_end":115,"column_start":5,"column_end":101}},{"value":"/ believed impossible in practice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3646,"byte_end":3682,"line_start":116,"line_end":116,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1047},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3847,"byte_end":3851,"line_start":122,"line_end":122,"column_start":5,"column_end":9},"name":"Data","qualname":"::MZError::Data","value":"MZError::Data","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Error in inflation; see [`inflate::stream::inflate()`] for details.","sig":null,"attributes":[{"value":"/ Error in inflation; see [`inflate::stream::inflate()`] for details.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3705,"byte_end":3776,"line_start":119,"line_end":119,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3781,"byte_end":3784,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Not returned from [`deflate::stream::deflate()`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3789,"byte_end":3842,"line_start":121,"line_end":121,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3878,"byte_end":3881,"line_start":125,"line_end":125,"column_start":5,"column_end":8},"name":"Mem","qualname":"::MZError::Mem","value":"MZError::Mem","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3863,"byte_end":3873,"line_start":124,"line_end":124,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4090,"byte_end":4093,"line_start":131,"line_end":131,"column_start":5,"column_end":8},"name":"Buf","qualname":"::MZError::Buf","value":"MZError::Buf","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Buffer-related error.","sig":null,"attributes":[{"value":"/ Buffer-related error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3893,"byte_end":3918,"line_start":127,"line_end":127,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3923,"byte_end":3926,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ See the docs of [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`] for details","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3931,"byte_end":4027,"line_start":129,"line_end":129,"column_start":5,"column_end":101}},{"value":"/ of when it would trigger in the one you're using.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4032,"byte_end":4085,"line_start":130,"line_end":130,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4120,"byte_end":4127,"line_start":134,"line_end":134,"column_start":5,"column_end":12},"name":"Version","qualname":"::MZError::Version","value":"MZError::Version","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Unused\n","sig":null,"attributes":[{"value":"/ Unused","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4105,"byte_end":4115,"line_start":133,"line_end":133,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4345,"byte_end":4350,"line_start":140,"line_end":140,"column_start":5,"column_end":10},"name":"Param","qualname":"::MZError::Param","value":"MZError::Param","parent":{"krate":0,"index":1040},"children":[],"decl_id":null,"docs":" Bad parameters.","sig":null,"attributes":[{"value":"/ Bad parameters.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4139,"byte_end":4158,"line_start":136,"line_end":136,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4163,"byte_end":4166,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This can be returned from [`deflate::stream::deflate()`] in the case of bad parameters.  See","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4171,"byte_end":4267,"line_start":138,"line_end":138,"column_start":5,"column_end":101}},{"value":"/ [`TDEFLStatus::BadParam`][deflate::core::TDEFLStatus::BadParam].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4272,"byte_end":4340,"line_start":139,"line_end":139,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":1040},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3366,"byte_end":3373,"line_start":107,"line_end":107,"column_start":10,"column_end":17},"name":"MZError","qualname":"::MZError","value":"enum MZError {\n    ErrNo = ,\n    Stream = ,\n    Data = ,\n    Mem = ,\n    Buf = ,\n    Version = ,\n    Param = ,\n}","parent":null,"children":[{"krate":0,"index":1041},{"krate":0,"index":1044},{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1059}],"decl_id":null,"docs":" A list of miniz failed status codes.","sig":null,"attributes":[{"value":"/ A list of miniz failed status codes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3080,"byte_end":3120,"line_start":101,"line_end":101,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3121,"byte_end":3124,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ These are emitted as the [`Err`] side of a [`MZResult`] in the [`StreamResult`] returned from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3125,"byte_end":3222,"line_start":103,"line_end":103,"column_start":1,"column_end":98}},{"value":"/ [`deflate::stream::deflate()`] or [`inflate::stream::inflate()`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3223,"byte_end":3292,"line_start":104,"line_end":104,"column_start":1,"column_end":70}},{"value":"repr(i32)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":3293,"byte_end":3305,"line_start":105,"line_end":105,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4572,"byte_end":4576,"line_start":148,"line_end":148,"column_start":5,"column_end":9},"name":"Zlib","qualname":"::DataFormat::Zlib","value":"DataFormat::Zlib","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":" Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.\n","sig":null,"attributes":[{"value":"/ Wrapped using the [zlib](http://www.zlib.org/rfc-zlib.html) format.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4496,"byte_end":4567,"line_start":147,"line_end":147,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4737,"byte_end":4755,"line_start":151,"line_end":151,"column_start":5,"column_end":23},"name":"ZLibIgnoreChecksum","qualname":"::DataFormat::ZLibIgnoreChecksum","value":"DataFormat::ZLibIgnoreChecksum","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":" Zlib wrapped but ignore and don't compute the adler32 checksum.\n Currently only used for inflate, behaves the same as Zlib for compression.\n","sig":null,"attributes":[{"value":"/ Zlib wrapped but ignore and don't compute the adler32 checksum.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4582,"byte_end":4649,"line_start":149,"line_end":149,"column_start":5,"column_end":72}},{"value":"/ Currently only used for inflate, behaves the same as Zlib for compression.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4654,"byte_end":4732,"line_start":150,"line_end":150,"column_start":5,"column_end":83}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4782,"byte_end":4785,"line_start":153,"line_end":153,"column_start":5,"column_end":8},"name":"Raw","qualname":"::DataFormat::Raw","value":"DataFormat::Raw","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":" Raw DEFLATE.\n","sig":null,"attributes":[{"value":"/ Raw DEFLATE.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4761,"byte_end":4777,"line_start":152,"line_end":152,"column_start":5,"column_end":21}}]},{"kind":"Enum","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4479,"byte_end":4489,"line_start":146,"line_end":146,"column_start":10,"column_end":20},"name":"DataFormat","qualname":"::DataFormat","value":"enum DataFormat { Zlib, ZLibIgnoreChecksum, Raw, }","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1081}],"decl_id":null,"docs":" How compressed data is wrapped.\n","sig":null,"attributes":[{"value":"/ How compressed data is wrapped.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4365,"byte_end":4400,"line_start":143,"line_end":143,"column_start":1,"column_end":36}},{"value":"non_exhaustive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4452,"byte_end":4469,"line_start":145,"line_end":145,"column_start":1,"column_end":18}}]},{"kind":"Type","id":{"krate":0,"index":685},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5329,"byte_end":5337,"line_start":174,"line_end":174,"column_start":10,"column_end":18},"name":"MZResult","qualname":"::MZResult","value":"Result<MZStatus, MZError>","parent":null,"children":[],"decl_id":null,"docs":" `Result` alias for all miniz status codes both successful and failed.\n","sig":null,"attributes":[{"value":"/ `Result` alias for all miniz status codes both successful and failed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5246,"byte_end":5319,"line_start":173,"line_end":173,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1097},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5523,"byte_end":5535,"line_start":178,"line_end":178,"column_start":12,"column_end":24},"name":"StreamResult","qualname":"::StreamResult","value":"StreamResult { bytes_consumed, bytes_written, status }","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099},{"krate":0,"index":1100}],"decl_id":null,"docs":" A structure containg the result of a call to the inflate or deflate streaming functions.\n","sig":null,"attributes":[{"value":"/ A structure containg the result of a call to the inflate or deflate streaming functions.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5368,"byte_end":5460,"line_start":176,"line_end":176,"column_start":1,"column_end":93}}]},{"kind":"Field","id":{"krate":0,"index":1098},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5605,"byte_end":5619,"line_start":180,"line_end":180,"column_start":9,"column_end":23},"name":"bytes_consumed","qualname":"::StreamResult::bytes_consumed","value":"usize","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" The number of bytes consumed from the input slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes consumed from the input slice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5542,"byte_end":5596,"line_start":179,"line_end":179,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1099},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5693,"byte_end":5706,"line_start":182,"line_end":182,"column_start":9,"column_end":22},"name":"bytes_written","qualname":"::StreamResult::bytes_written","value":"usize","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" The number of bytes written to the output slice.\n","sig":null,"attributes":[{"value":"/ The number of bytes written to the output slice.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5632,"byte_end":5684,"line_start":181,"line_end":181,"column_start":5,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":1100},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5762,"byte_end":5768,"line_start":184,"line_end":184,"column_start":9,"column_end":15},"name":"status","qualname":"::StreamResult::status","value":"core::result::Result<MZStatus, MZError>","parent":{"krate":0,"index":1097},"children":[],"decl_id":null,"docs":" The return status of the call.\n","sig":null,"attributes":[{"value":"/ The return status of the call.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5719,"byte_end":5753,"line_start":183,"line_end":183,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6077,"byte_end":6081,"line_start":199,"line_end":199,"column_start":8,"column_end":12},"name":"from","qualname":"<MZResult as core::convert::From>::from","value":"fn from(StreamResult) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6201,"byte_end":6205,"line_start":205,"line_end":205,"column_start":8,"column_end":12},"name":"from","qualname":"<MZResult as core::convert::From>::from","value":"fn from(&StreamResult) -> Self","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14426,"byte_end":14437,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14550,"byte_end":14561,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14828,"byte_end":14836,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26316,"byte_end":26326,"line_start":230,"line_end":230,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26668,"byte_end":26678,"line_start":242,"line_end":242,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32152,"byte_end":32167,"line_start":421,"line_end":421,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35651,"byte_end":35666,"line_start":517,"line_end":517,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36303,"byte_end":36315,"line_start":538,"line_end":538,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36988,"byte_end":36999,"line_start":562,"line_end":562,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":37878,"byte_end":37889,"line_start":594,"line_end":594,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":38842,"byte_end":38855,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":40413,"byte_end":40430,"line_start":685,"line_end":685,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":41641,"byte_end":41650,"line_start":734,"line_end":734,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":232},{"krate":0,"index":233}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":43470,"byte_end":43473,"line_start":786,"line_end":786,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":45486,"byte_end":45498,"line_start":846,"line_end":846,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":45763,"byte_end":45775,"line_start":856,"line_end":856,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":279},{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":58181,"byte_end":58190,"line_start":1219,"line_end":1219,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":305}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":65397,"byte_end":65408,"line_start":1414,"line_end":1414,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":67121,"byte_end":67128,"line_start":1473,"line_end":1473,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":118937,"byte_end":118949,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":440},{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125607,"byte_end":125624,"line_start":198,"line_end":198,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126709,"byte_end":126726,"line_start":233,"line_end":233,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":128438,"byte_end":128443,"line_start":305,"line_end":305,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":500}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/output_buffer.rs","byte_start":193278,"byte_end":193290,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195267,"byte_end":195275,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195673,"byte_end":195682,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195993,"byte_end":196002,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197040,"byte_end":197052,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":629}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197431,"byte_end":197443,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110211,"byte_end":110222,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1896,"byte_end":1903,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4795,"byte_end":4805,"line_start":156,"line_end":156,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5788,"byte_end":5800,"line_start":187,"line_end":187,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6059,"byte_end":6067,"line_start":198,"line_end":198,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6183,"byte_end":6191,"line_start":204,"line_end":204,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":834,"byte_end":841,"line_start":29,"line_end":29,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6393,"byte_end":6397,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/mod.rs","byte_start":6407,"byte_end":6413,"line_start":8,"line_end":8,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":361}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":851,"byte_end":858,"line_start":30,"line_end":30,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":393}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":107756,"byte_end":107760,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":409}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":107789,"byte_end":107795,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":556}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14426,"byte_end":14437,"line_start":31,"line_end":31,"column_start":6,"column_end":17},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14550,"byte_end":14561,"line_start":38,"line_end":38,"column_start":18,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/buffer.rs","byte_start":14828,"byte_end":14836,"line_start":52,"line_end":52,"column_start":18,"column_end":26},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":41},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26316,"byte_end":26326,"line_start":230,"line_end":230,"column_start":24,"column_end":34},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":742},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":26668,"byte_end":26678,"line_start":242,"line_end":242,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":32152,"byte_end":32167,"line_start":421,"line_end":421,"column_start":6,"column_end":21},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":35651,"byte_end":35666,"line_start":517,"line_end":517,"column_start":18,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":157},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36303,"byte_end":36315,"line_start":538,"line_end":538,"column_start":10,"column_end":22},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":36988,"byte_end":36999,"line_start":562,"line_end":562,"column_start":10,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":37878,"byte_end":37889,"line_start":594,"line_end":594,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":38842,"byte_end":38855,"line_start":630,"line_end":630,"column_start":10,"column_end":23},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":40413,"byte_end":40430,"line_start":685,"line_end":685,"column_start":10,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":210},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":41641,"byte_end":41650,"line_start":734,"line_end":734,"column_start":6,"column_end":15},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":43470,"byte_end":43473,"line_start":786,"line_end":786,"column_start":6,"column_end":9},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":247},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":45486,"byte_end":45498,"line_start":846,"line_end":846,"column_start":18,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":234},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":45763,"byte_end":45775,"line_start":856,"line_end":856,"column_start":6,"column_end":18},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":58181,"byte_end":58190,"line_start":1219,"line_end":1219,"column_start":6,"column_end":15},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":65397,"byte_end":65408,"line_start":1414,"line_end":1414,"column_start":6,"column_end":17},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/deflate/core.rs","byte_start":67121,"byte_end":67128,"line_start":1473,"line_end":1473,"column_start":6,"column_end":13},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":329},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":118937,"byte_end":118949,"line_start":28,"line_end":28,"column_start":6,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":125607,"byte_end":125624,"line_start":198,"line_end":198,"column_start":6,"column_end":23},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":467},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":126709,"byte_end":126726,"line_start":233,"line_end":233,"column_start":18,"column_end":35},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":467},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/core.rs","byte_start":128438,"byte_end":128443,"line_start":305,"line_end":305,"column_start":6,"column_end":11},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":829},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/output_buffer.rs","byte_start":193278,"byte_end":193290,"line_start":11,"line_end":11,"column_start":10,"column_end":22},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195267,"byte_end":195275,"line_start":22,"line_end":22,"column_start":22,"column_end":30},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":604},"to":{"krate":0,"index":602}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195673,"byte_end":195682,"line_start":36,"line_end":36,"column_start":22,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":608},"to":{"krate":0,"index":602}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":195993,"byte_end":196002,"line_start":49,"line_end":49,"column_start":22,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":613},"to":{"krate":0,"index":602}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197040,"byte_end":197052,"line_start":83,"line_end":83,"column_start":18,"column_end":30},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":618},"to":{"krate":1,"index":3157}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/stream.rs","byte_start":197431,"byte_end":197443,"line_start":97,"line_end":97,"column_start":6,"column_end":18},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":618},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/inflate/mod.rs","byte_start":110211,"byte_end":110222,"line_start":65,"line_end":65,"column_start":6,"column_end":17},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":1896,"byte_end":1903,"line_start":62,"line_end":62,"column_start":6,"column_end":13},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":983},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":4795,"byte_end":4805,"line_start":156,"line_end":156,"column_start":6,"column_end":16},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":5788,"byte_end":5800,"line_start":187,"line_end":187,"column_start":6,"column_end":18},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6059,"byte_end":6067,"line_start":198,"line_end":198,"column_start":44,"column_end":52},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":685},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/miniz_oxide-0.5.4/src/lib.rs","byte_start":6183,"byte_end":6191,"line_start":204,"line_end":204,"column_start":45,"column_end":53},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":685},"to":{"krate":1,"index":3085}}]}