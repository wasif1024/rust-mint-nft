{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8","program":"/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","dlopen","/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=066c72712b5405a8","-C","extra-filename=-066c72712b5405a8","--out-dir","/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","-L","dependency=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","--extern","dlopen_derive=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libdlopen_derive-58cc3ca9c0c04e70.dylib","--extern","lazy_static=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/liblazy_static-807d58eac20269da.rmeta","--extern","libc=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/liblibc-49d6f90793305e95.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libdlopen-066c72712b5405a8.rmeta"},"prelude":{"crate_id":{"name":"dlopen","disambiguator":[15495409543684900927,0]},"crate_root":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src","external_crates":[{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4485569597606079733,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[14116380118705386640,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6269322086078963025,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[16152481959168563413,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7897074911849024150,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[7299104579826168146,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2669544452907545777,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[14288251452253695433,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[13943810077905921301,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2237926517141734526,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[5541021343498733002,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[7188895526679788668,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[15555671723428220450,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[13375000548276363576,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[8920282723255285566,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[2397004371161247654,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":20,"id":{"name":"lazy_static","disambiguator":[15480920620595466049,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","num":21,"id":{"name":"libc","disambiguator":[2594694148884002105,0]}}],"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":0,"byte_end":5543,"line_start":1,"line_end":135,"column_start":1,"column_end":20}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":694},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":6533,"byte_end":6540,"line_start":37,"line_end":37,"column_start":24,"column_end":31},"alias_span":null,"name":"Library","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":703},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":6542,"byte_end":6553,"line_start":37,"line_end":37,"column_start":33,"column_end":44},"alias_span":null,"name":"AddressInfo","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":698},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":6555,"byte_end":6572,"line_start":37,"line_end":37,"column_start":46,"column_end":63},"alias_span":null,"name":"OverlappingSymbol","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":64},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":6574,"byte_end":6593,"line_start":37,"line_end":37,"column_start":65,"column_end":84},"alias_span":null,"name":"AddressInfoObtainer","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20706,"byte_end":20713,"line_start":104,"line_end":104,"column_start":24,"column_end":31},"alias_span":null,"name":"Library","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":752},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20737,"byte_end":20743,"line_start":105,"line_end":105,"column_start":23,"column_end":29},"alias_span":null,"name":"Symbol","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20764,"byte_end":20773,"line_start":106,"line_end":106,"column_start":20,"column_end":29},"alias_span":null,"name":"SymBorApi","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":720},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20802,"byte_end":20811,"line_start":107,"line_end":107,"column_start":28,"column_end":37},"alias_span":null,"name":"PtrOrNull","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":736},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20844,"byte_end":20856,"line_start":108,"line_end":108,"column_start":32,"column_end":44},"alias_span":null,"name":"PtrOrNullMut","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":768},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20883,"byte_end":20886,"line_start":109,"line_end":109,"column_start":26,"column_end":29},"alias_span":null,"name":"Ref","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":783},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20917,"byte_end":20923,"line_start":110,"line_end":110,"column_start":30,"column_end":36},"alias_span":null,"name":"RefMut","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20949,"byte_end":20962,"line_start":111,"line_end":111,"column_start":25,"column_end":38},"alias_span":null,"name":"FromRawResult","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":484},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":20989,"byte_end":20998,"line_start":112,"line_end":112,"column_start":26,"column_end":35},"alias_span":null,"name":"Container","value":"","parent":{"krate":0,"index":164}},{"kind":"Use","ref_id":{"krate":0,"index":547},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":44255,"byte_end":44265,"line_start":85,"line_end":85,"column_start":20,"column_end":30},"alias_span":null,"name":"WrapperApi","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":553},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":44292,"byte_end":44307,"line_start":86,"line_end":86,"column_start":26,"column_end":41},"alias_span":null,"name":"WrapperMultiApi","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":574},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":44334,"byte_end":44343,"line_start":87,"line_end":87,"column_start":26,"column_end":35},"alias_span":null,"name":"Container","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":610},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":44369,"byte_end":44386,"line_start":88,"line_end":88,"column_start":25,"column_end":42},"alias_span":null,"name":"OptionalContainer","value":"","parent":{"krate":0,"index":539}},{"kind":"Use","ref_id":{"krate":0,"index":791},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":5537,"byte_end":5542,"line_start":135,"line_end":135,"column_start":14,"column_end":19},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":0,"byte_end":5543,"line_start":1,"line_end":135,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":164},{"krate":0,"index":527},{"krate":0,"index":539},{"krate":0,"index":658},{"krate":0,"index":691}],"decl_id":null,"docs":"\nLibrary for opening and working with dynamic link libraries (also known as shared object).","sig":null,"attributes":[{"value":"*\n\nLibrary for opening and working with dynamic link libraries (also known as shared object).\n\n# Overview\n\nThis library is an effort to make use of dynamic link libraries in Rust simple.\nPreviously existing solutions were either unsafe, provided huge overhead of required writing too much code to achieve simple things.\nI hope that this library will help you to quickly get what you need and avoid errors.\n\n# Quick example\n\n```no_run\nextern crate dlopen;\n#[macro_use]\nextern crate dlopen_derive;\nuse dlopen::wrapper::{Container, WrapperApi};\n\n#[derive(WrapperApi)]\nstruct Api<'a> {\n    example_rust_fun: fn(arg: i32) -> u32,\n    example_c_fun: unsafe extern \"C\" fn(),\n    example_reference: &'a mut i32,\n}\n\nfn main(){\n    let mut cont: Container<Api> =\n        unsafe { Container::load(\"libexample.so\") }.expect(\"Could not open library or load symbols\");\n    cont.example_rust_fun(5);\n    unsafe{cont.example_c_fun()};\n    *cont.example_reference_mut() = 5;\n}\n```\n\n# Features\n\n## Main features\n\n* Supports majority of platforms and is platform independent.\n* Is consistent with Rust error handling mechanism and makes making mistakes much more difficult.\n* Is very lightweight. It mostly uses zero cost wrappers to create safer abstractions over platform API.\n* Is thread safe.\n* Is object-oriented programming friendly.\n* Has a low-level API that provides full flexibility of using libraries.\n* Has two high-level APIs that protect against dangling symbols - each in its own way.\n* High level APIs support automatic loading of symbols into structures. You only need to define a\n    structure that represents an API. The rest happens automatically and requires only minimal amount of code.\n* Automatic loading of symbols helps you to follow the DRY paradigm.\n\n## Compare with other libraries\n\n|Feature                             | dlopen     | [libloading](https://github.com/nagisa/rust_libloading) | [sharedlib](https://github.com/Tyleo/sharedlib) |\n|------------------------------------|------------|---------------------------------------------------------|-------------------------------------------------|\n| Basic functionality                | Yes        | Yes        | Yes       |\n| Multiplatform                      | Yes        | Yes        | Yes       |\n|Dangling symbol prevention          | Yes        | Yes        | Yes       |\n| Thread safety                      | Yes        | **Potential problem with SetErrorMode() on older Windows platforms** | **No support for SetErrorMode (library may block the application on Windows)**|\n| Loading of symbols into structures | Yes        | **No**     | **No**\n| Overhead                           | Minimal    | Minimal    | **Some overhead** |\n| Low-level, unsafe API              | Yes        | Yes        | Yes       |\n| Object-oriented friendly           | Yes        | **No**       | Yes     |\n| Load from the program itself       | Yes        | **No**       | **No**  |\n| Obtaining address information (dladdr) | Yes    |  **Unix only** | **No**|\n\n## Safety\n\nPlease note that while Rust aims at being 100% safe language, it does not yet provide mechanisms that would allow me to create a 100% safe library, so I had to settle on 99%.\nAlso the nature of dynamic link libraries requires casting obtained pointers into types that are defined on the application side. And this cannot be safe.\nHaving said that I still think that this library provides the best approach and greatest safety possible in Rust.\n\n# Usage:\n\nCargo.toml:\n\n```toml\n[dependencies]\ndlopen = \"0.1\"\n```\n\n# Documentation\n\n[Cargo documentation](https://docs.rs/dlopen)\n\n[Examples](../examples)\n\n[Changelog](https://github.com/szymonwieloch/rust-dlopen/releases)\n\n# License\nThis code is licensed under [MIT](../LICENSE) license.\n\n# Acknowledgement\n\nSpecial thanks to [Simonas Kazlauskas](https://github.com/nagisa) whose [libloading](https://github.com/nagisa/rust_libloading) became code base for my project.\n\n# Comparison of APIs:\n\n* [**raw**](./raw/index.html) - a low-level API. It is mainly intended to give you full flexibility\n    if you decide to create you own custom solution for handling dynamic link libraries.\n    For typical operations you probably should use one of high-level APIs.\n\n* [**symbor**](./symbor/index.html) - a high-level API. It prevents dangling symbols by creating\n    zero cost structural wrappers around symbols obtained from the library. These wrappers use\n    Rust borrowing mechanism to make sure that the library will never get released before obtained\n    symbols.\n\n* [**wrapper**](./wrapper/index.html) - a high-level API. It prevents dangling symbols by creating\n    zero cost functional wrappers around symbols obtained from the library. These wrappers prevent\n    accidental copying of raw symbols from library API. Dangling symbols are prevented by keeping\n    library and its API in one structure - this makes sure that symbols and library are released\n    together.\n\nAdditionally both high-level APIs provide a way to automatically load symbols into a structure using\nRust reflection mechanism. Decision which API should be used is a matter of taste - please check\ndocumentation of both of them and use the one that you prefer.\nAt the moment none seems to have any reasonable advantage over the other.\n\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":0,"byte_end":5280,"line_start":1,"line_end":117,"column_start":1,"column_end":3}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":70},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":161}],"decl_id":null,"docs":"Low-level API for opening and getting raw symbols from dynamic link libraries.","sig":null,"attributes":[{"value":"*\nLow-level API for opening and getting raw symbols from dynamic link libraries.\n\nAs a low-level API it returns raw pointers, references and functions from loaded libraries.\nThis means that this API does not provide any protection against problems with dangling symbols.\nYou may consider using other APIs to achieve better safety.\nHowever this API is the most flexible one and you may find is useful when creating your custom\napproach to loading dynamic link libraries.\n\n# Example\n```no_run\nextern crate dlopen;\nuse dlopen::raw::Library;\nfn main(){\n    let lib = Library::open(\"libexample.so\").unwrap();\n    let fun_add_one: unsafe extern \"C\" fn(i32)->i32 = unsafe{lib.symbol(\"add_one\")}.unwrap();\n    println!(\"1+1= {}\", unsafe{fun_add_one(1)});\n\n    drop(lib);\n    //warning! fun_add_one is now a dangling symbol and use of it may crash your application.\n}\n```\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":5545,"byte_end":6412,"line_start":1,"line_end":23,"column_start":1,"column_end":3}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/mod.rs","byte_start":6416,"byte_end":6419,"line_start":27,"line_end":27,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":694},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":7880,"byte_end":7887,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"Library","qualname":"::raw::common::Library","value":"Library {  }","parent":null,"children":[{"krate":0,"index":695}],"decl_id":null,"docs":"Main interface for opening and working with a dynamic link library.","sig":null,"attributes":[{"value":"*\nMain interface for opening and working with a dynamic link library.\n\n**Note:** Several methods have their \"*_cstr\" equivalents. This is because all native OS\ninterfaces actually use C-strings. If you pass\n[`CStr`](https://doc.rust-lang.org/std/ffi/struct.CStr.html)\nas an argument, Library doesn't need to perform additional conversion from Rust string to\nC-string.. This makes `*_cstr\" functions slightly more optimal than their normal equivalents.\nIt is recommended that you use\n[const-cstr](https://github.com/abonander/const-cstr) crate to create statically allocated\nC-strings.\n\n**Note:** The handle to the library gets released when the library object gets dropped.\nUnless your application opened the library multiple times, this is the moment when symbols\nobtained from the library become dangling symbols.\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":7031,"byte_end":7851,"line_start":12,"line_end":27,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":8731,"byte_end":8735,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"open","qualname":"<Library>::open","value":"fn open<S>(S) -> Result<Library, Error> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"    Open a dynamic library.","sig":null,"attributes":[{"value":"*\n    Open a dynamic library.\n\n    **Note:** different platforms search for libraries in different directories.\n    Therefore this function cannot be 100% platform independent.\n    However it seems that all platforms support the full path and\n    searching in default os directories if you provide only the file name.\n    Please refer to your operating system guide for precise information about the directories\n    where the operating system searches for dynamic link libraries.\n\n    # Example\n\n    ```no_run\n    extern crate dlopen;\n    use dlopen::raw::Library;\n\n    fn main() {\n        //use full path\n        let lib = Library::open(\"/lib/i386-linux-gnu/libm.so.6\").unwrap();\n        //use only file name\n        let lib = Library::open(\"libm.so.6\").unwrap();\n    }\n    ```\n    */","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":7932,"byte_end":8719,"line_start":34,"line_end":57,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":9070,"byte_end":9079,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"open_self","qualname":"<Library>::open_self","value":"fn open_self() -> Result<Library, Error>","parent":null,"children":[],"decl_id":null,"docs":"    Open the main program itself as a library.","sig":null,"attributes":[{"value":"*\n    Open the main program itself as a library.\n\n    This allows a shared library to load symbols of the program it was loaded\n    into.\n    */","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":8912,"byte_end":9058,"line_start":67,"line_end":72,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":10450,"byte_end":10456,"line_start":113,"line_end":113,"column_start":19,"column_end":25},"name":"symbol","qualname":"<Library>::symbol","value":"unsafe fn symbol<T>(&Self, &str) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"    Obtain symbol from opened library.","sig":null,"attributes":[{"value":"*\n    Obtain symbol from opened library.\n\n    **Note:** the `T` template type needs to have a size of a pointer.\n    Because Rust does not support static casts at the moment, the size of the type\n    is checked in runtime and causes panic if it doesn't match.\n\n    **Note:** It is legal for a library to export null symbols.\n    However this is something that almost nobody expects.\n    Therefore allowing it here would bring many problems, especially if user obtains references\n    or functions.\n    This method checks the address value and returns `Error::NullSymbol` error if the value is null.\n    If your code does require obtaining symbols with null value, please do something like this:\n\n    # Example\n\n    ```no_run\n    extern crate dlopen;\n    use dlopen::raw::Library;\n    use dlopen::Error;\n    use std::ptr::null;\n    fn main(){\n        let lib = Library::open(\"libyourlib.so\").unwrap();\n        let ptr_or_null: * const i32 = match unsafe{ lib.symbol(\"symbolname\") } {\n            Ok(val) => val,\n            Err(err) => match err {\n                Error::NullSymbol => null(),\n                _ => panic!(\"Could not obtain the symbol\")\n            }\n        };\n        //do something with the symbol\n    }\n    ```\n    */","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":9195,"byte_end":10431,"line_start":79,"line_end":112,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":10680,"byte_end":10691,"line_start":118,"line_end":118,"column_start":19,"column_end":30},"name":"symbol_cstr","qualname":"<Library>::symbol_cstr","value":"unsafe fn symbol_cstr<T>(&Self, &CStr) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `symbol` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `symbol` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":10593,"byte_end":10661,"line_start":117,"line_end":117,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11380,"byte_end":11384,"line_start":137,"line_end":137,"column_start":8,"column_end":12},"name":"drop","qualname":"<Library as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":698},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11627,"byte_end":11644,"line_start":147,"line_end":147,"column_start":12,"column_end":29},"name":"OverlappingSymbol","qualname":"::raw::common::OverlappingSymbol","value":"OverlappingSymbol { name, addr }","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":"Container for information about overlapping symbol from dynamic load library.\n","sig":null,"attributes":[{"value":"/Container for information about overlapping symbol from dynamic load library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11518,"byte_end":11598,"line_start":145,"line_end":145,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":699},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11685,"byte_end":11689,"line_start":149,"line_end":149,"column_start":9,"column_end":13},"name":"name","qualname":"::raw::common::OverlappingSymbol::name","value":"std::string::String","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":"Overlapping symbol name\n","sig":null,"attributes":[{"value":"/Overlapping symbol name","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11650,"byte_end":11676,"line_start":148,"line_end":148,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":700},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11742,"byte_end":11746,"line_start":151,"line_end":151,"column_start":9,"column_end":13},"name":"addr","qualname":"::raw::common::OverlappingSymbol::addr","value":"*const ()","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":" Overlapping symbol address\n","sig":null,"attributes":[{"value":"/ Overlapping symbol address","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11703,"byte_end":11733,"line_start":150,"line_end":150,"column_start":5,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":703},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11873,"byte_end":11884,"line_start":156,"line_end":156,"column_start":12,"column_end":23},"name":"AddressInfo","qualname":"::raw::common::AddressInfo","value":"AddressInfo { dll_path, dll_base_addr, overlapping_symbol }","parent":null,"children":[{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706}],"decl_id":null,"docs":" Container for information about an address obtained from dynamic load library.\n","sig":null,"attributes":[{"value":"/ Container for information about an address obtained from dynamic load library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11762,"byte_end":11844,"line_start":154,"line_end":154,"column_start":1,"column_end":83}}]},{"kind":"Field","id":{"krate":0,"index":704},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11958,"byte_end":11966,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"name":"dll_path","qualname":"::raw::common::AddressInfo::dll_path","value":"std::string::String","parent":{"krate":0,"index":703},"children":[],"decl_id":null,"docs":" Path to the library that is the source of this symbol.\n","sig":null,"attributes":[{"value":"/ Path to the library that is the source of this symbol.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11891,"byte_end":11949,"line_start":157,"line_end":157,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":705},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12055,"byte_end":12068,"line_start":160,"line_end":160,"column_start":9,"column_end":22},"name":"dll_base_addr","qualname":"::raw::common::AddressInfo::dll_base_addr","value":"*const ()","parent":{"krate":0,"index":703},"children":[],"decl_id":null,"docs":" Base address of the library that is the source of this symbol.\n","sig":null,"attributes":[{"value":"/ Base address of the library that is the source of this symbol.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11980,"byte_end":12046,"line_start":159,"line_end":159,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":706},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12271,"byte_end":12289,"line_start":164,"line_end":164,"column_start":9,"column_end":27},"name":"overlapping_symbol","qualname":"::raw::common::AddressInfo::overlapping_symbol","value":"std::option::Option<raw::common::OverlappingSymbol>","parent":{"krate":0,"index":703},"children":[],"decl_id":null,"docs":" Information about the overlapping symbol from the dynamic load library.","sig":null,"attributes":[{"value":"/ Information about the overlapping symbol from the dynamic load library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12086,"byte_end":12161,"line_start":161,"line_end":161,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12166,"byte_end":12169,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ The information is optional since the given address may not overlap with any symbol.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12174,"byte_end":12262,"line_start":163,"line_end":163,"column_start":5,"column_end":93}}]},{"kind":"Struct","id":{"krate":0,"index":64},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12418,"byte_end":12437,"line_start":168,"line_end":168,"column_start":12,"column_end":31},"name":"AddressInfoObtainer","qualname":"::raw::common::AddressInfoObtainer","value":"AddressInfoObtainer {  }","parent":null,"children":[],"decl_id":null,"docs":"Obtains information about an address previously loaded from a dynamic load library.\n","sig":null,"attributes":[{"value":"/Obtains information about an address previously loaded from a dynamic load library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12320,"byte_end":12406,"line_start":167,"line_end":167,"column_start":1,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12481,"byte_end":12484,"line_start":172,"line_end":172,"column_start":12,"column_end":15},"name":"new","qualname":"<AddressInfoObtainer>::new","value":"fn new() -> AddressInfoObtainer","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":13497,"byte_end":13503,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"obtain","qualname":"<AddressInfoObtainer>::obtain","value":"fn obtain(&Self, *const ()) -> Result<AddressInfo, Error>","parent":null,"children":[],"decl_id":null,"docs":"    Obtains information about an address previously loaded from a dynamic load library.","sig":null,"attributes":[{"value":"*\n    Obtains information about an address previously loaded from a dynamic load library.\n\n    # Example\n\n    ```no_run\n    extern crate dlopen;\n    use dlopen::raw::{Library, AddressInfoObtainer};\n    fn main() {\n        let lib = Library::open(\"libyourlib.so\").unwrap();\n        let ptr: * const i32 = unsafe{ lib.symbol(\"symbolname\") }.unwrap();\n\n        // now we can obtain information about the symbol - library, base address etc.\n        let aio = AddressInfoObtainer::new();\n        let addr_info = aio.obtain(ptr as * const ()).unwrap();\n        println!(\"Library path: {}\", &addr_info.dll_path);\n        println!(\"Library base address: {:?}\", addr_info.dll_base_addr);\n        if let Some(os) = addr_info.overlapping_symbol{\n            println!(\"Overlapping symbol name: {}\", &os.name);\n            println!(\"Overlapping symbol address: {:?}\", os.addr);\n        }\n\n    }\n    ```\n    */","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12587,"byte_end":13485,"line_start":177,"line_end":201,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":13651,"byte_end":13655,"line_start":208,"line_end":208,"column_start":8,"column_end":12},"name":"drop","qualname":"<AddressInfoObtainer as std::ops::Drop>::drop","value":"fn drop(&mut Self)","parent":{"krate":2,"index":3422},"children":[],"decl_id":{"krate":2,"index":3423},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":164},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"symbor","qualname":"::symbor","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":201},{"krate":0,"index":237},{"krate":0,"index":284},{"krate":0,"index":295},{"krate":0,"index":356},{"krate":0,"index":371},{"krate":0,"index":407},{"krate":0,"index":451},{"krate":0,"index":461},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":524}],"decl_id":null,"docs":"High-level and safe API for opening and getting symbols from dynamic libraries.\nIt is based on symbol borrowing mechanism and supports automatic loading of symbols into structures.","sig":null,"attributes":[{"value":"*\nHigh-level and safe API for opening and getting symbols from dynamic libraries.\nIt is based on symbol borrowing mechanism and supports automatic loading of symbols into structures.\n\nThis API uses Rust borrowing mechanism to prevent problems with dangling symbols\nthat take place when the library gets closed but the symbols still exist and are used.\n\n#Example of a dangling symbol prevention\n```no_run\nextern crate dlopen;\nuse dlopen::symbor::Library;\nfn main(){\n    let lib = Library::open(\"libexample.dylib\").unwrap();\n    let fun = unsafe{lib.symbol::<unsafe extern \"C\" fn(f64)->f64>(\"some_symbol_name\")}.unwrap();\n    println!(\"fun(1.0) = {}\", unsafe{fun(1.0)});\n\n    //this would not compile because fun is a symbol borrowed from lib\n    //drop(lib);\n}\n```\n**Note:** All kind of objects from the `symbor` module implement the Deref or DerefMut trait.\nThis means that you can use them as if you would use primitive types that they wrap.\n\nIt also allows automatic loading of symbols into a structure.\nThis is especially handy if you have a huge API with multiple symbols:\n\n# Example of automatic symbol loading\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::symbor::{Library, Symbol, Ref, PtrOrNull, SymBorApi};\n\n #[derive(SymBorApi)]\n struct ExampleApi<'a> {\n    pub fun: Symbol<'a, unsafe extern \"C\" fn(i32) -> i32>,\n    pub glob_i32: Ref<'a, i32>,\n    pub maybe_c_str: PtrOrNull<'a, u8>,\n    pub opt_fun: Option<Symbol<'a, fn()>>\n }\n\nfn main(){\n    let lib = Library::open(\"example.dll\").expect(\"Could not open library\");\n    let api = unsafe{ExampleApi::load(&lib)}.expect(\"Could not load symbols\");\n    println!(\"fun(4)={}\", unsafe{(api.fun)(4)});\n    println!(\"glob_i32={}\", *api.glob_i32);\n    println!(\"The pointer is null={}\", api.maybe_c_str.is_null());\n    match api.opt_fun {\n        Some(fun) => fun(),\n        None => println!(\"Optional function not found in the library\")\n    }\n\n    //this would not compile:\n    //drop(lib);\n}\n```\n\n**Note:** You can obtain optional symbols (`Option<Symbol<T>>`).\nThis is very useful when you are dealing with\n    different versions of libraries and the newer versions support more functions.\n    If it is not possible to obtain the given symbol, the option is set to `None',\n    otherwise it contains the obtained symbol.\n\nUnfortunately in Rust it is not possible to create an API for dynamic link libraries that would\nbe 100% safe. This API aims to be 99% safe by providing zero cost wrappers around raw symbols.\nHowever it is possible to make a mistake if you dereference safe wrappers into raw symbols.\n\n#Example of a mistake - dangling symbol\n\n```no_run\nextern crate dlopen;\nuse dlopen::symbor::Library;\nfn main(){\n    let raw_fun = {\n        let lib = Library::open(\"libexample.dylib\").unwrap();\n        let safe_fun = unsafe{\n            lib.symbol::<unsafe extern \"C\" fn(f64)->f64>(\"some_symbol_name\")\n        }.unwrap();\n        *safe_fun\n    };\n\n    //raw_fun is now a dangling symbol\n}\n```\n\nOriginal idea for this solution comes from Simonas Kazlauskas and his crate\n[libloading](https://github.com/nagisa/rust_libloading).\nMany improvements were added to solve several issues.\n\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/mod.rs","byte_start":17347,"byte_end":20533,"line_start":1,"line_end":91,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":720},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21290,"byte_end":21299,"line_start":10,"line_end":10,"column_start":12,"column_end":21},"name":"PtrOrNull","qualname":"::symbor::ptr_or_null::PtrOrNull","value":"PtrOrNull {  }","parent":null,"children":[{"krate":0,"index":723},{"krate":0,"index":724}],"decl_id":null,"docs":"Safe wrapper around const pointer.","sig":null,"attributes":[{"value":"/Safe wrapper around const pointer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21132,"byte_end":21169,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21170,"byte_end":21173,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/It is recommended only for obtaining pointers that can have null value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21174,"byte_end":21248,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":185},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21419,"byte_end":21422,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<PtrOrNull>::new","value":"fn new(*const T) -> PtrOrNull","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21631,"byte_end":21646,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<PtrOrNull as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21985,"byte_end":21990,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"deref","qualname":"<PtrOrNull as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &*const T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":736},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22452,"byte_end":22464,"line_start":10,"line_end":10,"column_start":12,"column_end":24},"name":"PtrOrNullMut","qualname":"::symbor::ptr_or_null_mut::PtrOrNullMut","value":"PtrOrNullMut {  }","parent":null,"children":[{"krate":0,"index":739},{"krate":0,"index":740}],"decl_id":null,"docs":"Safe wrapper around mutable pointer.","sig":null,"attributes":[{"value":"/Safe wrapper around mutable pointer.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22292,"byte_end":22331,"line_start":6,"line_end":6,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22332,"byte_end":22335,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/It is recommended only for obtaining pointers that can have null value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22336,"byte_end":22410,"line_start":8,"line_end":8,"column_start":1,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22585,"byte_end":22588,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<PtrOrNullMut>::new","value":"fn new(*mut T) -> PtrOrNullMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":225},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22804,"byte_end":22819,"line_start":25,"line_end":25,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<PtrOrNullMut as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23160,"byte_end":23165,"line_start":38,"line_end":38,"column_start":8,"column_end":13},"name":"deref","qualname":"<PtrOrNullMut as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &*mut T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":752},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23849,"byte_end":23855,"line_start":13,"line_end":13,"column_start":12,"column_end":18},"name":"Symbol","qualname":"::symbor::symbol::Symbol","value":"Symbol {  }","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756}],"decl_id":null,"docs":"Safe wrapper around a symbol obtained from `Library`.","sig":null,"attributes":[{"value":"/Safe wrapper around a symbol obtained from `Library`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23513,"byte_end":23569,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23570,"byte_end":23573,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is the most generic type, valid for obtaining functions, references and pointers.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23574,"byte_end":23664,"line_start":9,"line_end":9,"column_start":1,"column_end":91}},{"value":"/ It does not accept null value of the library symbol. Other types may provide","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23665,"byte_end":23745,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ more specialized functionality better for some use cases.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23746,"byte_end":23807,"line_start":11,"line_end":11,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23964,"byte_end":23967,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<Symbol>::new","value":"fn new(T) -> Symbol","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24157,"byte_end":24172,"line_start":28,"line_end":28,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<Symbol as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24665,"byte_end":24670,"line_start":46,"line_end":46,"column_start":8,"column_end":13},"name":"deref","qualname":"<Symbol as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24800,"byte_end":24809,"line_start":53,"line_end":53,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<Symbol as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":293},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25710,"byte_end":25723,"line_start":16,"line_end":16,"column_start":11,"column_end":24},"name":"FromRawResult","qualname":"::symbor::from_raw::FromRawResult","value":"FromRawResult","parent":null,"children":[{"krate":0,"index":294}],"decl_id":null,"docs":"Allows conversion of raw symbol result into the given symbol.","sig":null,"attributes":[{"value":"/Allows conversion of raw symbol result into the given symbol.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25111,"byte_end":25175,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25176,"byte_end":25179,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/This trait needs to be implemented by all members of structures that implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25180,"byte_end":25261,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ the `SymBorApi` trait. It is used to covert raw result obtained from library","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25262,"byte_end":25342,"line_start":8,"line_end":8,"column_start":1,"column_end":81}},{"value":"/ into the given object accessible to the user.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25343,"byte_end":25392,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25393,"byte_end":25396,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ **Note:** `Option<T> where T: FromRawResult` also implements `FromRawResult`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25397,"byte_end":25478,"line_start":11,"line_end":11,"column_start":1,"column_end":82}},{"value":"/ This allows you to use options in structures implementing `SymBorApi`. If","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25479,"byte_end":25556,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ the symbol is found, the variable contains `Some(symbol)`, otherwise `None`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25557,"byte_end":25637,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25638,"byte_end":25641,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ **Note:** You probably won't need to use it directly.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25642,"byte_end":25699,"line_start":15,"line_end":15,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/from_raw.rs","byte_start":25763,"byte_end":25778,"line_start":20,"line_end":20,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"::symbor::from_raw::FromRawResult::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":328},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27306,"byte_end":27313,"line_start":43,"line_end":43,"column_start":12,"column_end":19},"name":"Library","qualname":"::symbor::library::Library","value":"Library {  }","parent":null,"children":[{"krate":0,"index":329}],"decl_id":null,"docs":"Safe wrapper around dynamic link library handle.","sig":null,"attributes":[{"value":"*\nSafe wrapper around dynamic link library handle.\n\nMethods of `Library` return only types that make the library borrowed. Therefore the problem with\ndangling symbols is prevented.\n\n**Note:**: It is recommended that you use certain methods in certain situations:\n\n* `symbol()` - for obtaining functions and pointers (but only if you can't use references\n    instead of pointers and you do not accept null value of a pointer).\n* `reference()` and `reference_mut()` - for obtaining access to\n    statically allocated objects - either constant or mutable.\n* `ptr_or_null()` and `ptr_or_null_mut()` - for obtaining pointers if you accept null values of\npointers (in 99% of cases you should rather use previously mentioned methods).\n\n#Example\n\n```no_run\nextern crate dlopen;\nuse dlopen::symbor::Library;\n\nfn main(){\n    let lib = Library::open(\"libexample.dylib\").unwrap();\n    let fun = unsafe{lib.symbol::<unsafe extern \"C\" fn()>(\"function\")}.unwrap();\n    unsafe{fun()};\n    let glob_val: &mut u32 = unsafe{lib.reference_mut(\"glob_val\")}.unwrap();\n    *glob_val = 42;\n    let ptr_or_null = unsafe{lib.ptr_or_null::<()>(\"void_ptr\")}.unwrap();\n    println!(\"Pointer is null: {}\", ptr_or_null.is_null());\n}\n```\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":26084,"byte_end":27294,"line_start":11,"line_end":42,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27429,"byte_end":27433,"line_start":49,"line_end":49,"column_start":12,"column_end":16},"name":"open","qualname":"<Library>::open","value":"fn open<S>(S) -> Result<Library, Error> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"Open dynamic link library using provided file name or path.\n","sig":null,"attributes":[{"value":"/Open dynamic link library using provided file name or path.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27355,"byte_end":27417,"line_start":48,"line_end":48,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27749,"byte_end":27758,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"open_self","qualname":"<Library>::open_self","value":"fn open_self() -> Result<Library, Error>","parent":null,"children":[],"decl_id":null,"docs":" Open the program itself as library.","sig":null,"attributes":[{"value":"/ Open the program itself as library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27594,"byte_end":27633,"line_start":58,"line_end":58,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27638,"byte_end":27641,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This allows a shared library to load symbols of the program it was","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27646,"byte_end":27716,"line_start":60,"line_end":60,"column_start":5,"column_end":75}},{"value":"/ loaded into.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27721,"byte_end":27737,"line_start":61,"line_end":61,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28330,"byte_end":28336,"line_start":75,"line_end":75,"column_start":19,"column_end":25},"name":"symbol","qualname":"<Library>::symbol","value":"unsafe fn symbol<T>(&Self, &str) -> Result<Symbol<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a symbol from library.","sig":null,"attributes":[{"value":"/ Obtain a symbol from library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27871,"byte_end":27904,"line_start":68,"line_end":68,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27909,"byte_end":27912,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This method is the most general one and allows obtaining basically everything assuming","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27917,"byte_end":28007,"line_start":70,"line_end":70,"column_start":5,"column_end":95}},{"value":"/ that the value of the given symbol cannot be null (use `ptr_or_null()` for this case).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28012,"byte_end":28102,"line_start":71,"line_end":71,"column_start":5,"column_end":95}},{"value":"/ However the `reference()` and `reference_mut()` methods return a native reference and they","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28107,"byte_end":28201,"line_start":72,"line_end":72,"column_start":5,"column_end":99}},{"value":"/ are more programmer friendly when you try accessing statically allocated data in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28206,"byte_end":28290,"line_start":73,"line_end":73,"column_start":5,"column_end":89}},{"value":"/ the library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28295,"byte_end":28311,"line_start":74,"line_end":74,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28537,"byte_end":28548,"line_start":80,"line_end":80,"column_start":19,"column_end":30},"name":"symbol_cstr","qualname":"<Library>::symbol_cstr","value":"unsafe fn symbol_cstr<T>(&Self, &CStr) -> Result<Symbol<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `symbol()` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `symbol()` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28448,"byte_end":28518,"line_start":79,"line_end":79,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":338},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28910,"byte_end":28921,"line_start":89,"line_end":89,"column_start":19,"column_end":30},"name":"ptr_or_null","qualname":"<Library>::ptr_or_null","value":"unsafe fn ptr_or_null<T>(&Self, &str) -> Result<PtrOrNull<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Obtain a const pointer from library.","sig":null,"attributes":[{"value":"/Obtain a const pointer from library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28666,"byte_end":28705,"line_start":84,"line_end":84,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28710,"byte_end":28713,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ **Note:** This method is only recommended for data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28718,"byte_end":28772,"line_start":86,"line_end":86,"column_start":5,"column_end":59}},{"value":"/ that can't be accessed as a reference and that can have a null pointer value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28777,"byte_end":28857,"line_start":87,"line_end":87,"column_start":5,"column_end":85}},{"value":"/ (so not in 99% of cases).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":28862,"byte_end":28891,"line_start":88,"line_end":88,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29165,"byte_end":29181,"line_start":95,"line_end":95,"column_start":19,"column_end":35},"name":"ptr_or_null_cstr","qualname":"<Library>::ptr_or_null_cstr","value":"unsafe fn ptr_or_null_cstr<T>(&Self, &CStr) -> Result<PtrOrNull<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `pointer()` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `pointer()` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29075,"byte_end":29146,"line_start":94,"line_end":94,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29761,"byte_end":29776,"line_start":111,"line_end":111,"column_start":19,"column_end":34},"name":"ptr_or_null_mut","qualname":"<Library>::ptr_or_null_mut","value":"unsafe fn ptr_or_null_mut<T>(&Self, &str) -> Result<PtrOrNullMut<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Obtain a mutable pointer from library.","sig":null,"attributes":[{"value":"/Obtain a mutable pointer from library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29515,"byte_end":29556,"line_start":106,"line_end":106,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29561,"byte_end":29564,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ **Note:** This method is only recommended for data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29569,"byte_end":29623,"line_start":108,"line_end":108,"column_start":5,"column_end":59}},{"value":"/ that can't be accessed as a reference and that can have a null pointer value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29628,"byte_end":29708,"line_start":109,"line_end":109,"column_start":5,"column_end":85}},{"value":"/ (so not in 99% of cases).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29713,"byte_end":29742,"line_start":110,"line_end":110,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30031,"byte_end":30051,"line_start":117,"line_end":117,"column_start":19,"column_end":39},"name":"ptr_or_null_mut_cstr","qualname":"<Library>::ptr_or_null_mut_cstr","value":"unsafe fn ptr_or_null_mut_cstr<T>(&Self, &CStr)\n-> Result<PtrOrNullMut<, T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `pointer_mut()` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `pointer_mut()` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":29937,"byte_end":30012,"line_start":116,"line_end":116,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30484,"byte_end":30493,"line_start":129,"line_end":129,"column_start":19,"column_end":28},"name":"reference","qualname":"<Library>::reference","value":"unsafe fn reference<T>(&Self, &str) -> Result<&T, Error>","parent":null,"children":[],"decl_id":null,"docs":"Obtain const reference to statically allocated data in the library.\n","sig":null,"attributes":[{"value":"/Obtain const reference to statically allocated data in the library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30395,"byte_end":30465,"line_start":128,"line_end":128,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":348},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30672,"byte_end":30686,"line_start":134,"line_end":134,"column_start":19,"column_end":33},"name":"reference_cstr","qualname":"<Library>::reference_cstr","value":"unsafe fn reference_cstr<T>(&Self, &CStr) -> Result<&T, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `reference()` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `reference()` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30580,"byte_end":30653,"line_start":133,"line_end":133,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":350},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30870,"byte_end":30883,"line_start":139,"line_end":139,"column_start":19,"column_end":32},"name":"reference_mut","qualname":"<Library>::reference_mut","value":"unsafe fn reference_mut<T>(&Self, &str) -> Result<&mut T, Error>","parent":null,"children":[],"decl_id":null,"docs":"Obtain mutable reference to statically allocated data in the library.\n","sig":null,"attributes":[{"value":"/Obtain mutable reference to statically allocated data in the library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30779,"byte_end":30851,"line_start":138,"line_end":138,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":31070,"byte_end":31088,"line_start":144,"line_end":144,"column_start":19,"column_end":37},"name":"reference_mut_cstr","qualname":"<Library>::reference_mut_cstr","value":"unsafe fn reference_mut_cstr<T>(&Self, &CStr) -> Result<&mut T, Error>","parent":null,"children":[],"decl_id":null,"docs":"Equivalent of the `reference_mut()` method but takes `CStr` as a argument.\n","sig":null,"attributes":[{"value":"/Equivalent of the `reference_mut()` method but takes `CStr` as a argument.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":30974,"byte_end":31051,"line_start":143,"line_end":143,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/option.rs","byte_start":31412,"byte_end":31427,"line_start":8,"line_end":8,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<Option<T> as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Option<T>, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":768},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":31981,"byte_end":31984,"line_start":11,"line_end":11,"column_start":12,"column_end":15},"name":"Ref","qualname":"::symbor::reference::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":771}],"decl_id":null,"docs":"Safe wrapper around cont reference.","sig":null,"attributes":[{"value":"/Safe wrapper around cont reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":31743,"byte_end":31781,"line_start":6,"line_end":6,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":31782,"byte_end":31785,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This type is intended to be used only inside structures implementing `SymBorApi` trait.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":31786,"byte_end":31877,"line_start":8,"line_end":8,"column_start":1,"column_end":92}},{"value":"/ In other cases you can as well use normal Rust reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":31878,"byte_end":31939,"line_start":9,"line_end":9,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32069,"byte_end":32072,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Ref>::new","value":"fn new(&'lib T) -> Ref","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32239,"byte_end":32254,"line_start":24,"line_end":24,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<Ref as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32659,"byte_end":32664,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"deref","qualname":"<Ref as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":783},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33183,"byte_end":33189,"line_start":11,"line_end":11,"column_start":12,"column_end":18},"name":"RefMut","qualname":"::symbor::reference_mut::RefMut","value":"RefMut {  }","parent":null,"children":[{"krate":0,"index":786}],"decl_id":null,"docs":"Safe wrapper around mutable reference.","sig":null,"attributes":[{"value":"/Safe wrapper around mutable reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":32955,"byte_end":32996,"line_start":6,"line_end":6,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":32997,"byte_end":33000,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This type is intended to be used only inside structures implementing `SymBorApi` trait.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33001,"byte_end":33092,"line_start":8,"line_end":8,"column_start":1,"column_end":92}},{"value":"/ In other cases you can as well use normal Rust reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33093,"byte_end":33154,"line_start":9,"line_end":9,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33281,"byte_end":33284,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<RefMut>::new","value":"fn new(&'lib mut T) -> RefMut","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":435},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33464,"byte_end":33479,"line_start":24,"line_end":24,"column_start":15,"column_end":30},"name":"from_raw_result","qualname":"<RefMut as symbor::from_raw::FromRawResult>::from_raw_result","value":"unsafe fn from_raw_result(RawResult) -> Result<Self, Error>","parent":{"krate":0,"index":293},"children":[],"decl_id":{"krate":0,"index":294},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":440},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33890,"byte_end":33895,"line_start":40,"line_end":40,"column_start":8,"column_end":13},"name":"deref","qualname":"<RefMut as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":34018,"byte_end":34027,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<RefMut as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/api.rs","byte_start":37093,"byte_end":37102,"line_start":69,"line_end":69,"column_start":11,"column_end":20},"name":"SymBorApi","qualname":"::symbor::api::SymBorApi","value":"SymBorApi<'a>","parent":null,"children":[{"krate":0,"index":460}],"decl_id":null,"docs":"Trait for automatic loading of symbols from library.","sig":null,"attributes":[{"value":"*\nTrait for automatic loading of symbols from library.\n\nThis trait is intended to be used together with the `derive` macro.\nTo use it you need to define a structure, create several fields that\nimplement the `FromRawResult` trait and then simply use the automatically\ngenerated `load(&Library)` function to load all symbols from previously opened library.\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nextern crate libc;\nuse dlopen::symbor::{Library, Symbol, SymBorApi, PtrOrNull, RefMut, PtrOrNullMut};\nuse libc::{c_double, c_char};\n\n#[derive(SymBorApi)]\nstruct Example<'a> {\n    pub simple_fun: Symbol<'a, unsafe extern \"C\" fn()>,\n    pub complex_fun: Symbol<'a, unsafe extern \"C\" fn(c_double)->c_double>,\n    pub optional_fun: Option<Symbol<'a, unsafe extern \"C\" fn()>>,\n    pub nullable_ptr: PtrOrNullMut<'a, c_char>,\n    pub mut_ref_i32: Symbol<'a, &'a mut i32>,\n    #[dlopen_name=\"mut_ref_i32\"]\n    pub the_same_mut_ref_i32: RefMut<'a, i32>,\n    pub not_nullable_ptr: Symbol<'a, * mut c_double>\n}\n\nfn main(){\n    let lib = Library::open(\"example.dll\").expect(\"Could not open library\");\n    let mut api = unsafe{Example::load(&lib)}.expect(\"Could not load symbols\");\n    unsafe{(api.simple_fun)()};\n    let _ = unsafe{(api.complex_fun)(1.0)};\n    match api.optional_fun {\n        Some(fun) => unsafe {fun()},\n        None => println!(\"Optional function could not be loaded\"),\n    };\n    if api.nullable_ptr.is_null(){\n        println!(\"Library has a null symbol\");\n    }\n    //while Symbol is good for everything, RefMut requires one less dereference to use\n    **api.mut_ref_i32 =34;\n    *api.the_same_mut_ref_i32 =35;\n    unsafe{**api.not_nullable_ptr = 55.0};\n    unsafe{**api.nullable_ptr = 0};\n}\n```\n\nPlease notice several supported features:\n\n* By default `SymBorApi` uses the field name to obtain a symbol from the library.\n    You can override the symbol name using the `dlopen_name` attribute.\n* All kind of objects from the `symbor` module implement the Deref or DerefMut trait.\n    This means that you can use them as if you would use primitive types that they wrap.\n* You can obtain optional symbols. This is very useful when you are dealing with\n    different versions of libraries and the new versions support more functions.\n    If it is not possible to obtain the given symbol, the option is set to `None',\n    otherwise it contains the obtained symbol.\n* Both `Symbol` and `Ref` or `RefMut` can be used to obtain references to statically\n    allocated objects. But `Ref` and `RefMut` are just easier to use - they require\n    less dereferences to access the final value.\n    Actually they behave like a normal reference does, it just that they implement the\n    `FromRawResult` interface that allows them to be used inside structures that implement\n    the `SymBorApi` trait.\n\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/api.rs","byte_start":34253,"byte_end":37082,"line_start":3,"line_end":68,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/api.rs","byte_start":37146,"byte_end":37150,"line_start":73,"line_end":73,"column_start":15,"column_end":19},"name":"load","qualname":"::symbor::api::SymBorApi::load","value":"unsafe fn load(&'a Library) -> Result<Self, Error>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":484},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":38386,"byte_end":38395,"line_start":40,"line_end":40,"column_start":12,"column_end":21},"name":"Container","qualname":"::symbor::container::Container","value":"Container {  }","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487}],"decl_id":null,"docs":"Container for both dynamic link library handle and its API.","sig":null,"attributes":[{"value":"*\nContainer for both dynamic link library handle and its API.\n\nThis structure solves an important issue: object oriented programming where the given\nstructure has two objects and one of the objects has a reference to the second one.\nNormally you can't put `Library` and a structure that implements `SymBorApi` into one structure.\nThis structure allows you to do it.\n\n#Example\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::symbor::{Library, Symbol, Ref, PtrOrNull, SymBorApi, Container};\n\n #[derive(SymBorApi)]\n struct ExampleApi<'a> {\n    pub fun: Symbol<'a, unsafe extern \"C\" fn(i32) -> i32>,\n    pub glob_i32: Ref<'a, i32>,\n    pub maybe_c_str: PtrOrNull<'a, u8>,\n }\n\nfn main(){\n    let cont: Container<ExampleApi> = unsafe{Container::load(\"libexample.so\")}\n        .expect(\"Could not load library or symbols\");\n    println!(\"fun(4)={}\", unsafe{(cont.fun)(4)});\n    println!(\"glob_i32={}\", *cont.glob_i32);\n    println!(\"The pointer is null={}\", cont.maybe_c_str.is_null());\n}\n```\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":37348,"byte_end":38374,"line_start":8,"line_end":39,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":38612,"byte_end":38616,"line_start":53,"line_end":53,"column_start":19,"column_end":23},"name":"load","qualname":"<Container<T>>::load","value":"unsafe fn load<S>(S) -> Result<Self, Error> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"Open dynamic link library and load symbols.\n","sig":null,"attributes":[{"value":"/Open dynamic link library and load symbols.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":38547,"byte_end":38593,"line_start":52,"line_end":52,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39225,"byte_end":39234,"line_start":69,"line_end":69,"column_start":19,"column_end":28},"name":"load_self","qualname":"<Container<T>>::load_self","value":"unsafe fn load_self() -> Result<Self, Error>","parent":null,"children":[],"decl_id":null,"docs":"Load all symbols from the program itself.","sig":null,"attributes":[{"value":"/Load all symbols from the program itself.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39058,"byte_end":39102,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39107,"byte_end":39110,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ This allows a shared library to load symbols of the program it was","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39115,"byte_end":39185,"line_start":67,"line_end":67,"column_start":5,"column_end":75}},{"value":"/ loaded into.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39190,"byte_end":39206,"line_start":68,"line_end":68,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39721,"byte_end":39726,"line_start":85,"line_end":85,"column_start":8,"column_end":13},"name":"deref","qualname":"<Container<T> as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39845,"byte_end":39854,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<Container<T> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":527},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::utils","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":532},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":"Utilities for working with dynamic link libraries.\n","sig":null,"attributes":[{"value":"*\nUtilities for working with dynamic link libraries.\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":39909,"byte_end":39966,"line_start":1,"line_end":3,"column_start":1,"column_end":3}}]},{"kind":"Const","id":{"krate":0,"index":535},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40307,"byte_end":40327,"line_start":20,"line_end":20,"column_start":11,"column_end":31},"name":"PLATFORM_FILE_PREFIX","qualname":"::utils::PLATFORM_FILE_PREFIX","value":"&str","parent":null,"children":[],"decl_id":null,"docs":"This is a platform-specific file prefix.","sig":null,"attributes":[{"value":"/This is a platform-specific file prefix.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40112,"byte_end":40155,"line_start":15,"line_end":15,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40156,"byte_end":40159,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ In Unix-based systems the convention is to start the file name with \"lib\".","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40160,"byte_end":40238,"line_start":17,"line_end":17,"column_start":1,"column_end":79}},{"value":"/ Windows does not have such a convention.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40239,"byte_end":40283,"line_start":18,"line_end":18,"column_start":1,"column_end":45}},{"value":"cfg(unix)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40284,"byte_end":40296,"line_start":19,"line_end":19,"column_start":1,"column_end":13}}]},{"kind":"Const","id":{"krate":0,"index":536},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40702,"byte_end":40725,"line_start":30,"line_end":30,"column_start":11,"column_end":34},"name":"PLATFORM_FILE_EXTENSION","qualname":"::utils::PLATFORM_FILE_EXTENSION","value":"&str","parent":null,"children":[],"decl_id":null,"docs":"Dynamic link library file extension specific to the platform.\n","sig":null,"attributes":[{"value":"/Dynamic link library file extension specific to the platform.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40575,"byte_end":40639,"line_start":28,"line_end":28,"column_start":1,"column_end":65}},{"value":"cfg(any(target_os = \"macos\", target_os = \"ios\"))","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":40640,"byte_end":40691,"line_start":29,"line_end":29,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":41215,"byte_end":41233,"line_start":41,"line_end":41,"column_start":8,"column_end":26},"name":"platform_file_name","qualname":"::utils::platform_file_name","value":"fn platform_file_name<S>(S) -> OsString where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"Crates a platform-specific file name from provided core file name.","sig":null,"attributes":[{"value":"/Crates a platform-specific file name from provided core file name.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":41055,"byte_end":41124,"line_start":38,"line_end":38,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":41125,"byte_end":41128,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ For example on Ubuntu it converts \"example\" argument into \"libexample.so\".","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/utils.rs","byte_start":41129,"byte_end":41207,"line_start":40,"line_end":40,"column_start":1,"column_end":79}}]},{"kind":"Mod","id":{"krate":0,"index":539},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapper","qualname":"::wrapper","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":549},{"krate":0,"index":554},{"krate":0,"index":590},{"krate":0,"index":633},{"krate":0,"index":646},{"krate":0,"index":649},{"krate":0,"index":652},{"krate":0,"index":655}],"decl_id":null,"docs":"High-level and safe API for opening and getting symbols from dynamic link libraries.\nIt is based on wrapping private symbols with public functions to prevent direct access\nand supports automatic loading of symbols into structures.","sig":null,"attributes":[{"value":"*\nHigh-level and safe API for opening and getting symbols from dynamic link libraries.\nIt is based on wrapping private symbols with public functions to prevent direct access\nand supports automatic loading of symbols into structures.\n\nThis API solves the problem with dangling symbols by wrapping raw symbols with public functions.\nUser of API does not have direct access to raw symbols and therefore symbols cannot be copied.\nSymbols and library handle are kept in one `Container` structure and therefore both the the library\nand symbols get released at the same time.\n\n#Example\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::wrapper::{Container, WrapperApi};\n\n#[derive(WrapperApi)]\nstruct Example<'a> {\n    do_something: extern \"C\" fn(),\n    add_one: unsafe extern \"C\" fn (arg: i32) -> i32,\n    global_count: &'a mut u32,\n}\n\nfn main () {\nlet mut container: Container<Example> = unsafe { Container::load(\"libexample.dylib\")}.unwrap();\ncontainer.do_something();\nlet _result = unsafe { container.add_one(5) };\n*container.global_count_mut() += 1;\n\n//symbols are released together with library handle\n//this prevents dangling symbols\ndrop(container);\n}\n```\n\nUnfortunately in Rust it is not possible to create an API for dynamic link libraries that would\nbe 100% safe. This API aims to be 99% safe by providing zero cost functional wrappers around\nraw symbols. However it is possible to make a mistake if you create API as a standalone object\n(not in container):\n\n#Example of a mistake - dangling symbol\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::wrapper::{Container, WrapperApi};\nuse dlopen::raw::Library;\n\n#[derive(WrapperApi)]\nstruct Example<'a> {\n    do_something: extern \"C\" fn(),\n    add_one: unsafe extern \"C\" fn (arg: i32) -> i32,\n    global_count: &'a mut u32,\n}\n\nfn main () {\nlet lib = Library::open(\"libexample.dylib\").unwrap();\nlet mut api = unsafe{Example::load(&lib)};\ndrop(lib);\n\n//api has now dangling symbols\n\n}\n```\n\nTo prevent this mistake don't use structures implementing `WrapperApi` directly, but rather use\n`Container` as in the first example.\n\n**Note:** This API has a broad support for optional symbols (this solves the issue with multiple\nversions of one dynamic link library that have different sets of symbols). Please refer to the\ndocumentation of\n[`OptionalContainer`](./struct.OptionalContainer.html)\nand\n[`WrapperMultiApi`](./trait.WrapperMultiApi.html).\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/mod.rs","byte_start":41703,"byte_end":44169,"line_start":1,"line_end":78,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":547},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/api.rs","byte_start":47617,"byte_end":47627,"line_start":82,"line_end":82,"column_start":11,"column_end":21},"name":"WrapperApi","qualname":"::wrapper::api::WrapperApi","value":"WrapperApi","parent":null,"children":[{"krate":0,"index":548}],"decl_id":null,"docs":"Trait for defining library API.","sig":null,"attributes":[{"value":"*\nTrait for defining library API.\n\nThis trait is intended to be used with `#[derive(WrapperApi)]` macro defined in the\n`dlopen_derive` crate. It forces several restrictions on types that implement it:\n\n* Only structures can implement this trait.\n* All fields need to be private.\n* Only functions, references and pointers are allowed.\n* You can't define a type using `type Fun =fn();` and use it in the structure. This is a limitation\n    of the Rust reflection mechanism. Only raw functions, references and pointers are allowed.\n* All arguments of functions need to be named.\n\n\nThe `derive` macro not only generates implementation of `load()` function, but it also generates\nsafe wrappers around the loaded symbols. These wrappers are named exactly like the field that\nthey wrap. Wrappers of functions have the same arguments like original functions and wrappers of\nreferences are just simple accessors in the form of `<field_name>(&self) -> &FieldType` or\n`<field_name>_mut(&mut self) -> &mut FieldType`.\nWrappers are not generated only for:\n\n* Pointers - there is no safe way of preventing dangling symbols if a user has a direct access to\n    pointers. The recommended approach here is to either use references instead of pointers or\n    to manually create safe wrappers. For example C `const char *` can be manually converted into\n    `& std::ffi::CStr`.\n* Variadic functions. Rust doesn't have any mechanism that allows creating safe wrappers around\n    them. You need to handle them manually.\n\n#Example\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nextern crate libc;\nuse dlopen::wrapper::{WrapperApi, Container};\nuse libc::{c_char};\nuse std::ffi::CStr;\n\n#[derive(WrapperApi)]\nstruct Example<'a> {\n    #[dlopen_name=\"function\"]\n    do_something: extern \"C\" fn(),\n    add_one: unsafe extern \"C\" fn (arg: i32) -> i32,\n    global_count: &'a mut u32,\n    c_string: * const c_char,\n    #[dlopen_allow_null]\n    maybe_null_ptr: * const (),\n}\n\n//wrapper for c_string won't be generated, implement it here\nimpl<'a> Example<'a> {\n    pub fn c_string(&self) -> &CStr {\n        unsafe {CStr::from_ptr(self.c_string)}\n    }\n}\n\nfn main () {\n    let mut cont: Container<Example> = unsafe { Container::load(\"libexample.dylib\")}.unwrap();\n    cont.do_something();\n    let _result = unsafe { cont.add_one(5) };\n    *cont.global_count_mut() += 1;\n    println!(\"C string: {}\", cont.c_string().to_str().unwrap())\n}\n```\n\n**Note**: `WrapperApi` should only be used together with `Container` structure, never to create\na standalone object. API and library handle need to be kept together to prevent dangling symbols.\n\n**Note:** By default obtained symbol name is the field name. You can change this by\nassigning the \"dlopen_name\" attribute to the given field.\n\n**Note:** By default `Error::NullSymbol` is returned if the loaded symbol name has a null value.\nWhile null is a valid value of a exported symbol, it is usually not expected by users of libraries.\nIf in your scenario null is an acceptable value, you should assign\n\"dlopen_allow_null\" attribute to the given field. Of course this makes sense only if the field\nis of pointer type.\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/api.rs","byte_start":44452,"byte_end":47606,"line_start":4,"line_end":81,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/api.rs","byte_start":47710,"byte_end":47714,"line_start":87,"line_end":87,"column_start":15,"column_end":19},"name":"load","qualname":"::wrapper::api::WrapperApi::load","value":"unsafe fn load(&Library) -> Result<Self, Error>","parent":{"krate":0,"index":547},"children":[],"decl_id":null,"docs":"Load symbols from provided library.\n","sig":null,"attributes":[{"value":"/Load symbols from provided library.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/api.rs","byte_start":47657,"byte_end":47695,"line_start":86,"line_end":86,"column_start":5,"column_end":43}}]},{"kind":"Trait","id":{"krate":0,"index":553},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/multi_api.rs","byte_start":49837,"byte_end":49852,"line_start":72,"line_end":72,"column_start":11,"column_end":26},"name":"WrapperMultiApi","qualname":"::wrapper::multi_api::WrapperMultiApi","value":"WrapperMultiApi: WrapperApi","parent":null,"children":[],"decl_id":null,"docs":"Allows creation of complex, optional APIs.","sig":null,"attributes":[{"value":"*\nAllows creation of complex, optional APIs.\n\nReal life dynamic link libraries often come in multiple versions. Sometimes additional functions\nare added for the specific operating system, sometimes the library gets extended and new versions\nexport more symbols. Often the API can have multiple versions. This trait helps creating\nlibrary APIs with multiple optional parts.\n\n`WrapperMultiApi` is intended to be used together with the derive macro. You should create a new\nstructure where all fields implement the `WrapperApi` trait (this includes `Option<T>` where\n`T` implements `WrapperApi`). The derive macro will generate required implementation.\n\n**Note**: `WrapperMultiApi` should only be used together with `Container` structure, never to create\na standalone object. API and library handle need to be kept together to prevent dangling symbols.\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::wrapper::{Container, WrapperApi, WrapperMultiApi};\n\n//Define 3 APIs:\n\n#[derive(WrapperApi)]\nstruct Obligatory{\n    some_fun: unsafe extern \"C\" fn()\n}\n\n#[derive(WrapperApi)]\nstruct Optional1<'a>{\n    static_val: &'a i32\n}\n\n#[derive(WrapperApi)]\nstruct Optional2{\n   another_fun: unsafe extern \"C\" fn()\n}\n\n//Now define a multi wrapper that wraps sub APIs into one bigger API.\n//This example assumes that the first API is obligatory and the other two are optional.\n\n#[derive(WrapperMultiApi)]\nstruct Api<'a>{\n    pub obligatory: Obligatory,\n    pub optional1: Option<Optional1<'a>>,\n    pub optional2: Option<Optional2>\n}\n\nfn main(){\n    let mut container: Container<Api> = unsafe {\n        Container::load(\"libexample.so\")\n    }.expect(\"Could not open library or load symbols\");\n\n    //use obligatory API:\n    unsafe{container.obligatory.some_fun()};\n\n    //use first optional API:\n    if let Some(ref opt) = container.optional1{\n        let _val = *opt.static_val();\n    }\n\n    //use second optional API:\n    if let Some(ref opt) = container.optional2{\n        unsafe {opt.another_fun()};\n    }\n}\n```\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/multi_api.rs","byte_start":47786,"byte_end":49825,"line_start":3,"line_end":70,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":574},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51198,"byte_end":51207,"line_start":49,"line_end":49,"column_start":12,"column_end":21},"name":"Container","qualname":"::wrapper::container::Container","value":"Container {  }","parent":null,"children":[{"krate":0,"index":576},{"krate":0,"index":577}],"decl_id":null,"docs":"Container for both a dynamic load library handle and its API.","sig":null,"attributes":[{"value":"*\nContainer for both a dynamic load library handle and its API.\n\nKeeping both library and its symbols together makes it safe to use it because symbols are released\ntogether with the library. `Container` also doesn't have any external lifetimes - this makes it\neasy to use `Container` inside structures.\n\n#Example\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nextern crate libc;\nuse dlopen::wrapper::{Container, WrapperApi};\nuse libc::{c_char};\nuse std::ffi::CStr;\n\n#[derive(WrapperApi)]\nstruct Example<'a> {\n    do_something: extern \"C\" fn(),\n    add_one: unsafe extern \"C\" fn (arg: i32) -> i32,\n    global_count: &'a mut u32,\n    c_string: * const c_char\n}\n\n//wrapper for c_string won't be generated, implement it here\nimpl<'a> Example<'a> {\n    pub fn c_string(&self) -> &CStr {\n        unsafe {CStr::from_ptr(self.c_string)}\n    }\n}\n\nfn main () {\n    let mut container: Container<Example> = unsafe { Container::load(\"libexample.dylib\")}.unwrap();\n    container.do_something();\n    let _result = unsafe { container.add_one(5) };\n    *container.global_count_mut() += 1;\n    println!(\"C string: {}\", container.c_string().to_str().unwrap())\n}\n```\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":50009,"byte_end":51186,"line_start":7,"line_end":48,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51522,"byte_end":51526,"line_start":64,"line_end":64,"column_start":19,"column_end":23},"name":"load","qualname":"<Container<T>>::load","value":"unsafe fn load<S>(S) -> Result<Container<T>, Error> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"Open the library using provided file name or path and load all symbols.\n","sig":null,"attributes":[{"value":"/Open the library using provided file name or path and load all symbols.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51429,"byte_end":51503,"line_start":63,"line_end":63,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51902,"byte_end":51911,"line_start":76,"line_end":76,"column_start":19,"column_end":28},"name":"load_self","qualname":"<Container<T>>::load_self","value":"unsafe fn load_self() -> Result<Container<T>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Load all symbols from the program itself.","sig":null,"attributes":[{"value":"/Load all symbols from the program itself.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51735,"byte_end":51779,"line_start":72,"line_end":72,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51784,"byte_end":51787,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This allows a shared library to load symbols of the program it was","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51792,"byte_end":51862,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/ loaded into.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51867,"byte_end":51883,"line_start":75,"line_end":75,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52157,"byte_end":52162,"line_start":88,"line_end":88,"column_start":8,"column_end":13},"name":"deref","qualname":"<Container<T> as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &T","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52273,"byte_end":52282,"line_start":97,"line_end":97,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<Container<T> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut T","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":610},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":53965,"byte_end":53982,"line_start":55,"line_end":55,"column_start":12,"column_end":29},"name":"OptionalContainer","qualname":"::wrapper::optional::OptionalContainer","value":"OptionalContainer {  }","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615}],"decl_id":null,"docs":"Container for a library handle and both obligatory and optional APIs inside one structure.","sig":null,"attributes":[{"value":"*\nContainer for a library handle and both obligatory and optional APIs inside one structure.\n\nA common problem with dynamic link libraries is that they often have different versions and some\nof those versions have broader API than others. This structure allows you to use two APIs at the\nsame time - one obligatory and one optional. If symbols of the optional API are found in the\nlibrary, the optional API gets loaded. Otherwise the `optional()` method will return `None`.\n\n#Example\n\n```no_run\n#[macro_use]\nextern crate dlopen_derive;\nextern crate dlopen;\nuse dlopen::wrapper::{OptionalContainer, WrapperApi};\n\n#[derive(WrapperApi)]\nstruct Obligatory<'a> {\n    do_something: extern \"C\" fn(),\n    global_count: &'a mut u32,\n}\n\n#[derive(WrapperApi)]\nstruct Optional{\n    add_one: unsafe extern \"C\" fn (arg: i32) -> i32,\n    c_string: * const u8\n}\n\nfn main () {\n    let mut container: OptionalContainer<Obligatory, Optional> = unsafe {\n        OptionalContainer::load(\"libexample.dylib\")\n    }.unwrap();\n    container.do_something();\n    *container.global_count_mut() += 1;\n\n    match container.optional(){\n        &Some(ref opt) => {\n            let _result = unsafe { opt.add_one(5) };\n            println!(\"First byte of C string is {}\", unsafe{*opt.c_string});\n        },\n        &None => println!(\"The optional API was not loaded!\")\n    }\n}\n```\n\n**Note:** For more complex cases (multiple versions of API) you can use\n[`WrapperMultiApi`](./trait.WrapperMultiApi.html).\n*/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":52477,"byte_end":53953,"line_start":7,"line_end":54,"column_start":1,"column_end":3}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54479,"byte_end":54483,"line_start":74,"line_end":74,"column_start":19,"column_end":23},"name":"load","qualname":"<OptionalContainer<Api, Optional>>::load","value":"unsafe fn load<S>(S) -> Result<OptionalContainer<Api, Optional>, Error> where\nS: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":"Opens the library using provided file name or path and loads all symbols (including optional\nif it is possible).\n","sig":null,"attributes":[{"value":"/Opens the library using provided file name or path and loads all symbols (including optional","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54338,"byte_end":54433,"line_start":72,"line_end":72,"column_start":5,"column_end":100}},{"value":"/if it is possible).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54438,"byte_end":54460,"line_start":73,"line_end":73,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":621},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54978,"byte_end":54987,"line_start":89,"line_end":89,"column_start":19,"column_end":28},"name":"load_self","qualname":"<OptionalContainer<Api, Optional>>::load_self","value":"unsafe fn load_self() -> Result<OptionalContainer<Api, Optional>, Error>","parent":null,"children":[],"decl_id":null,"docs":"Load all symbols (including optional if it is possible) from the\nprogram itself.","sig":null,"attributes":[{"value":"/Load all symbols (including optional if it is possible) from the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54765,"byte_end":54832,"line_start":84,"line_end":84,"column_start":5,"column_end":72}},{"value":"/program itself.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54837,"byte_end":54855,"line_start":85,"line_end":85,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54860,"byte_end":54863,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ This allows a shared library to load symbols of the program it was","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54868,"byte_end":54938,"line_start":87,"line_end":87,"column_start":5,"column_end":75}},{"value":"/ loaded into.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54943,"byte_end":54959,"line_start":88,"line_end":88,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55288,"byte_end":55296,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"optional","qualname":"<OptionalContainer<Api, Optional>>::optional","value":"fn optional(&Self) -> &Option<Optional>","parent":null,"children":[],"decl_id":null,"docs":"Gives access to the optional API - constant version.\n","sig":null,"attributes":[{"value":"/Gives access to the optional API - constant version.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55221,"byte_end":55276,"line_start":96,"line_end":96,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":623},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55436,"byte_end":55448,"line_start":102,"line_end":102,"column_start":12,"column_end":24},"name":"optional_mut","qualname":"<OptionalContainer<Api, Optional>>::optional_mut","value":"fn optional_mut(&mut Self) -> &Option<Optional>","parent":null,"children":[],"decl_id":null,"docs":"Gives access to the optional API - constant version.\n","sig":null,"attributes":[{"value":"/Gives access to the optional API - constant version.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55369,"byte_end":55424,"line_start":101,"line_end":101,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55675,"byte_end":55680,"line_start":113,"line_end":113,"column_start":8,"column_end":13},"name":"deref","qualname":"<OptionalContainer<Api, Optional> as lazy_static::__Deref>::deref","value":"fn deref(&Self) -> &Api","parent":{"krate":2,"index":3398},"children":[],"decl_id":{"krate":2,"index":3400},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55853,"byte_end":55862,"line_start":123,"line_end":123,"column_start":8,"column_end":17},"name":"deref_mut","qualname":"<OptionalContainer<Api, Optional> as std::ops::DerefMut>::deref_mut","value":"fn deref_mut(&mut Self) -> &mut Api","parent":{"krate":2,"index":3411},"children":[],"decl_id":{"krate":2,"index":3412},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/option.rs","byte_start":56079,"byte_end":56083,"line_start":9,"line_end":9,"column_start":15,"column_end":19},"name":"load","qualname":"<Option<T> as wrapper::api::WrapperApi>::load","value":"unsafe fn load(&Library) -> Result<Self, Error>","parent":{"krate":0,"index":547},"children":[],"decl_id":{"krate":0,"index":548},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":792},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56648,"byte_end":56661,"line_start":12,"line_end":12,"column_start":5,"column_end":18},"name":"NullCharacter","qualname":"::err::Error::NullCharacter","value":"Error::NullCharacter(NulError)","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"Provided string could not be coverted into `std::ffi::CString` because it contained null\n character.\n","sig":null,"attributes":[{"value":"/Provided string could not be coverted into `std::ffi::CString` because it contained null","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56533,"byte_end":56624,"line_start":10,"line_end":10,"column_start":5,"column_end":96}},{"value":"/ character.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56629,"byte_end":56643,"line_start":11,"line_end":11,"column_start":5,"column_end":19}}]},{"kind":"Field","id":{"krate":0,"index":794},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56662,"byte_end":56670,"line_start":12,"line_end":12,"column_start":19,"column_end":27},"name":"0","qualname":"::err::Error::NullCharacter::0","value":"alloc::ffi::c_str::NulError","parent":{"krate":0,"index":792},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56717,"byte_end":56736,"line_start":14,"line_end":14,"column_start":5,"column_end":24},"name":"OpeningLibraryError","qualname":"::err::Error::OpeningLibraryError","value":"Error::OpeningLibraryError(IoError)","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"The library could not be opened.\n","sig":null,"attributes":[{"value":"/The library could not be opened.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56677,"byte_end":56712,"line_start":13,"line_end":13,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":797},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56737,"byte_end":56744,"line_start":14,"line_end":14,"column_start":25,"column_end":32},"name":"0","qualname":"::err::Error::OpeningLibraryError::0","value":"std::io::Error","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":798},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56792,"byte_end":56810,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"name":"SymbolGettingError","qualname":"::err::Error::SymbolGettingError","value":"Error::SymbolGettingError(IoError)","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"The symbol could not be obtained.\n","sig":null,"attributes":[{"value":"/The symbol could not be obtained.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56751,"byte_end":56787,"line_start":15,"line_end":15,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":800},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56811,"byte_end":56818,"line_start":16,"line_end":16,"column_start":24,"column_end":31},"name":"0","qualname":"::err::Error::SymbolGettingError::0","value":"std::io::Error","parent":{"krate":0,"index":798},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56862,"byte_end":56872,"line_start":18,"line_end":18,"column_start":5,"column_end":15},"name":"NullSymbol","qualname":"::err::Error::NullSymbol","value":"Error::NullSymbol","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"Value of the symbol was null.\n","sig":null,"attributes":[{"value":"/Value of the symbol was null.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56825,"byte_end":56857,"line_start":17,"line_end":17,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":803},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56940,"byte_end":56958,"line_start":20,"line_end":20,"column_start":5,"column_end":23},"name":"AddrNotMatchingDll","qualname":"::err::Error::AddrNotMatchingDll","value":"Error::AddrNotMatchingDll(IoError)","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"Address could not be matched to a dynamic link library\n","sig":null,"attributes":[{"value":"/Address could not be matched to a dynamic link library","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56878,"byte_end":56935,"line_start":19,"line_end":19,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":805},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56959,"byte_end":56966,"line_start":20,"line_end":20,"column_start":24,"column_end":31},"name":"0","qualname":"::err::Error::AddrNotMatchingDll::0","value":"std::io::Error","parent":{"krate":0,"index":803},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":791},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56521,"byte_end":56526,"line_start":9,"line_end":9,"column_start":10,"column_end":15},"name":"Error","qualname":"::err::Error","value":"enum Error {\n    NullCharacter(NulError),\n    OpeningLibraryError(IoError),\n    SymbolGettingError(IoError),\n    NullSymbol,\n    AddrNotMatchingDll(IoError),\n}","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":803}],"decl_id":null,"docs":"This is a library-specific error that is returned by all calls to all APIs.\n","sig":null,"attributes":[{"value":"/This is a library-specific error that is returned by all calls to all APIs.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56416,"byte_end":56494,"line_start":7,"line_end":7,"column_start":1,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":57006,"byte_end":57017,"line_start":24,"line_end":24,"column_start":8,"column_end":19},"name":"description","qualname":"<Error as std::error::Error>::description","value":"fn description(&Self) -> &str","parent":{"krate":1,"index":2569},"children":[],"decl_id":{"krate":1,"index":2573},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":57456,"byte_end":57461,"line_start":35,"line_end":35,"column_start":8,"column_end":13},"name":"cause","qualname":"<Error as std::error::Error>::cause","value":"fn cause(&Self) -> Option<&ErrorTrait>","parent":{"krate":1,"index":2569},"children":[],"decl_id":{"krate":1,"index":2574},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":57783,"byte_end":57786,"line_start":47,"line_end":47,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Error as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut Formatter) -> FmtResult","parent":{"krate":2,"index":10117},"children":[],"decl_id":{"krate":2,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":58303,"byte_end":58307,"line_start":65,"line_end":65,"column_start":8,"column_end":12},"name":"from","qualname":"<Error as std::convert::From>::from","value":"fn from(NulError) -> Error","parent":{"krate":2,"index":3085},"children":[],"decl_id":{"krate":2,"index":3087},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":7918,"byte_end":7925,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11363,"byte_end":11370,"line_start":136,"line_end":136,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11474,"byte_end":11481,"line_start":142,"line_end":142,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11506,"byte_end":11513,"line_start":143,"line_end":143,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12448,"byte_end":12467,"line_start":171,"line_end":171,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":13623,"byte_end":13642,"line_start":207,"line_end":207,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21387,"byte_end":21396,"line_start":15,"line_end":15,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21596,"byte_end":21605,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21929,"byte_end":21938,"line_start":36,"line_end":36,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":22080,"byte_end":22089,"line_start":43,"line_end":43,"column_start":37,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":22138,"byte_end":22147,"line_start":44,"line_end":44,"column_start":37,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22550,"byte_end":22562,"line_start":15,"line_end":15,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22766,"byte_end":22778,"line_start":24,"line_end":24,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":225}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23103,"byte_end":23115,"line_start":36,"line_end":36,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":229},{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23253,"byte_end":23265,"line_start":43,"line_end":43,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23314,"byte_end":23326,"line_start":44,"line_end":44,"column_start":37,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23935,"byte_end":23941,"line_start":18,"line_end":18,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24125,"byte_end":24131,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24619,"byte_end":24625,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24751,"byte_end":24757,"line_start":51,"line_end":51,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24911,"byte_end":24917,"line_start":58,"line_end":58,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24966,"byte_end":24972,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27341,"byte_end":27348,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":336},{"krate":0,"index":338},{"krate":0,"index":340},{"krate":0,"index":342},{"krate":0,"index":344},{"krate":0,"index":346},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":31204,"byte_end":31211,"line_start":149,"line_end":149,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":31236,"byte_end":31243,"line_start":150,"line_end":150,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/option.rs","byte_start":31358,"byte_end":31364,"line_start":4,"line_end":4,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32043,"byte_end":32046,"line_start":15,"line_end":15,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32210,"byte_end":32213,"line_start":23,"line_end":23,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32616,"byte_end":32619,"line_start":38,"line_end":38,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32748,"byte_end":32751,"line_start":45,"line_end":45,"column_start":37,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32800,"byte_end":32803,"line_start":46,"line_end":46,"column_start":37,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33252,"byte_end":33258,"line_start":15,"line_end":15,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33432,"byte_end":33438,"line_start":23,"line_end":23,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":435}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33844,"byte_end":33850,"line_start":38,"line_end":38,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33970,"byte_end":33976,"line_start":45,"line_end":45,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":34119,"byte_end":34125,"line_start":52,"line_end":52,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":34174,"byte_end":34180,"line_start":53,"line_end":53,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":38495,"byte_end":38504,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":490},{"krate":0,"index":492}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39645,"byte_end":39654,"line_start":80,"line_end":80,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39790,"byte_end":39799,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51385,"byte_end":51394,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52089,"byte_end":52098,"line_start":83,"line_end":83,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52226,"byte_end":52235,"line_start":93,"line_end":93,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54246,"byte_end":54263,"line_start":67,"line_end":67,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":619},{"krate":0,"index":621},{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55557,"byte_end":55574,"line_start":107,"line_end":107,"column_start":31,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55758,"byte_end":55775,"line_start":118,"line_end":118,"column_start":34,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/option.rs","byte_start":56028,"byte_end":56034,"line_start":5,"line_end":5,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56991,"byte_end":56996,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":57768,"byte_end":57773,"line_start":46,"line_end":46,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":58288,"byte_end":58293,"line_start":64,"line_end":64,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":5462,"byte_end":5465,"line_start":130,"line_end":130,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":5475,"byte_end":5481,"line_start":131,"line_end":131,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":164}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":5491,"byte_end":5496,"line_start":132,"line_end":132,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":527}},{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/lib.rs","byte_start":5506,"byte_end":5513,"line_start":133,"line_end":133,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":539}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":7918,"byte_end":7925,"line_start":33,"line_end":33,"column_start":6,"column_end":13},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":694},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11363,"byte_end":11370,"line_start":136,"line_end":136,"column_start":15,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":694},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11474,"byte_end":11481,"line_start":142,"line_end":142,"column_start":22,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":694},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":11506,"byte_end":11513,"line_start":143,"line_end":143,"column_start":22,"column_end":29},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":694},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":12448,"byte_end":12467,"line_start":171,"line_end":171,"column_start":6,"column_end":25},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":64},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/raw/common.rs","byte_start":13623,"byte_end":13642,"line_start":207,"line_end":207,"column_start":15,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":64},"to":{"krate":2,"index":3422}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21387,"byte_end":21396,"line_start":15,"line_end":15,"column_start":15,"column_end":24},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21596,"byte_end":21605,"line_start":24,"line_end":24,"column_start":33,"column_end":42},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":720},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":21929,"byte_end":21938,"line_start":36,"line_end":36,"column_start":25,"column_end":34},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":22080,"byte_end":22089,"line_start":43,"line_end":43,"column_start":37,"column_end":46},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null.rs","byte_start":22138,"byte_end":22147,"line_start":44,"line_end":44,"column_start":37,"column_end":46},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22550,"byte_end":22562,"line_start":15,"line_end":15,"column_start":15,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":22766,"byte_end":22778,"line_start":24,"line_end":24,"column_start":33,"column_end":45},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":736},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23103,"byte_end":23115,"line_start":36,"line_end":36,"column_start":25,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":736},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23253,"byte_end":23265,"line_start":43,"line_end":43,"column_start":37,"column_end":49},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":736},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/ptr_or_null_mut.rs","byte_start":23314,"byte_end":23326,"line_start":44,"line_end":44,"column_start":37,"column_end":49},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":736},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":23935,"byte_end":23941,"line_start":18,"line_end":18,"column_start":15,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":752},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24125,"byte_end":24131,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":752},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24619,"byte_end":24625,"line_start":44,"line_end":44,"column_start":25,"column_end":31},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24751,"byte_end":24757,"line_start":51,"line_end":51,"column_start":28,"column_end":34},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24911,"byte_end":24917,"line_start":58,"line_end":58,"column_start":37,"column_end":43},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/symbol.rs","byte_start":24966,"byte_end":24972,"line_start":59,"line_end":59,"column_start":37,"column_end":43},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":752},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":27341,"byte_end":27348,"line_start":47,"line_end":47,"column_start":6,"column_end":13},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":31204,"byte_end":31211,"line_start":149,"line_end":149,"column_start":22,"column_end":29},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":328},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/library.rs","byte_start":31236,"byte_end":31243,"line_start":150,"line_end":150,"column_start":22,"column_end":29},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":328},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/option.rs","byte_start":31358,"byte_end":31364,"line_start":4,"line_end":4,"column_start":31,"column_end":37},"kind":{"Impl":{"id":25}},"from":{"krate":2,"index":47183},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32043,"byte_end":32046,"line_start":15,"line_end":15,"column_start":15,"column_end":18},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":768},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32210,"byte_end":32213,"line_start":23,"line_end":23,"column_start":33,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":768},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32616,"byte_end":32619,"line_start":38,"line_end":38,"column_start":25,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":768},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32748,"byte_end":32751,"line_start":45,"line_end":45,"column_start":37,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":768},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference.rs","byte_start":32800,"byte_end":32803,"line_start":46,"line_end":46,"column_start":37,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":768},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33252,"byte_end":33258,"line_start":15,"line_end":15,"column_start":15,"column_end":21},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33432,"byte_end":33438,"line_start":23,"line_end":23,"column_start":33,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":783},"to":{"krate":0,"index":293}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33844,"byte_end":33850,"line_start":38,"line_end":38,"column_start":25,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":33970,"byte_end":33976,"line_start":45,"line_end":45,"column_start":28,"column_end":34},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":34119,"byte_end":34125,"line_start":52,"line_end":52,"column_start":37,"column_end":43},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":3179}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/reference_mut.rs","byte_start":34174,"byte_end":34180,"line_start":53,"line_end":53,"column_start":37,"column_end":43},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":783},"to":{"krate":2,"index":3191}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":38495,"byte_end":38504,"line_start":48,"line_end":48,"column_start":9,"column_end":18},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39645,"byte_end":39654,"line_start":80,"line_end":80,"column_start":19,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":484},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/symbor/container.rs","byte_start":39790,"byte_end":39799,"line_start":90,"line_end":90,"column_start":22,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":484},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/multi_api.rs","byte_start":49854,"byte_end":49864,"line_start":72,"line_end":72,"column_start":28,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":547},"to":{"krate":0,"index":553}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":51385,"byte_end":51394,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":574},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52089,"byte_end":52098,"line_start":83,"line_end":83,"column_start":19,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":574},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/container.rs","byte_start":52226,"byte_end":52235,"line_start":93,"line_end":93,"column_start":22,"column_end":31},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":574},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":54246,"byte_end":54263,"line_start":67,"line_end":67,"column_start":21,"column_end":38},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":610},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55557,"byte_end":55574,"line_start":107,"line_end":107,"column_start":31,"column_end":48},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":610},"to":{"krate":2,"index":3398}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/optional.rs","byte_start":55758,"byte_end":55775,"line_start":118,"line_end":118,"column_start":34,"column_end":51},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":610},"to":{"krate":2,"index":3411}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/wrapper/option.rs","byte_start":56028,"byte_end":56034,"line_start":5,"line_end":5,"column_start":24,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":2,"index":47183},"to":{"krate":0,"index":547}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":56991,"byte_end":56996,"line_start":23,"line_end":23,"column_start":21,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":791},"to":{"krate":1,"index":2569}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":57768,"byte_end":57773,"line_start":46,"line_end":46,"column_start":18,"column_end":23},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":791},"to":{"krate":2,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/dlopen-0.1.8/src/err.rs","byte_start":58288,"byte_end":58293,"line_start":64,"line_end":64,"column_start":25,"column_end":30},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":791},"to":{"krate":2,"index":3085}}]}