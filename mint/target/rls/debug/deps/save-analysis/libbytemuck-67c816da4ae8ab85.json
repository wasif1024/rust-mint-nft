{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1","program":"/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"bytemuck_derive\"","--cfg","feature=\"derive\"","-C","metadata=67c816da4ae8ab85","-C","extra-filename=-67c816da4ae8ab85","--out-dir","/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","-L","dependency=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps","--extern","bytemuck_derive=/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libbytemuck_derive-de1c9f03a6f44135.dylib","--cap-lints","allow","--error-format=json","--sysroot","/Users/air/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/air/Documents/programmingwork/blockchain/solana/rust-mint-nft/mint/target/rls/debug/deps/libbytemuck-67c816da4ae8ab85.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[12024644966633698595,0]},"crate_root":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src","external_crates":[{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[9994580471200982198,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[13944031075627487246,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[5133993387825513881,0]}},{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","num":4,"id":{"name":"bytemuck_derive","disambiguator":[16264867075091029009,0]}}],"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2137,"byte_end":2141,"line_start":56,"line_end":56,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2846,"byte_end":2847,"line_start":84,"line_end":84,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":44},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2884,"byte_end":2901,"line_start":87,"line_end":87,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2951,"byte_end":2952,"line_start":92,"line_end":92,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3006,"byte_end":3007,"line_start":94,"line_end":94,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3032,"byte_end":3033,"line_start":97,"line_end":97,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3077,"byte_end":3078,"line_start":99,"line_end":99,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3115,"byte_end":3116,"line_start":102,"line_end":102,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3155,"byte_end":3156,"line_start":105,"line_end":105,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3193,"byte_end":3194,"line_start":108,"line_end":108,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3235,"byte_end":3236,"line_start":111,"line_end":111,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":193},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3295,"byte_end":3308,"line_start":115,"line_end":115,"column_start":3,"column_end":16},"alias_span":null,"name":"AnyBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":196},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3310,"byte_end":3327,"line_start":115,"line_end":115,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":198},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3329,"byte_end":3339,"line_start":115,"line_end":115,"column_start":37,"column_end":47},"alias_span":null,"name":"Contiguous","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":195},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3341,"byte_end":3349,"line_start":115,"line_end":115,"column_start":49,"column_end":57},"alias_span":null,"name":"NoUninit","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":192},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3351,"byte_end":3354,"line_start":115,"line_end":115,"column_start":59,"column_end":62},"alias_span":null,"name":"Pod","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":197},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3358,"byte_end":3376,"line_start":116,"line_end":116,"column_start":3,"column_end":21},"alias_span":null,"name":"TransparentWrapper","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":194},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3378,"byte_end":3386,"line_start":116,"line_end":116,"column_start":23,"column_end":31},"alias_span":null,"name":"Zeroable","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":11004,"line_start":1,"line_end":385,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":163},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":415},{"krate":0,"index":418},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":830},{"krate":0,"index":839},{"krate":0,"index":841},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":850},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":466},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":107,"byte_end":181,"line_start":5,"line_end":5,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":182,"byte_end":185,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":186,"byte_end":199,"line_start":7,"line_end":7,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":200,"byte_end":203,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":204,"byte_end":277,"line_start":9,"line_end":9,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":278,"byte_end":292,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":293,"byte_end":296,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":297,"byte_end":320,"line_start":12,"line_end":12,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":321,"byte_end":349,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":350,"byte_end":382,"line_start":14,"line_end":14,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":383,"byte_end":415,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":416,"byte_end":456,"line_start":16,"line_end":16,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":457,"byte_end":460,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":461,"byte_end":536,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":537,"byte_end":616,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":617,"byte_end":697,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":698,"byte_end":777,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":778,"byte_end":796,"line_start":22,"line_end":22,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":797,"byte_end":800,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":801,"byte_end":828,"line_start":24,"line_end":24,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":829,"byte_end":832,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":833,"byte_end":904,"line_start":26,"line_end":26,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":905,"byte_end":945,"line_start":27,"line_end":27,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":946,"byte_end":949,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":950,"byte_end":1025,"line_start":29,"line_end":29,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1026,"byte_end":1103,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1104,"byte_end":1181,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1182,"byte_end":1227,"line_start":32,"line_end":32,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1228,"byte_end":1231,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1232,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1248,"byte_end":1251,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1252,"byte_end":1332,"line_start":36,"line_end":36,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1333,"byte_end":1412,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1413,"byte_end":1492,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":1493,"byte_end":1563,"line_start":39,"line_end":39,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":25},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14019,"byte_end":14032,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11420,"byte_end":11499,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11500,"byte_end":11503,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11504,"byte_end":11561,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11562,"byte_end":11623,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11624,"byte_end":11703,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11704,"byte_end":11777,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11778,"byte_end":11853,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11854,"byte_end":11920,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11921,"byte_end":11924,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":11925,"byte_end":12004,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12005,"byte_end":12081,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12082,"byte_end":12085,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12086,"byte_end":12157,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12158,"byte_end":12227,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12228,"byte_end":12262,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12263,"byte_end":12266,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12267,"byte_end":12279,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12280,"byte_end":12283,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12284,"byte_end":12361,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12362,"byte_end":12439,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12440,"byte_end":12511,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12512,"byte_end":12592,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12593,"byte_end":12671,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12672,"byte_end":12695,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12696,"byte_end":12699,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12700,"byte_end":12780,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12781,"byte_end":12861,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12862,"byte_end":12906,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12907,"byte_end":12910,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12911,"byte_end":12923,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12924,"byte_end":12927,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":12928,"byte_end":13005,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13006,"byte_end":13084,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13085,"byte_end":13128,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13129,"byte_end":13132,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13133,"byte_end":13173,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13174,"byte_end":13221,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13222,"byte_end":13293,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13294,"byte_end":13356,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13357,"byte_end":13437,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13438,"byte_end":13496,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13497,"byte_end":13571,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13572,"byte_end":13649,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13650,"byte_end":13730,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13731,"byte_end":13811,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13812,"byte_end":13891,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13892,"byte_end":13942,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":13943,"byte_end":14001,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":29},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","parent":null,"children":[{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":54},{"krate":0,"index":481},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":76},{"krate":0,"index":80},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14175,"byte_end":14242,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14243,"byte_end":14288,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":44},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19016,"byte_end":19033,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14376,"byte_end":14454,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14455,"byte_end":14534,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14535,"byte_end":14615,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14616,"byte_end":14690,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14691,"byte_end":14719,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14720,"byte_end":14723,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14724,"byte_end":14802,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14803,"byte_end":14879,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14880,"byte_end":14947,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks wheter a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":14948,"byte_end":15021,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15022,"byte_end":15098,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15099,"byte_end":15178,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15179,"byte_end":15256,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15257,"byte_end":15277,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15278,"byte_end":15281,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15282,"byte_end":15362,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15363,"byte_end":15440,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15441,"byte_end":15519,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15520,"byte_end":15596,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15597,"byte_end":15672,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15673,"byte_end":15689,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15690,"byte_end":15693,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15694,"byte_end":15706,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15707,"byte_end":15710,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15711,"byte_end":15784,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15785,"byte_end":15860,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15861,"byte_end":15938,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":15939,"byte_end":16011,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16012,"byte_end":16040,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16041,"byte_end":16044,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16045,"byte_end":16058,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16059,"byte_end":16062,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16063,"byte_end":16131,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16132,"byte_end":16135,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16136,"byte_end":16147,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16148,"byte_end":16196,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16197,"byte_end":16200,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16201,"byte_end":16217,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16218,"byte_end":16244,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16245,"byte_end":16262,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16263,"byte_end":16284,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16285,"byte_end":16306,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16307,"byte_end":16328,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16329,"byte_end":16334,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16335,"byte_end":16338,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16339,"byte_end":16385,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16386,"byte_end":16410,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16411,"byte_end":16414,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16415,"byte_end":16468,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16469,"byte_end":16494,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16495,"byte_end":16529,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16530,"byte_end":16557,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16558,"byte_end":16571,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16572,"byte_end":16581,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16582,"byte_end":16587,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16588,"byte_end":16591,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16592,"byte_end":16680,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16681,"byte_end":16764,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16765,"byte_end":16853,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16854,"byte_end":16892,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16893,"byte_end":16900,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16901,"byte_end":16904,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16905,"byte_end":16964,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16965,"byte_end":16968,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16969,"byte_end":16980,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":16981,"byte_end":17031,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17032,"byte_end":17050,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17051,"byte_end":17101,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17102,"byte_end":17121,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17122,"byte_end":17145,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17146,"byte_end":17169,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17170,"byte_end":17193,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17194,"byte_end":17201,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17202,"byte_end":17242,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17243,"byte_end":17291,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17292,"byte_end":17318,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17319,"byte_end":17374,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17375,"byte_end":17402,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17403,"byte_end":17439,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17440,"byte_end":17469,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17470,"byte_end":17485,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17486,"byte_end":17497,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17498,"byte_end":17505,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17506,"byte_end":17549,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17550,"byte_end":17576,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17577,"byte_end":17580,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17581,"byte_end":17613,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17614,"byte_end":17672,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17673,"byte_end":17719,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17720,"byte_end":17723,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17724,"byte_end":17761,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17762,"byte_end":17796,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17797,"byte_end":17855,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17856,"byte_end":17885,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17886,"byte_end":17889,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17890,"byte_end":17974,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":17975,"byte_end":18017,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18018,"byte_end":18044,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18045,"byte_end":18050,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18051,"byte_end":18119,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18120,"byte_end":18173,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18174,"byte_end":18212,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18213,"byte_end":18218,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18219,"byte_end":18248,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18249,"byte_end":18256,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18257,"byte_end":18260,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18261,"byte_end":18273,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18274,"byte_end":18277,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18278,"byte_end":18353,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18354,"byte_end":18412,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18413,"byte_end":18442,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18443,"byte_end":18522,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18523,"byte_end":18601,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18602,"byte_end":18680,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18681,"byte_end":18705,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18706,"byte_end":18784,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18785,"byte_end":18846,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18847,"byte_end":18900,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18901,"byte_end":18904,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18905,"byte_end":18974,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":18975,"byte_end":18998,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":45},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19296,"byte_end":19300,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19044,"byte_end":19117,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19120,"byte_end":19178,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19181,"byte_end":19210,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19213,"byte_end":19216,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19219,"byte_end":19288,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19422,"byte_end":19442,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19320,"byte_end":19398,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19401,"byte_end":19416,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19573,"byte_end":19593,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&T) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":{"krate":0,"index":46},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19550,"byte_end":19567,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19709,"byte_end":19729,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":{"krate":0,"index":46},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19694,"byte_end":19703,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19885,"byte_end":19905,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern(&Self::Bits) -> bool","parent":{"krate":0,"index":44},"children":[],"decl_id":{"krate":0,"index":46},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19870,"byte_end":19879,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":482},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20229,"byte_end":20241,"line_start":178,"line_end":178,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast\n","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20178,"byte_end":20226,"line_start":177,"line_end":177,"column_start":3,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":484},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20242,"byte_end":20261,"line_start":178,"line_end":178,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":482},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":485},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20516,"byte_end":20533,"line_start":183,"line_end":183,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":481},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.\n","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20266,"byte_end":20339,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20342,"byte_end":20413,"line_start":180,"line_end":180,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20416,"byte_end":20484,"line_start":181,"line_end":181,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20487,"byte_end":20513,"line_start":182,"line_end":182,"column_start":3,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":481},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20157,"byte_end":20173,"line_start":176,"line_end":176,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":485}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20005,"byte_end":20085,"line_start":173,"line_end":173,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20086,"byte_end":20096,"line_start":174,"line_end":174,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20625,"byte_end":20628,"line_start":188,"line_end":188,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20867,"byte_end":20871,"line_start":196,"line_end":196,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3085},"children":[],"decl_id":{"krate":1,"index":3087},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21220,"byte_end":21234,"line_start":209,"line_end":209,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20967,"byte_end":21001,"line_start":201,"line_end":201,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21002,"byte_end":21005,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21006,"byte_end":21020,"line_start":203,"line_end":203,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21021,"byte_end":21024,"line_start":204,"line_end":204,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21025,"byte_end":21074,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21075,"byte_end":21143,"line_start":206,"line_end":206,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21144,"byte_end":21202,"line_start":207,"line_end":207,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21203,"byte_end":21212,"line_start":208,"line_end":208,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":63},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21823,"byte_end":21841,"line_start":229,"line_end":229,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, CheckedCastError> where\nT: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21562,"byte_end":21604,"line_start":221,"line_end":221,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21605,"byte_end":21608,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21609,"byte_end":21623,"line_start":223,"line_end":223,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21624,"byte_end":21627,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21628,"byte_end":21677,"line_start":225,"line_end":225,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21678,"byte_end":21746,"line_start":226,"line_end":226,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21747,"byte_end":21805,"line_start":227,"line_end":227,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":21806,"byte_end":21815,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22397,"byte_end":22419,"line_start":247,"line_end":247,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22192,"byte_end":22239,"line_start":241,"line_end":241,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22240,"byte_end":22243,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22244,"byte_end":22258,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22259,"byte_end":22320,"line_start":244,"line_end":244,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22321,"byte_end":22379,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22380,"byte_end":22389,"line_start":246,"line_end":246,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":67},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23169,"byte_end":23177,"line_start":271,"line_end":271,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22717,"byte_end":22746,"line_start":259,"line_end":259,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22747,"byte_end":22750,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22751,"byte_end":22828,"line_start":261,"line_end":261,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22829,"byte_end":22908,"line_start":262,"line_end":262,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22909,"byte_end":22987,"line_start":263,"line_end":263,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":22988,"byte_end":23007,"line_start":264,"line_end":264,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23008,"byte_end":23011,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23012,"byte_end":23026,"line_start":266,"line_end":266,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23027,"byte_end":23030,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23031,"byte_end":23086,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23087,"byte_end":23151,"line_start":269,"line_end":269,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23152,"byte_end":23161,"line_start":270,"line_end":270,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":70},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23721,"byte_end":23733,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23463,"byte_end":23499,"line_start":283,"line_end":283,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23500,"byte_end":23503,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23504,"byte_end":23518,"line_start":285,"line_end":285,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23519,"byte_end":23522,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23523,"byte_end":23575,"line_start":287,"line_end":287,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23576,"byte_end":23638,"line_start":288,"line_end":288,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23639,"byte_end":23703,"line_start":289,"line_end":289,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":23704,"byte_end":23713,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24175,"byte_end":24187,"line_start":307,"line_end":307,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, CheckedCastError> where\nA: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24069,"byte_end":24113,"line_start":303,"line_end":303,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24114,"byte_end":24117,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_ref`], but `mut`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24118,"byte_end":24157,"line_start":305,"line_end":305,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24158,"byte_end":24167,"line_start":306,"line_end":306,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":76},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25430,"byte_end":25444,"line_start":340,"line_end":340,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24565,"byte_end":24638,"line_start":322,"line_end":322,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24639,"byte_end":24642,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24643,"byte_end":24702,"line_start":324,"line_end":324,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24703,"byte_end":24772,"line_start":325,"line_end":325,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24773,"byte_end":24776,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24777,"byte_end":24791,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24792,"byte_end":24795,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24796,"byte_end":24876,"line_start":329,"line_end":329,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24877,"byte_end":24897,"line_start":330,"line_end":330,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24898,"byte_end":24975,"line_start":331,"line_end":331,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":24976,"byte_end":25052,"line_start":332,"line_end":332,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25053,"byte_end":25133,"line_start":333,"line_end":333,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25134,"byte_end":25158,"line_start":334,"line_end":334,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25159,"byte_end":25284,"line_start":335,"line_end":335,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25285,"byte_end":25305,"line_start":336,"line_end":336,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25306,"byte_end":25386,"line_start":337,"line_end":337,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25387,"byte_end":25412,"line_start":338,"line_end":338,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25413,"byte_end":25422,"line_start":339,"line_end":339,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":80},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25972,"byte_end":25990,"line_start":359,"line_end":359,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], CheckedCastError>\nwhere A: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25822,"byte_end":25894,"line_start":354,"line_end":354,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25895,"byte_end":25907,"line_start":355,"line_end":355,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25908,"byte_end":25911,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ As [`checked_cast_slice`], but `&mut`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25912,"byte_end":25954,"line_start":357,"line_end":357,"column_start":1,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":25955,"byte_end":25964,"line_start":358,"line_end":358,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":84},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26546,"byte_end":26556,"line_start":382,"line_end":382,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26416,"byte_end":26450,"line_start":376,"line_end":376,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26451,"byte_end":26454,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26455,"byte_end":26468,"line_start":378,"line_end":378,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26469,"byte_end":26472,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26473,"byte_end":26528,"line_start":380,"line_end":380,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26529,"byte_end":26538,"line_start":381,"line_end":381,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":86},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26843,"byte_end":26857,"line_start":395,"line_end":395,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26701,"byte_end":26743,"line_start":389,"line_end":389,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26744,"byte_end":26747,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26748,"byte_end":26761,"line_start":391,"line_end":391,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26762,"byte_end":26765,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26766,"byte_end":26825,"line_start":393,"line_end":393,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":26826,"byte_end":26835,"line_start":394,"line_end":394,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":88},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27173,"byte_end":27191,"line_start":407,"line_end":407,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27029,"byte_end":27066,"line_start":402,"line_end":402,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27067,"byte_end":27070,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27071,"byte_end":27084,"line_start":404,"line_end":404,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27085,"byte_end":27155,"line_start":405,"line_end":405,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27156,"byte_end":27165,"line_start":406,"line_end":406,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":90},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27494,"byte_end":27498,"line_start":420,"line_end":420,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27355,"byte_end":27376,"line_start":414,"line_end":414,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27377,"byte_end":27380,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27381,"byte_end":27394,"line_start":416,"line_end":416,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27395,"byte_end":27398,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27399,"byte_end":27476,"line_start":418,"line_end":418,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27477,"byte_end":27486,"line_start":419,"line_end":419,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":93},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27765,"byte_end":27773,"line_start":433,"line_end":433,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27639,"byte_end":27671,"line_start":427,"line_end":427,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27672,"byte_end":27675,"line_start":428,"line_end":428,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27676,"byte_end":27689,"line_start":429,"line_end":429,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27690,"byte_end":27693,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27694,"byte_end":27747,"line_start":431,"line_end":431,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27748,"byte_end":27757,"line_start":432,"line_end":432,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28089,"byte_end":28097,"line_start":451,"line_end":451,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27971,"byte_end":27995,"line_start":445,"line_end":445,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":27996,"byte_end":27999,"line_start":446,"line_end":446,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28000,"byte_end":28013,"line_start":447,"line_end":447,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28014,"byte_end":28017,"line_start":448,"line_end":448,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28018,"byte_end":28071,"line_start":449,"line_end":449,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28072,"byte_end":28081,"line_start":450,"line_end":450,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28372,"byte_end":28382,"line_start":464,"line_end":464,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28248,"byte_end":28276,"line_start":458,"line_end":458,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28277,"byte_end":28280,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28281,"byte_end":28294,"line_start":460,"line_end":460,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28295,"byte_end":28298,"line_start":461,"line_end":461,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28299,"byte_end":28354,"line_start":462,"line_end":462,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28355,"byte_end":28364,"line_start":463,"line_end":463,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28677,"byte_end":28691,"line_start":477,"line_end":477,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28541,"byte_end":28577,"line_start":471,"line_end":471,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28578,"byte_end":28581,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28582,"byte_end":28595,"line_start":473,"line_end":473,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28596,"byte_end":28599,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28600,"byte_end":28659,"line_start":475,"line_end":475,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":28660,"byte_end":28669,"line_start":476,"line_end":476,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":165},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42040,"byte_end":42048,"line_start":15,"line_end":15,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":166}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41582,"byte_end":41633,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41634,"byte_end":41668,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41669,"byte_end":41672,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41673,"byte_end":41736,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41737,"byte_end":41793,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41794,"byte_end":41797,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41798,"byte_end":41811,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41812,"byte_end":41815,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41816,"byte_end":41857,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41858,"byte_end":41905,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41906,"byte_end":41979,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":41980,"byte_end":42022,"line_start":14,"line_end":14,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42328,"byte_end":42334,"line_start":22,"line_end":22,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":165},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42060,"byte_end":42100,"line_start":16,"line_end":16,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42103,"byte_end":42106,"line_start":17,"line_end":17,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42109,"byte_end":42184,"line_start":18,"line_end":18,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42187,"byte_end":42265,"line_start":19,"line_end":19,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42268,"byte_end":42310,"line_start":20,"line_end":20,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42313,"byte_end":42322,"line_start":21,"line_end":21,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58174,"byte_end":58190,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":57944,"byte_end":58010,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58011,"byte_end":58046,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58047,"byte_end":58050,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58051,"byte_end":58064,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58065,"byte_end":58068,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58069,"byte_end":58128,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58129,"byte_end":58156,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60759,"byte_end":60762,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":58865,"byte_end":58903,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":58904,"byte_end":58907,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":58908,"byte_end":58985,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":58986,"byte_end":59065,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59066,"byte_end":59146,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59147,"byte_end":59165,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59166,"byte_end":59169,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59170,"byte_end":59246,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59247,"byte_end":59318,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59319,"byte_end":59393,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59394,"byte_end":59412,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59413,"byte_end":59416,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59417,"byte_end":59430,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59431,"byte_end":59434,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59435,"byte_end":59475,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59476,"byte_end":59523,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59524,"byte_end":59602,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59603,"byte_end":59631,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59632,"byte_end":59708,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59709,"byte_end":59787,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59788,"byte_end":59868,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59869,"byte_end":59899,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59900,"byte_end":59954,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":59955,"byte_end":60030,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60031,"byte_end":60110,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60111,"byte_end":60155,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60156,"byte_end":60236,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60237,"byte_end":60295,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60296,"byte_end":60370,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60371,"byte_end":60448,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60449,"byte_end":60529,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60530,"byte_end":60610,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60611,"byte_end":60690,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60691,"byte_end":60741,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75068,"byte_end":75079,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74742,"byte_end":74798,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74799,"byte_end":74834,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74835,"byte_end":74838,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74839,"byte_end":74852,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74853,"byte_end":74856,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74857,"byte_end":74921,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74922,"byte_end":75000,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75001,"byte_end":75050,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":357},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78928,"byte_end":78936,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":75844,"byte_end":75922,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":75923,"byte_end":75926,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":75927,"byte_end":75984,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":75985,"byte_end":76064,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76065,"byte_end":76139,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76140,"byte_end":76219,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76220,"byte_end":76300,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76301,"byte_end":76381,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76382,"byte_end":76459,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76460,"byte_end":76475,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76476,"byte_end":76479,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76480,"byte_end":76554,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76555,"byte_end":76634,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76635,"byte_end":76715,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76716,"byte_end":76784,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76785,"byte_end":76837,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76838,"byte_end":76841,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76842,"byte_end":76854,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76855,"byte_end":76858,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76859,"byte_end":76936,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":76937,"byte_end":77009,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77010,"byte_end":77081,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77082,"byte_end":77162,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77163,"byte_end":77241,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77242,"byte_end":77265,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77266,"byte_end":77269,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77270,"byte_end":77282,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77283,"byte_end":77286,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77287,"byte_end":77353,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77354,"byte_end":77408,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77409,"byte_end":77484,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77485,"byte_end":77549,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77550,"byte_end":77553,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77554,"byte_end":77594,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77595,"byte_end":77642,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77643,"byte_end":77719,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77720,"byte_end":77798,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77799,"byte_end":77879,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77880,"byte_end":77910,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77911,"byte_end":77968,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":77969,"byte_end":78042,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78043,"byte_end":78122,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78123,"byte_end":78167,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78168,"byte_end":78219,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78220,"byte_end":78265,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78266,"byte_end":78346,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78347,"byte_end":78405,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78406,"byte_end":78480,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78481,"byte_end":78558,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78559,"byte_end":78639,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78640,"byte_end":78720,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78721,"byte_end":78800,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78801,"byte_end":78851,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78852,"byte_end":78910,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":377},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82608,"byte_end":82618,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79640,"byte_end":79668,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79669,"byte_end":79672,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79673,"byte_end":79748,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79749,"byte_end":79815,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79816,"byte_end":79860,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79861,"byte_end":79864,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79865,"byte_end":79944,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":79945,"byte_end":80025,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80026,"byte_end":80088,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80089,"byte_end":80092,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80093,"byte_end":80171,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80172,"byte_end":80247,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80248,"byte_end":80276,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80277,"byte_end":80280,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80281,"byte_end":80294,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80295,"byte_end":80298,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80299,"byte_end":80306,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80307,"byte_end":80338,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80339,"byte_end":80354,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80355,"byte_end":80399,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80400,"byte_end":80414,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80415,"byte_end":80427,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80428,"byte_end":80440,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80441,"byte_end":80453,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80454,"byte_end":80466,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80467,"byte_end":80479,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80480,"byte_end":80485,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80486,"byte_end":80522,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80523,"byte_end":80543,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80544,"byte_end":80585,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80586,"byte_end":80627,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80628,"byte_end":80633,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80634,"byte_end":80688,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80689,"byte_end":80732,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80733,"byte_end":80774,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80775,"byte_end":80782,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80783,"byte_end":80795,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80796,"byte_end":80799,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80800,"byte_end":80873,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80874,"byte_end":80887,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80888,"byte_end":80891,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80892,"byte_end":80969,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":80970,"byte_end":81049,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81050,"byte_end":81104,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81105,"byte_end":81108,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81109,"byte_end":81189,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81190,"byte_end":81212,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81213,"byte_end":81216,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81217,"byte_end":81297,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81298,"byte_end":81354,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81355,"byte_end":81358,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81359,"byte_end":81434,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81435,"byte_end":81507,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81508,"byte_end":81577,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81578,"byte_end":81581,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81582,"byte_end":81660,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81661,"byte_end":81737,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81738,"byte_end":81749,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81750,"byte_end":81753,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81754,"byte_end":81826,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81827,"byte_end":81905,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81906,"byte_end":81982,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":81983,"byte_end":82062,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82063,"byte_end":82066,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82067,"byte_end":82139,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82140,"byte_end":82205,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82206,"byte_end":82209,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82210,"byte_end":82287,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82288,"byte_end":82310,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82311,"byte_end":82314,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82315,"byte_end":82394,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82395,"byte_end":82428,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82429,"byte_end":82432,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82433,"byte_end":82510,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82511,"byte_end":82590,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":378},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83443,"byte_end":83446,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82639,"byte_end":82710,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82713,"byte_end":82722,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82725,"byte_end":82728,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82731,"byte_end":82803,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82806,"byte_end":82872,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82875,"byte_end":82943,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82946,"byte_end":82988,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82991,"byte_end":82994,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82997,"byte_end":83074,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83077,"byte_end":83099,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83102,"byte_end":83105,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83108,"byte_end":83177,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83180,"byte_end":83256,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83259,"byte_end":83328,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83331,"byte_end":83369,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83372,"byte_end":83375,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83378,"byte_end":83435,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":379},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83537,"byte_end":83546,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83463,"byte_end":83528,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":380},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83636,"byte_end":83645,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83562,"byte_end":83627,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84310,"byte_end":84322,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83661,"byte_end":83729,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83732,"byte_end":83795,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83798,"byte_end":83801,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83804,"byte_end":83878,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83881,"byte_end":83948,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":83951,"byte_end":84019,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84022,"byte_end":84025,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84028,"byte_end":84040,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84043,"byte_end":84046,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84049,"byte_end":84122,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84125,"byte_end":84171,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84174,"byte_end":84177,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84180,"byte_end":84254,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84257,"byte_end":84292,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":84295,"byte_end":84304,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85845,"byte_end":85857,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85161,"byte_end":85236,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85239,"byte_end":85315,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85318,"byte_end":85330,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85333,"byte_end":85336,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85339,"byte_end":85413,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85416,"byte_end":85483,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85486,"byte_end":85554,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85557,"byte_end":85560,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85563,"byte_end":85575,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85578,"byte_end":85581,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85584,"byte_end":85657,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85660,"byte_end":85706,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85709,"byte_end":85712,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85715,"byte_end":85789,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85792,"byte_end":85827,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":85830,"byte_end":85839,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":390},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95991,"byte_end":96009,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":92902,"byte_end":92977,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":92978,"byte_end":93007,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93008,"byte_end":93011,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93012,"byte_end":93084,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93085,"byte_end":93163,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93164,"byte_end":93242,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93243,"byte_end":93319,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93320,"byte_end":93396,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93397,"byte_end":93445,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93446,"byte_end":93449,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93450,"byte_end":93462,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93463,"byte_end":93466,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93467,"byte_end":93536,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93537,"byte_end":93540,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93541,"byte_end":93612,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93613,"byte_end":93616,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93617,"byte_end":93689,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93690,"byte_end":93752,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93753,"byte_end":93832,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93833,"byte_end":93912,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93913,"byte_end":93943,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93944,"byte_end":93947,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":93948,"byte_end":94028,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94029,"byte_end":94090,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94091,"byte_end":94094,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94095,"byte_end":94169,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94170,"byte_end":94185,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94186,"byte_end":94264,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94265,"byte_end":94343,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94344,"byte_end":94347,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94348,"byte_end":94419,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94420,"byte_end":94423,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94424,"byte_end":94438,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94439,"byte_end":94442,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94443,"byte_end":94522,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94523,"byte_end":94602,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94603,"byte_end":94678,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94679,"byte_end":94748,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94749,"byte_end":94786,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94787,"byte_end":94790,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94791,"byte_end":94869,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94870,"byte_end":94938,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94939,"byte_end":94942,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94943,"byte_end":94957,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94958,"byte_end":94961,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94962,"byte_end":94974,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94975,"byte_end":94978,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94979,"byte_end":94986,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":94987,"byte_end":95024,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95025,"byte_end":95049,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95050,"byte_end":95079,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95080,"byte_end":95083,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95084,"byte_end":95108,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95109,"byte_end":95142,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95143,"byte_end":95146,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95147,"byte_end":95210,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95211,"byte_end":95214,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95215,"byte_end":95274,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95275,"byte_end":95313,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95314,"byte_end":95374,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95375,"byte_end":95378,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95379,"byte_end":95406,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95407,"byte_end":95453,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95454,"byte_end":95526,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95527,"byte_end":95530,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95531,"byte_end":95588,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95589,"byte_end":95596,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95597,"byte_end":95600,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95601,"byte_end":95640,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95641,"byte_end":95644,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95645,"byte_end":95652,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95653,"byte_end":95690,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95691,"byte_end":95694,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95695,"byte_end":95719,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95720,"byte_end":95745,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95746,"byte_end":95749,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95750,"byte_end":95808,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95809,"byte_end":95812,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95813,"byte_end":95856,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95857,"byte_end":95890,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95891,"byte_end":95894,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95895,"byte_end":95925,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95926,"byte_end":95965,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":95966,"byte_end":95973,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96096,"byte_end":96100,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96029,"byte_end":96078,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96081,"byte_end":96090,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96412,"byte_end":96420,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref(&Inner) -> &Self","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96309,"byte_end":96382,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96385,"byte_end":96394,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96397,"byte_end":96406,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97110,"byte_end":97118,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut(&mut Inner) -> &mut Self","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":96991,"byte_end":97068,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97071,"byte_end":97092,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97095,"byte_end":97104,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97782,"byte_end":97792,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice(&[Inner]) -> &[Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97693,"byte_end":97764,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":97767,"byte_end":97776,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98336,"byte_end":98350,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut(&mut [Inner]) -> &mut [Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98225,"byte_end":98298,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98301,"byte_end":98318,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98321,"byte_end":98330,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":397},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98856,"byte_end":98860,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98789,"byte_end":98838,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98841,"byte_end":98850,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99065,"byte_end":99073,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref(&Self) -> &Inner","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":98962,"byte_end":99035,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99038,"byte_end":99047,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99050,"byte_end":99059,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":399},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99763,"byte_end":99771,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut(&mut Self) -> &mut Inner","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99644,"byte_end":99720,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99723,"byte_end":99745,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":99748,"byte_end":99757,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100435,"byte_end":100445,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice(&[Self]) -> &[Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100346,"byte_end":100417,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100420,"byte_end":100429,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100990,"byte_end":101004,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut(&mut [Self]) -> &mut [Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100879,"byte_end":100954,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100957,"byte_end":100972,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":100975,"byte_end":100984,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":831},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3666,"byte_end":3706,"line_start":124,"line_end":124,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3543,"byte_end":3615,"line_start":122,"line_end":122,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3618,"byte_end":3663,"line_start":123,"line_end":123,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":833},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3892,"byte_end":3916,"line_start":128,"line_end":128,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3710,"byte_end":3778,"line_start":125,"line_end":125,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3781,"byte_end":3856,"line_start":126,"line_end":126,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3859,"byte_end":3889,"line_start":127,"line_end":127,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":835},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4137,"byte_end":4149,"line_start":132,"line_end":132,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3920,"byte_end":3995,"line_start":129,"line_end":129,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3998,"byte_end":4071,"line_start":130,"line_end":130,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4074,"byte_end":4134,"line_start":131,"line_end":131,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":837},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4440,"byte_end":4457,"line_start":139,"line_end":139,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4153,"byte_end":4227,"line_start":133,"line_end":133,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4230,"byte_end":4261,"line_start":134,"line_end":134,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4264,"byte_end":4267,"line_start":135,"line_end":135,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4270,"byte_end":4346,"line_start":136,"line_end":136,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4349,"byte_end":4424,"line_start":137,"line_end":137,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4427,"byte_end":4437,"line_start":138,"line_end":138,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":830},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3526,"byte_end":3538,"line_start":121,"line_end":121,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":831},{"krate":0,"index":833},{"krate":0,"index":835},{"krate":0,"index":837}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":3392,"byte_end":3465,"line_start":119,"line_end":119,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4544,"byte_end":4547,"line_start":143,"line_end":143,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt(&Self, &mut core::fmt::Formatter) -> core::fmt::Result","parent":{"krate":1,"index":10117},"children":[],"decl_id":{"krate":1,"index":10118},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4932,"byte_end":4940,"line_start":155,"line_end":155,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T>(&T) -> &[u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4723,"byte_end":4757,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4758,"byte_end":4761,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4762,"byte_end":4840,"line_start":152,"line_end":152,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4841,"byte_end":4914,"line_start":153,"line_end":153,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4915,"byte_end":4924,"line_start":154,"line_end":154,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":431},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5227,"byte_end":5239,"line_start":164,"line_end":164,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T>(&mut T) -> &mut [u8] where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5010,"byte_end":5052,"line_start":159,"line_end":159,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5053,"byte_end":5056,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5057,"byte_end":5135,"line_start":161,"line_end":161,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5136,"byte_end":5209,"line_start":162,"line_end":162,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5210,"byte_end":5219,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5467,"byte_end":5477,"line_start":174,"line_end":174,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T>(&[u8]) -> &T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5337,"byte_end":5371,"line_start":168,"line_end":168,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5372,"byte_end":5375,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5376,"byte_end":5389,"line_start":170,"line_end":170,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5390,"byte_end":5393,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5394,"byte_end":5449,"line_start":172,"line_end":172,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5450,"byte_end":5459,"line_start":173,"line_end":173,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5696,"byte_end":5710,"line_start":184,"line_end":184,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T>(&mut [u8]) -> &mut T where T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5554,"byte_end":5596,"line_start":178,"line_end":178,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5597,"byte_end":5600,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5601,"byte_end":5614,"line_start":180,"line_end":180,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5615,"byte_end":5618,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5619,"byte_end":5678,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5679,"byte_end":5688,"line_start":183,"line_end":183,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5956,"byte_end":5978,"line_start":193,"line_end":193,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T>(&[u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5810,"byte_end":5857,"line_start":188,"line_end":188,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5858,"byte_end":5861,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5862,"byte_end":5876,"line_start":190,"line_end":190,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5877,"byte_end":5938,"line_start":191,"line_end":191,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":5939,"byte_end":5948,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6245,"byte_end":6263,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T>(&[u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6101,"byte_end":6138,"line_start":199,"line_end":199,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6139,"byte_end":6142,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6143,"byte_end":6156,"line_start":201,"line_end":201,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6157,"byte_end":6227,"line_start":202,"line_end":202,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6228,"byte_end":6237,"line_start":203,"line_end":203,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":441},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6549,"byte_end":6563,"line_start":215,"line_end":215,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T>(&[u8]) -> Result<&T, PodCastError> where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6355,"byte_end":6389,"line_start":208,"line_end":208,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6390,"byte_end":6393,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6394,"byte_end":6408,"line_start":210,"line_end":210,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6409,"byte_end":6412,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6413,"byte_end":6462,"line_start":212,"line_end":212,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6463,"byte_end":6531,"line_start":213,"line_end":213,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6532,"byte_end":6541,"line_start":214,"line_end":214,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6868,"byte_end":6886,"line_start":226,"line_end":226,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T>(&mut [u8]) -> Result<&mut T, PodCastError> where\nT: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6666,"byte_end":6708,"line_start":219,"line_end":219,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6709,"byte_end":6712,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6713,"byte_end":6727,"line_start":221,"line_end":221,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6728,"byte_end":6731,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6732,"byte_end":6781,"line_start":223,"line_end":223,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6782,"byte_end":6850,"line_start":224,"line_end":224,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":6851,"byte_end":6860,"line_start":225,"line_end":225,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":445},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7156,"byte_end":7160,"line_start":238,"line_end":238,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7017,"byte_end":7038,"line_start":232,"line_end":232,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7039,"byte_end":7042,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7043,"byte_end":7056,"line_start":234,"line_end":234,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7057,"byte_end":7060,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7061,"byte_end":7138,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7139,"byte_end":7148,"line_start":237,"line_end":237,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":448},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7365,"byte_end":7373,"line_start":248,"line_end":248,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B>(&mut A) -> &mut B where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7239,"byte_end":7271,"line_start":242,"line_end":242,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7272,"byte_end":7275,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7276,"byte_end":7289,"line_start":244,"line_end":244,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7290,"byte_end":7293,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7294,"byte_end":7347,"line_start":246,"line_end":246,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7348,"byte_end":7357,"line_start":247,"line_end":247,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":451},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7616,"byte_end":7624,"line_start":260,"line_end":260,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B>(&A) -> &B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7498,"byte_end":7522,"line_start":254,"line_end":254,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7523,"byte_end":7526,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7527,"byte_end":7540,"line_start":256,"line_end":256,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7541,"byte_end":7544,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7545,"byte_end":7598,"line_start":258,"line_end":258,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7599,"byte_end":7608,"line_start":259,"line_end":259,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":454},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7833,"byte_end":7843,"line_start":270,"line_end":270,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B>(&[A]) -> &[B] where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7709,"byte_end":7737,"line_start":264,"line_end":264,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7738,"byte_end":7741,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7742,"byte_end":7755,"line_start":266,"line_end":266,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7756,"byte_end":7759,"line_start":267,"line_end":267,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7760,"byte_end":7815,"line_start":268,"line_end":268,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7816,"byte_end":7825,"line_start":269,"line_end":269,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":457},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8070,"byte_end":8084,"line_start":280,"line_end":280,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B>(&mut [A]) -> &mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7934,"byte_end":7970,"line_start":274,"line_end":274,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7971,"byte_end":7974,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7975,"byte_end":7988,"line_start":276,"line_end":276,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7989,"byte_end":7992,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":7993,"byte_end":8052,"line_start":278,"line_end":278,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8053,"byte_end":8062,"line_start":279,"line_end":279,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8301,"byte_end":8313,"line_start":291,"line_end":291,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U>(&[T]) -> (&[T], &[U], &[T]) where T: NoUninit,\nU: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8226,"byte_end":8283,"line_start":289,"line_end":289,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8284,"byte_end":8293,"line_start":290,"line_end":290,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":463},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8502,"byte_end":8518,"line_start":299,"line_end":299,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U>(&mut [T]) -> (&mut [T], &mut [U], &mut [T]) where\nT: NoUninit + AnyBitPattern, U: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8423,"byte_end":8484,"line_start":297,"line_end":297,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8485,"byte_end":8494,"line_start":298,"line_end":298,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":466},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9069,"byte_end":9077,"line_start":319,"line_end":319,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8682,"byte_end":8711,"line_start":308,"line_end":308,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8712,"byte_end":8715,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8716,"byte_end":8793,"line_start":310,"line_end":310,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8794,"byte_end":8873,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8874,"byte_end":8952,"line_start":312,"line_end":312,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8953,"byte_end":8972,"line_start":313,"line_end":313,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8973,"byte_end":8976,"line_start":314,"line_end":314,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8977,"byte_end":8991,"line_start":315,"line_end":315,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8992,"byte_end":8995,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":8996,"byte_end":9051,"line_start":317,"line_end":317,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9052,"byte_end":9061,"line_start":318,"line_end":318,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":469},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9380,"byte_end":9392,"line_start":332,"line_end":332,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B>(&A) -> Result<&B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9187,"byte_end":9223,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9224,"byte_end":9227,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9228,"byte_end":9242,"line_start":327,"line_end":327,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9243,"byte_end":9246,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9247,"byte_end":9299,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9300,"byte_end":9362,"line_start":330,"line_end":330,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9363,"byte_end":9372,"line_start":331,"line_end":331,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":472},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9610,"byte_end":9622,"line_start":342,"line_end":342,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B>(&mut A) -> Result<&mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9508,"byte_end":9552,"line_start":338,"line_end":338,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9553,"byte_end":9556,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9557,"byte_end":9592,"line_start":340,"line_end":340,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9593,"byte_end":9602,"line_start":341,"line_end":341,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":475},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10538,"byte_end":10552,"line_start":367,"line_end":367,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B>(&[A]) -> Result<&[B], PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9780,"byte_end":9853,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9854,"byte_end":9857,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9858,"byte_end":9917,"line_start":353,"line_end":353,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9918,"byte_end":9987,"line_start":354,"line_end":354,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9988,"byte_end":9991,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":9992,"byte_end":10006,"line_start":356,"line_end":356,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10007,"byte_end":10010,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10011,"byte_end":10091,"line_start":358,"line_end":358,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10092,"byte_end":10112,"line_start":359,"line_end":359,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10113,"byte_end":10190,"line_start":360,"line_end":360,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10191,"byte_end":10267,"line_start":361,"line_end":361,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10268,"byte_end":10348,"line_start":362,"line_end":362,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10349,"byte_end":10373,"line_start":363,"line_end":363,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10374,"byte_end":10499,"line_start":364,"line_end":364,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10500,"byte_end":10520,"line_start":365,"line_end":365,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10521,"byte_end":10530,"line_start":366,"line_end":366,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":478},"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10820,"byte_end":10838,"line_start":378,"line_end":378,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B>(&mut [A]) -> Result<&mut [B], PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10674,"byte_end":10746,"line_start":373,"line_end":373,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10747,"byte_end":10759,"line_start":374,"line_end":374,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10760,"byte_end":10763,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10764,"byte_end":10802,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":10803,"byte_end":10812,"line_start":377,"line_end":377,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14113,"byte_end":14114,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19526,"byte_end":19527,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20601,"byte_end":20617,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":58}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20843,"byte_end":20859,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":60}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42975,"byte_end":42983,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43107,"byte_end":43118,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43150,"byte_end":43163,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43205,"byte_end":43217,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":56867,"byte_end":56874,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":56942,"byte_end":56948,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57016,"byte_end":57023,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57091,"byte_end":57098,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57166,"byte_end":57172,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57240,"byte_end":57247,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":57930,"byte_end":57936,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58235,"byte_end":58244,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58281,"byte_end":58291,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58328,"byte_end":58338,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58375,"byte_end":58385,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58422,"byte_end":58433,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58470,"byte_end":58482,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58519,"byte_end":58528,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58565,"byte_end":58575,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58612,"byte_end":58622,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58659,"byte_end":58669,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58706,"byte_end":58717,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58754,"byte_end":58766,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58807,"byte_end":58814,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61230,"byte_end":61238,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61538,"byte_end":61549,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61576,"byte_end":61589,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61621,"byte_end":61633,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73740,"byte_end":73747,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73810,"byte_end":73816,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73879,"byte_end":73886,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73949,"byte_end":73956,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74019,"byte_end":74025,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74088,"byte_end":74095,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74728,"byte_end":74734,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75147,"byte_end":75156,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75188,"byte_end":75198,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75230,"byte_end":75240,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75272,"byte_end":75282,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75314,"byte_end":75325,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75357,"byte_end":75369,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75401,"byte_end":75410,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75442,"byte_end":75452,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75484,"byte_end":75494,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75526,"byte_end":75536,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75568,"byte_end":75579,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75611,"byte_end":75623,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78998,"byte_end":78999,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79097,"byte_end":79106,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79135,"byte_end":79144,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79173,"byte_end":79183,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79212,"byte_end":79222,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79251,"byte_end":79261,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79290,"byte_end":79300,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79329,"byte_end":79339,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79368,"byte_end":79378,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79407,"byte_end":79418,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79447,"byte_end":79458,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79487,"byte_end":79499,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79528,"byte_end":79540,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":101496,"byte_end":101504,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":428}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":2858,"byte_end":2865,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":29}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14036,"byte_end":14044,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14047,"byte_end":14052,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14055,"byte_end":14059,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/anybitpattern.rs","byte_start":14113,"byte_end":14114,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":25}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19035,"byte_end":19039,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":44}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":19526,"byte_end":19527,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":48},"to":{"krate":0,"index":44}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20601,"byte_end":20617,"line_start":187,"line_end":187,"column_start":29,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":481},"to":{"krate":1,"index":10117}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/checked.rs","byte_start":20843,"byte_end":20859,"line_start":195,"line_end":195,"column_start":36,"column_end":52},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":481},"to":{"krate":1,"index":3085}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42050,"byte_end":42055,"line_start":15,"line_end":15,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":42975,"byte_end":42983,"line_start":43,"line_end":43,"column_start":39,"column_end":47},"kind":{"Impl":{"id":22}},"from":{"krate":1,"index":27761},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43107,"byte_end":43118,"line_start":47,"line_end":47,"column_start":39,"column_end":50},"kind":{"Impl":{"id":23}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43150,"byte_end":43163,"line_start":48,"line_end":48,"column_start":26,"column_end":39},"kind":{"Impl":{"id":24}},"from":{"krate":1,"index":38559},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":43205,"byte_end":43217,"line_start":49,"line_end":49,"column_start":39,"column_end":51},"kind":{"Impl":{"id":25}},"from":{"krate":1,"index":32006},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":56867,"byte_end":56874,"line_start":335,"line_end":335,"column_start":34,"column_end":41},"kind":{"Impl":{"id":26}},"from":{"krate":1,"index":53142},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":56942,"byte_end":56948,"line_start":337,"line_end":337,"column_start":34,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":1,"index":53151},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57016,"byte_end":57023,"line_start":339,"line_end":339,"column_start":34,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":1,"index":53162},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57091,"byte_end":57098,"line_start":341,"line_end":341,"column_start":34,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":53171},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57166,"byte_end":57172,"line_start":343,"line_end":343,"column_start":34,"column_end":40},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":53182},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable.rs","byte_start":57240,"byte_end":57247,"line_start":345,"line_end":345,"column_start":34,"column_end":41},"kind":{"Impl":{"id":31}},"from":{"krate":1,"index":53197},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":57930,"byte_end":57936,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":32}},"from":{"krate":1,"index":47183},"to":{"krate":0,"index":165}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58192,"byte_end":58197,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58235,"byte_end":58244,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":33}},"from":{"krate":1,"index":24410},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58281,"byte_end":58291,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":1,"index":24444},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58328,"byte_end":58338,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":24478},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58375,"byte_end":58385,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":24512},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58422,"byte_end":58433,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":24546},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58470,"byte_end":58482,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":24580},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58519,"byte_end":58528,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":24206},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58565,"byte_end":58575,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":24240},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58612,"byte_end":58622,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":24274},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58659,"byte_end":58669,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":24308},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58706,"byte_end":58717,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":24342},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58754,"byte_end":58766,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":24376},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/zeroable_in_option.rs","byte_start":58807,"byte_end":58814,"line_start":28,"line_end":28,"column_start":37,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":2320},"to":{"krate":0,"index":250}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60764,"byte_end":60772,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":165},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":60775,"byte_end":60779,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61230,"byte_end":61238,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":1,"index":27761},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61538,"byte_end":61549,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":61}},"from":{"krate":1,"index":3197},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61576,"byte_end":61589,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":1,"index":38559},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":61621,"byte_end":61633,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":1,"index":32006},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73740,"byte_end":73747,"line_start":305,"line_end":305,"column_start":29,"column_end":36},"kind":{"Impl":{"id":64}},"from":{"krate":1,"index":53142},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73810,"byte_end":73816,"line_start":307,"line_end":307,"column_start":29,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":1,"index":53151},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73879,"byte_end":73886,"line_start":309,"line_end":309,"column_start":29,"column_end":36},"kind":{"Impl":{"id":66}},"from":{"krate":1,"index":53162},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":73949,"byte_end":73956,"line_start":311,"line_end":311,"column_start":29,"column_end":36},"kind":{"Impl":{"id":67}},"from":{"krate":1,"index":53171},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74019,"byte_end":74025,"line_start":313,"line_end":313,"column_start":29,"column_end":35},"kind":{"Impl":{"id":68}},"from":{"krate":1,"index":53182},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod.rs","byte_start":74088,"byte_end":74095,"line_start":315,"line_end":315,"column_start":29,"column_end":36},"kind":{"Impl":{"id":69}},"from":{"krate":1,"index":53197},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":74728,"byte_end":74734,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":1,"index":47183},"to":{"krate":0,"index":268}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75081,"byte_end":75097,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":250},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75100,"byte_end":75104,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75147,"byte_end":75156,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":24410},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75188,"byte_end":75198,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":24444},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75230,"byte_end":75240,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":24478},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75272,"byte_end":75282,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":24512},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75314,"byte_end":75325,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":24546},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75357,"byte_end":75369,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":24580},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75401,"byte_end":75410,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":24206},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75442,"byte_end":75452,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":24240},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75484,"byte_end":75494,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":24274},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75526,"byte_end":75536,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":24308},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75568,"byte_end":75579,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":24342},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/pod_in_option.rs","byte_start":75611,"byte_end":75623,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":24376},"to":{"krate":0,"index":302}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78938,"byte_end":78943,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3184},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78946,"byte_end":78950,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":78998,"byte_end":78999,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":359},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79097,"byte_end":79106,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":1,"index":24206},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79135,"byte_end":79144,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":24410},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79173,"byte_end":79183,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":88}},"from":{"krate":1,"index":24240},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79212,"byte_end":79222,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":89}},"from":{"krate":1,"index":24444},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79251,"byte_end":79261,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":90}},"from":{"krate":1,"index":24274},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79290,"byte_end":79300,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":24478},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79329,"byte_end":79339,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":24308},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79368,"byte_end":79378,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":24512},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79407,"byte_end":79418,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":24342},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79447,"byte_end":79458,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":24546},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79487,"byte_end":79499,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":24376},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/no_uninit.rs","byte_start":79528,"byte_end":79540,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":24580},"to":{"krate":0,"index":357}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/contiguous.rs","byte_start":82620,"byte_end":82624,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3189},"to":{"krate":0,"index":377}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/transparent.rs","byte_start":101496,"byte_end":101504,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":117}},"from":{"krate":1,"index":27761},"to":{"krate":0,"index":390}},{"span":{"file_name":"/Users/air/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.12.1/src/lib.rs","byte_start":4524,"byte_end":4536,"line_start":142,"line_end":142,"column_start":29,"column_end":41},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":830},"to":{"krate":1,"index":10117}}]}